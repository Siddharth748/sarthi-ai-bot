// index.js тАФ SarathiAI (Complete Fixed Version with Context-Aware Intent Logic)
import dotenv from "dotenv";
dotenv.config();

import express from "express";
import axios from "axios";
import pg from "pg";

const { Pool } = pg;
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

/* ---------------- Config / env ---------------- */
const BOT_NAME = process.env.BOT_NAME || "SarathiAI";
const PORT = process.env.PORT || 8080;

const DATABASE_URL = (process.env.DATABASE_URL || "").trim();
const OPENAI_KEY = (process.env.OPENAI_API_KEY || "").trim();
const OPENAI_MODEL = (process.env.OPENAI_MODEL || "gpt-4o-mini").trim();

const HELTAR_API_KEY = (process.env.HELTAR_API_KEY || "").trim();
const HELTAR_PHONE_ID = (process.env.HELTAR_PHONE_ID || "").trim();

const MAX_REPLY_LENGTH = parseInt(process.env.MAX_REPLY_LENGTH || "800", 10) || 800;

const validateEnvVariables = () => {
    const requiredVars = { DATABASE_URL, OPENAI_KEY, HELTAR_API_KEY, HELTAR_PHONE_ID };
    const missingVars = Object.entries(requiredVars).filter(([, value]) => !value).map(([key]) => key);
    if (missingVars.length > 0) {
        console.error(`тЭМ Critical Error: Missing environment variables: ${missingVars.join(", ")}`);
        process.exit(1);
    }
};

const dbPool = new Pool({ connectionString: DATABASE_URL, ssl: { rejectUnauthorized: false } });

/* ========== GITA WISDOM DATABASE ========== */
const GITA_WISDOM_DATABASE = {
    anger: {
        verses: ["2.63", "2.62", "2.56"],
        teachings: {
            hindi: [
                "ЁЯМК **рдХреНрд░реЛрдз рдкрд░ рдЧреАрддрд╛ рдХрд╛ рджреГрд╖реНрдЯрд┐рдХреЛрдг:**\n\nрдХреГрд╖реНрдг рдХрд╣рддреЗ рд╣реИрдВ: 'рдХреНрд░реЛрдз рд╕реЗ рднреНрд░рдо рдкреИрджрд╛ рд╣реЛрддрд╛ рд╣реИ, рднреНрд░рдо рд╕реЗ рдмреБрджреНрдзрд┐ рдирд╖реНрдЯ рд╣реЛрддреА рд╣реИ' (2.63)ред\n\n**рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЙрдкрд╛рдп:**\n1. рд╢реНрд╡рд╛рд╕ рдкрд░ рдзреНрдпрд╛рди: 3 рдЧрд╣рд░реА рд╕рд╛рдБрд╕реЗрдВ рд▓реЗрдВ\n2. рдкреВрдЫреЗрдВ: 'рдХреНрдпрд╛ рдпрд╣ рдореЗрд░реЗ рдирд┐рдпрдВрддреНрд░рдг рдореЗрдВ рд╣реИ?'\n3. 10 рдорд┐рдирдЯ рдЯрд╣рд▓реЗрдВ рдпрд╛ рдЬрдк рдХрд░реЗрдВ\n\nрдХреНрдпрд╛ рдЖрдк рдЗрдирдореЗрдВ рд╕реЗ рдХреЛрдИ рдЙрдкрд╛рдп рдЖрдЬ рдЖрдЬрд╝рдорд╛рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
                "тЪб **рдЧреБрд╕реНрд╕реЗ рдХрд╛ рд╕рдорд╛рдзрд╛рди:**\n\nрдЧреАрддрд╛ (2.56) рдХрд╣рддреА рд╣реИ: 'рджреБрдГрдЦреЗрд╖реБ рдЕрдиреБрджреНрд╡рд┐рдЧреНрдирдордирд╛рдГ' - рджреБрдЦ рдореЗрдВ рдЬрд┐рд╕рдХрд╛ рдорди рд╡рд┐рдЪрд▓рд┐рдд рдирд╣реАрдВ рд╣реЛрддрд╛ред\n\n**рддрддреНрдХрд╛рд▓ рдХреНрд░рд┐рдпрд╛:**\nтАв рдЧрд┐рдирддреА рдХрд░реЗрдВ: 10 рд╕реЗ 1 рддрдХ рдЙрд▓реНрдЯреА\nтАв рдардВрдбрд╛ рдкрд╛рдиреА рдкрд┐рдПрдВ\nтАв 'реР рд╢рд╛рдВрддрд┐' рдХрд╛ рдЬрдк рдХрд░реЗрдВ\n\nрдЗрдирдореЗрдВ рд╕реЗ рдХреМрди рд╕рд╛ рддрд░реАрдХрд╛ рдЖрдкрдХреЗ рд▓рд┐рдП рдХрд╛рдо рдХрд░реЗрдЧрд╛?"
            ],
            english: [
                "ЁЯМК **Gita's Perspective on Anger:**\n\nKrishna says: 'From anger comes delusion; from delusion, confusion of memory' (2.63).\n\n**Practical Steps:**\n1. Breath awareness: Take 3 deep breaths\n2. Ask: 'Is this within my control?'\n3. Walk for 10 minutes or chant\n\nWould you like to try any of these techniques today?",
                "тЪб **Managing Anger Effectively:**\n\nThe Gita (2.56) teaches: 'Be undisturbed in sorrow.'\n\n**Immediate Actions:**\nтАв Count backwards from 10 to 1\nтАв Drink cool water\nтАв Chant 'Om Shanti'\n\nWhich of these approaches might work for you?"
            ]
        }
    },
    stress: {
        verses: ["2.47", "2.48", "2.50"],
        teachings: {
            hindi: [
                "ЁЯзШ **рддрдирд╛рд╡ рдкреНрд░рдмрдВрдзрди рдЧреАрддрд╛ рд╕реЗ:**\n\n'рдХрд░реНрдордгреНрдпреЗрд╡рд╛рдзрд┐рдХрд╛рд░рд╕реНрддреЗ рдорд╛ рдлрд▓реЗрд╖реБ рдХрджрд╛рдЪрди' (2.47) - рдХрд░реНрддрд╡реНрдп рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ, рдкрд░рд┐рдгрд╛рдо рдкрд░ рдирд╣реАрдВред\n\n**рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЕрднреНрдпрд╛рд╕:**\n1. рдкреНрд░рддрд┐рджрд┐рди 5 рдорд┐рдирдЯ рдзреНрдпрд╛рди\n2. рдПрдХ рд╕рдордп рдореЗрдВ рдПрдХ рдХрд╛рдо\n3. рд╢рд╛рдо рдХреЛ рддрдирд╛рд╡ рдореБрдХреНрдд рд╕рдордп\n\nрдХреНрдпрд╛ рдЖрдк рдЗрдирдореЗрдВ рд╕реЗ рдХрд┐рд╕реА рдЕрднреНрдпрд╛рд╕ рдХреЛ рд╢реБрд░реВ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?",
                "ЁЯМЕ **рддрдирд╛рд╡ рд╕реЗ рдореБрдХреНрддрд┐:**\n\n'рдпреЛрдЧрд╕реНрдердГ рдХреБрд░реБ рдХрд░реНрдорд╛рдгрд┐' (2.48) - рд╕рдВрддреБрд▓рд┐рдд рдорди рд╕реЗ рдХрд░реНрдо рдХрд░реЛред\n\n**рджреИрдирд┐рдХ рд░реВрдкрд░реЗрдЦрд╛:**\nтАв рд╕реБрдмрд╣ 10 рдорд┐рдирдЯ рдкреНрд░рд╛рдгрд╛рдпрд╛рдо\nтАв рдХрд╛рдо рдХреЗ рдмреАрдЪ рдореЗрдВ рдЫреЛрдЯреЗ рдмреНрд░реЗрдХ\nтАв рд░рд╛рдд рдХреЛ рдХреГрддрдЬреНрдЮрддрд╛ рдкрддреНрд░рд┐рдХрд╛\n\nрдЖрдЬ рд╕реЗ рдХреМрди рд╕рд╛ рдЕрднреНрдпрд╛рд╕ рд╢реБрд░реВ рдХрд░реЗрдВрдЧреЗ?"
            ],
            english: [
                "ЁЯзШ **Stress Management from Gita:**\n\n'You have right to work only, never to its fruits' (2.47).\n\n**Practical Practices:**\n1. 5-minute daily meditation\n2. One task at a time\n3. Stress-free evening time\n\nCould you start any of these practices today?",
                "ЁЯМЕ **Freedom from Stress:**\n\n'Perform action, O Arjuna, being steadfast in yoga' (2.48).\n\n**Daily Framework:**\nтАв 10 min morning pranayama\nтАв Short breaks between work\nтАв Evening gratitude journal\n\nWhich practice would you like to start with?"
            ]
        }
    },
    sadness: {
        verses: ["2.14", "2.22", "2.27"],
        teachings: {
            hindi: [
                "ЁЯТл **рджреБрдЦ рдХрд╛ рдЧреАрддрд╛ рд╕рдорд╛рдзрд╛рди:**\n\n'рджреБрдГрдЦреЗрд╖реБ рдЕрдиреБрджреНрд╡рд┐рдЧреНрдирдордирд╛рдГ' (2.14) - рджреБрдЦ рдореЗрдВ рдЕрд╡рд┐рдЪрд▓рд┐рдд рд░рд╣реЗрдВред\n\n**рдЙрдкрдЪрд╛рд░ рдпреЛрдЬрдирд╛:**\n1. рдкреНрд░рдХреГрддрд┐ рдореЗрдВ рд╕рдордп рдмрд┐рддрд╛рдПрдВ\n2. рд╕реЗрд╡рд╛ рдХрд╛рд░реНрдп рдореЗрдВ рднрд╛рдЧ рд▓реЗрдВ\n3. рдкреНрд░реЗрд░рдгрд╛рджрд╛рдпрдХ рдкрд╛рда рдкрдврд╝реЗрдВ\n\nрдХреНрдпрд╛ рдЖрдк рдЖрдЬ рдХрд┐рд╕реА рдПрдХ рдЧрддрд┐рд╡рд┐рдзрд┐ рдХрд╛ рдЪрдпрди рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?",
                "тЬи **рдЙрджрд╛рд╕реА рд╕реЗ рдЙрдмрд░рдиреЗ рдХреЗ рдЙрдкрд╛рдп:**\n\n'рдЬрд╛рддрд╕реНрдп рд╣рд┐ рдзреНрд░реБрд╡реЛ рдореГрддреНрдпреБрдГ' (2.27) - рдЬреЛ рдЬрдиреНрдорд╛ рд╣реИ рдЙрд╕рдХреА рдореГрддреНрдпреБ рдирд┐рд╢реНрдЪрд┐рдд рд╣реИред\n\n**рд╕рдХрд╛рд░рд╛рддреНрдордХ рдХрджрдо:**\nтАв рдХрд┐рд╕реА рдорд┐рддреНрд░ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ\nтАв рд╣рд▓реНрдХрд╛ рд╡реНрдпрд╛рдпрд╛рдо рдХрд░реЗрдВ\nтАв рд╕рдВрдЧреАрдд рд╕реБрдиреЗрдВ рдпрд╛ рднрдЬрди рдЧрд╛рдПрдВ\n\nрдЖрдкрдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдЙрдкрдпреБрдХреНрдд рд╡рд┐рдХрд▓реНрдк рдХреМрди рд╕рд╛ рд╣реИ?"
            ],
            english: [
                "ЁЯТл **Gita's Solution for Sadness:**\n\n'Be undisturbed in sorrow' (2.14).\n\n**Healing Plan:**\n1. Spend time in nature\n2. Engage in service work\n3. Read inspiring texts\n\nCan you choose one activity for today?",
                "тЬи **Overcoming Sadness:**\n\n'Death is certain for one who is born' (2.27).\n\n**Positive Steps:**\nтАв Talk to a friend\nтАв Light exercise\nтАв Listen to music or bhajans\n\nWhich option seems most suitable for you?"
            ]
        }
    },
    purpose: {
        verses: ["2.47", "3.35", "18.46"],
        teachings: {
            hindi: [
                "ЁЯМЕ **рдЬреАрд╡рди рдХреЗ рдЙрджреНрджреЗрд╢реНрдп рдХреА рдЦреЛрдЬ:**\n\nрдЧреАрддрд╛ (3.35) рдХрд╣рддреА рд╣реИ: 'рд╕реНрд╡рдзрд░реНрдореЗ рдирд┐рдзрдирдВ рд╢реНрд░реЗрдп:' - рдЕрдкрдиреЗ рдзрд░реНрдо рдореЗрдВ рд░рд╣рддреЗ рд╣реБрдП рдорд░рдирд╛ рднреА рд╢реНрд░реЗрдпрд╕реНрдХрд░ рд╣реИред\n\nрдЬрдм рдЖрдк рдЦреЛрдпрд╛ рд╣реБрдЖ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реЛрдВ, рддреЛ рдпрд╛рдж рд░рдЦреЗрдВ:\nтАв рдЖрдкрдХрд╛ рдЙрджреНрджреЗрд╢реНрдп рдмрд╛рд╣рд░ рдирд╣реАрдВ, рдЖрдкрдХреЗ рднреАрддрд░ рд╣реИ\nтАв рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рдХрд░реНрдореЛрдВ рд╕реЗ рд╢реБрд░реБрдЖрдд рдХрд░реЗрдВ\nтАв рдкреНрд░рддрд┐рджрд┐рди рд╕реНрд╡рдпрдВ рд╕реЗ рдкреВрдЫреЗрдВ: 'рдЖрдЬ рдореИрдВ рдХрд┐рд╕рдХреА рд╕реЗрд╡рд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?'\n\nрдХреНрдпрд╛ рдЖрдк рдЖрдЬ рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ рдХрд░реНрдо рдХрд░рдиреЗ рдХрд╛ рд╕рдВрдХрд▓реНрдк рд▓реЗрдВрдЧреЗ?",
                "ЁЯТл **рдЕрд░реНрде рдХреА рдЦреЛрдЬ:**\n\n'рдХрд░реНрдордгреНрдпреЗрд╡рд╛рдзрд┐рдХрд╛рд░рд╕реНрддреЗ рдорд╛ рдлрд▓реЗрд╖реБ рдХрджрд╛рдЪрди' (2.47) - рдХрд░реНрддрд╡реНрдп рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ, рдкрд░рд┐рдгрд╛рдо рдкрд░ рдирд╣реАрдВред\n\n**рдЦреЛрдЬ рдХреЗ рдЪрд░рдг:**\n1. рдЕрдкрдиреА рдкреНрд░рддрд┐рднрд╛рдУрдВ рдХреА рд╕реВрдЪреА рдмрдирд╛рдПрдВ\n2. рджреЗрдЦреЗрдВ рд╕рдорд╛рдЬ рдХреЛ рдХрд┐рд╕рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИ\n3. рд╡рд╣рд╛рдВ рд╕реЗрд╡рд╛ рдХрд░реЗрдВ рдЬрд╣рд╛рдВ рджреЛрдиреЛрдВ рдорд┐рд▓рддреЗ рд╣реИрдВ\n\nрдЖрдкрдХреА рдХреМрди рд╕реА рдкреНрд░рддрд┐рднрд╛ рдЖрдЬ рдХрд┐рд╕реА рдХреА рдорджрдж рдХрд░ рд╕рдХрддреА рд╣реИ?"
            ],
            english: [
                "ЁЯМЕ **Finding Life's Purpose:**\n\nGita (3.35) teaches: 'Better is one's own duty though imperfect' - Your unique path matters most.\n\nWhen feeling lost, remember:\nтАв Your purpose isn't out there, it's within you\nтАв Start with small, meaningful actions\nтАв Ask daily: 'Who can I serve today?'\n\nWould you like to commit to one small purposeful action today?",
                "ЁЯТл **The Search for Meaning:**\n\n'You have right to work only, never to its fruits' (2.47).\n\n**Discovery Steps:**\n1. List your natural talents and joys\n2. Observe where society needs help\n3. Serve where your gifts meet others' needs\n\nWhich of your talents could help someone today?"
            ]
        }
    },
    dharma: {
        verses: ["3.35", "18.45", "18.47"],
        teachings: {
            hindi: [
                "ЁЯОп **рд╕реНрд╡рдзрд░реНрдо рдХреА рдкрд╣рдЪрд╛рди:**\n\nрдЧреАрддрд╛ (3.35) рдХрд╣рддреА рд╣реИ: 'рд╕реНрд╡рдзрд░реНрдореЗ рдирд┐рдзрдирдВ рд╢реНрд░реЗрдп:' - рдЕрдкрдирд╛ рдзрд░реНрдо рджреВрд╕рд░реЗ рдХреЗ рдзрд░реНрдо рд╕реЗ рдмреЗрд╣рддрд░ рд╣реИред\n\n**рдкрд╣рдЪрд╛рди рдХреЗ рддрд░реАрдХреЗ:**\n1. рдмрдЪрдкрди рдореЗрдВ рдХреНрдпрд╛ рдХрд░рдирд╛ рдкрд╕рдВрдж рдерд╛?\n2. рд▓реЛрдЧ рдЖрдкрд╕реЗ рдХрд┐рд╕ рд▓рд┐рдП рд╕рд╣рд╛рдпрддрд╛ рдорд╛рдВрдЧрддреЗ рд╣реИрдВ?\n3. рдХреМрди рд╕рд╛ рдХрд╛рдо рдХрд░рддреЗ рд╕рдордп рд╕рдордп рдХрд╛ рдкрддрд╛ рдирд╣реАрдВ рдЪрд▓рддрд╛?\n\nрдЗрдирдореЗрдВ рд╕реЗ рдХреМрди рд╕рд╛ рдкреНрд░рд╢реНрди рдЖрдкрдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рд╕рд╛рд░реНрдердХ рд▓рдЧрддрд╛ рд╣реИ?",
                "ЁЯМЯ **рдХрд░реНрддрд╡реНрдп рдХрд╛ рдорд╛рд░реНрдЧ:**\n\n'рд╕реНрд╡реЗ рд╕реНрд╡реЗ рдХрд░реНрдордгреНрдпрднрд┐рд░рддрдГ' (18.45) - рдЕрдкрдиреЗ рдХрд░реНрдо рдореЗрдВ рддрд▓реНрд▓реАрди рд░рд╣реЗрдВред\n\n**рдЖрддреНрдо-рдЦреЛрдЬ рдХреЗ рдкреНрд░рд╢реНрди:**\nтАв рдХрд┐рд╕ рдХрд╛рдо рдХреЛ рдХрд░рдиреЗ рдореЗрдВ рдЖрдкрдХреЛ рдКрд░реНрдЬрд╛ рдорд┐рд▓рддреА рд╣реИ?\nтАв рдЖрдкрдХреА рдХреМрди рд╕реА рд╡рд┐рд╢реЗрд╖рддрд╛ рд▓реЛрдЧреЛрдВ рдХреЛ рдЖрдХрд░реНрд╖рд┐рдд рдХрд░рддреА рд╣реИ?\nтАв рдХрд┐рд╕ рд╕реЗрд╡рд╛ рдореЗрдВ рдЖрдкрдХреЛ рдЖрдирдВрдж рдЖрддрд╛ рд╣реИ?\n\nрдЖрдЬ рдЖрдк рдХрд┐рд╕ рдПрдХ рдкреНрд░рд╢реНрди рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?"
            ],
            english: [
                "ЁЯОп **Discovering Your Dharma:**\n\nGita (3.35): 'Better is one's own duty though imperfect' - Your unique path is your perfection.\n\n**Self-Discovery Questions:**\n1. What did you love doing as a child?\n2. What do people naturally ask your help for?\n3. What work makes you lose track of time?\n\nWhich question resonates most with you right now?",
                "ЁЯМЯ **The Path of Right Action:**\n\n'By devotion to one's own duty' (18.45) - Excellence comes from embracing your nature.\n\n**Reflection Points:**\nтАв What activities give you energy rather than drain you?\nтАв What unique perspective do you bring to challenges?\nтАв Where does your compassion naturally flow?\n\nWould you like to explore any of these reflection points further?"
            ]
        }
    },
    motivation: {
        verses: ["2.47", "2.50", "6.5"],
        teachings: {
            hindi: [
                "ЁЯТк **рдирд┐рд░рдВрддрд░ рдкреНрд░реЗрд░рдгрд╛:**\n\nрдЧреАрддрд╛ (2.50) рдХрд╣рддреА рд╣реИ: 'рдпреЛрдЧрдГ рдХрд░реНрдорд╕реБ рдХреМрд╢рд▓рдореН' - рдХрд░реНрдо рдореЗрдВ рдХреБрд╢рд▓рддрд╛ рд╣реА рдпреЛрдЧ рд╣реИред\n\n**рдкреНрд░реЗрд░рдгрд╛ рдмрдирд╛рдП рд░рдЦрдиреЗ рдХреЗ рдЙрдкрд╛рдп:**\n1. рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рд▓рдХреНрд╖реНрдп рдмрдирд╛рдПрдВ\n2. рдкреНрд░рддрд┐рджрд┐рди рдХреА рд╕рдлрд▓рддрд╛рдУрдВ рдХреЛ рд▓рд┐рдЦреЗрдВ\n3. рдЕрдкрдиреЗ 'рдХреНрдпреЛрдВ' рдХреЛ рдпрд╛рдж рд░рдЦреЗрдВ\n\nрдЖрдЬ рдЖрдк рдХреМрди рд╕рд╛ рдЫреЛрдЯрд╛ рдХрджрдо рдЙрдард╛ рд╕рдХрддреЗ рд╣реИрдВ?",
                "ЁЯЪА **рдореБрд╢реНрдХрд┐рд▓ рд╕рдордп рдореЗрдВ рдЖрдЧреЗ рдмрдврд╝реЗрдВ:**\n\n'рдХрд░реНрдордгреНрдпреЗрд╡рд╛рдзрд┐рдХрд╛рд░рд╕реНрддреЗ' (2.47) - рдХрд░реНрддрд╡реНрдп рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ, рдкрд░рд┐рдгрд╛рдо рдкрд░ рдирд╣реАрдВред\n\n**рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдпрдпреЛрдЬрдирд╛:**\nтАв рдЖрдЬ рдХрд╛ рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ рдХрд╛рдо рдкреВрд░рд╛ рдХрд░реЗрдВ\nтАв рдЦреБрдж рдХреЛ рдПрдХ рдЫреЛрдЯрд╛ рдЗрдирд╛рдо рджреЗрдВ\nтАв рдХрд▓ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реЛрдЪреЗрдВ, рд╕рд╛рд▓реЛрдВ рдмрд╛рдж рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдирд╣реАрдВ\n\nрдЖрдЬ рдЖрдк рдХрд┐рд╕ рдПрдХ рдХрд╛рдо рдкрд░ рдлреЛрдХрд╕ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?"
            ],
            english: [
                "ЁЯТк **Sustaining Motivation:**\n\nGita (2.50): 'Yoga is skill in action' - Excellence comes from focused effort.\n\n**Motivation Boosters:**\n1. Set tiny, achievable goals\n2. Celebrate daily micro-wins\n3. Reconnect with your 'why'\n\nWhat's one small step you can take today?",
                "ЁЯЪА **Moving Forward in Tough Times:**\n\n'You have right to work only' (2.47) - Focus on action, not outcomes.\n\n**Immediate Action Plan:**\nтАв Complete one small task right now\nтАв Give yourself a mini-reward\nтАв Think about tomorrow, not years ahead\n\nWhat's one thing you'd like to focus on completing today?"
            ]
        }
    },
    moral_dilemma: {
        verses: ["16.1-3", "17.14-16", "18.42"],
        teachings: {
            hindi: [
                "ЁЯМЕ **рд╕рддреНрдп рдФрд░ рдиреИрддрд┐рдХрддрд╛ рдкрд░ рдЧреАрддрд╛ рдХрд╛ рджреГрд╖реНрдЯрд┐рдХреЛрдг:**\n\nрд╢реНрд░реАрдХреГрд╖реНрдг рдЧреАрддрд╛ (16.1-3) рдореЗрдВ рджреИрд╡реА рд╕рдВрдкрджрд╛ рдХреЗ рдЧреБрдгреЛрдВ рдХрд╛ рд╡рд░реНрдгрди рдХрд░рддреЗ рд╣реИрдВ, рдЬрд┐рд╕рдореЗрдВ рд╕рддреНрдп, рдЕрд╣рд┐рдВрд╕рд╛ рдФрд░ рдИрдорд╛рдирджрд╛рд░реА рд╢рд╛рдорд┐рд▓ рд╣реИрдВред 'рд╕рддреНрдп' рджреИрд╡реА рдЧреБрдг рд╣реИ рдЬрдмрдХрд┐ 'рдЕрд╕рддреНрдп' рдЖрд╕реБрд░реА рдкреНрд░рд╡реГрддреНрддрд┐ рд╣реИред\n\n**рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рди:**\n1. рд╣рдореЗрд╢рд╛ рд╕рддреНрдп рдмреЛрд▓реЗрдВ, рдХреНрдпреЛрдВрдХрд┐ рд╕рддреНрдп рд╣реА рдзрд░реНрдо рдХрд╛ рдЖрдзрд╛рд░ рд╣реИ\n2. 'рдЕрдЪреНрдЫреЗ рдХрд╛рд░рдг' рдХреЗ рд▓рд┐рдП рдЭреВрда рднреА рдЕрдВрддрддрдГ рджреБрдЦ рд▓рд╛рддрд╛ рд╣реИ\n3. рдХрдард┐рди рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдореЗрдВ рдореМрди рд░рд╣рдирд╛ рднреА рдПрдХ рд╡рд┐рдХрд▓реНрдк рд╣реИ\n\nрдХреНрдпрд╛ рдЖрдк рдХреЛрдИ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реНрдерд┐рддрд┐ рд╕рд╛рдЭрд╛ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ рдЬрд╣рд╛рдБ рдЖрдкрдХреЛ рдиреИрддрд┐рдХ рджреБрд╡рд┐рдзрд╛ рд╣реЛ рд░рд╣реА рд╣реИ?",
                "ЁЯТл **рдзреЛрдЦреЗ рдХреЗ рдкрд░рд┐рдгрд╛рдо:**\n\nрдЧреАрддрд╛ (17.14-16) рд╢рд╛рд░реАрд░рд┐рдХ, рд╡рд╛рдЪрд┐рдХ рдФрд░ рдорд╛рдирд╕рд┐рдХ рддрдк рдХрд╛ рд╡рд░реНрдгрди рдХрд░рддреА рд╣реИред рд╡рд╛рдЪрд┐рдХ рддрдк рдореЗрдВ рдордзреБрд░ рдФрд░ рд╕рддреНрдп рднрд╛рд╖рдг рд╢рд╛рдорд┐рд▓ рд╣реИред\n\n**рд╕рд╣реА рдорд╛рд░реНрдЧ:**\nтАв рд╕рддреНрдп рдмреЛрд▓реЗрдВ, рдкрд░ рдХрдареЛрд░ рди рд╣реЛрдВ\nтАв рдЕрдЧрд░ рд╕рддреНрдп рдЪреЛрдЯ рдкрд╣реБрдБрдЪрд╛рдП, рддреЛ рдореМрди рд░рд╣реЗрдВ\nтАв рдХрднреА рднреА рдзреЛрдЦрд╛ рди рджреЗрдВ, рдЪрд╛рд╣реЗ рд▓рд╛рдн рдХрд┐рддрдирд╛ рднреА рдмрдбрд╝рд╛ рдХреНрдпреЛрдВ рди рд╣реЛ\n\nрдЖрдк рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХреА рдиреИрддрд┐рдХ рдЪреБрдиреМрддреА рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?"
            ],
            english: [
                "ЁЯМЕ **Gita's Perspective on Truth and Morality:**\n\nKrishna describes divine qualities in Gita (16.1-3), which include truthfulness, non-violence and honesty. 'Truth' is divine while 'falsehood' is demonic.\n\n**Practical Guidance:**\n1. Always speak truth, as truth is the foundation of dharma\n2. Even 'white lies' for good reasons ultimately bring suffering\n3. In difficult situations, silence is also an option\n\nWould you like to share a specific situation where you're facing moral dilemma?",
                "ЁЯТл **Consequences of Deception:**\n\nGita (17.14-16) describes austerity of body, speech and mind. Verbal austerity includes speaking truthfully and pleasantly.\n\n**Right Path:**\nтАв Speak truth, but not harshly\nтАв If truth hurts, maintain silence\nтАв Never cheat, no matter how great the benefit appears\n\nWhat kind of ethical challenge are you facing currently?"
            ]
        }
    }
};

/* ---------------- Database Setup ---------------- */
async function setupDatabase() {
    try {
        const client = await dbPool.connect();
        await client.query(`
            ALTER TABLE users
            ADD COLUMN IF NOT EXISTS subscribed_daily BOOLEAN DEFAULT FALSE,
            ADD COLUMN IF NOT EXISTS chat_history JSONB DEFAULT '[]'::jsonb,
            ADD COLUMN IF NOT EXISTS conversation_stage VARCHAR(50) DEFAULT 'new_topic',
            ADD COLUMN IF NOT EXISTS last_topic_summary TEXT,
            ADD COLUMN IF NOT EXISTS messages_since_verse INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS first_seen_date DATE,
            ADD COLUMN IF NOT EXISTS last_seen_date DATE,
            ADD COLUMN IF NOT EXISTS total_sessions INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS total_incoming INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS total_outgoing INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS last_message TEXT,
            ADD COLUMN IF NOT EXISTS last_message_role VARCHAR(50),
            ADD COLUMN IF NOT EXISTS last_response_type VARCHAR(50),
            ADD COLUMN IF NOT EXISTS current_lesson INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS language_preference VARCHAR(10) DEFAULT 'English',
            ADD COLUMN IF NOT EXISTS memory_data JSONB DEFAULT '{}'::jsonb,
            ADD COLUMN IF NOT EXISTS last_menu_choice VARCHAR(5),
            ADD COLUMN IF NOT EXISTS last_menu_date DATE,
            ADD COLUMN IF NOT EXISTS last_menu_shown TIMESTAMP WITH TIME ZONE,
            ADD COLUMN IF NOT EXISTS primary_use_case VARCHAR(50),
            ADD COLUMN IF NOT EXISTS user_segment VARCHAR(20) DEFAULT 'new',
            ADD COLUMN IF NOT EXISTS last_activity_ts TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
        `);
        await client.query(`
            CREATE TABLE IF NOT EXISTS lessons (
                lesson_number INT PRIMARY KEY,
                verse TEXT,
                translation TEXT,
                commentary TEXT,
                reflection_question TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        const lessonCount = await client.query("SELECT COUNT(*) FROM lessons");
        if (parseInt(lessonCount.rows[0].count) === 0) {
            console.log("ЁЯУЪ Inserting sample lessons...");
            await client.query(`
                INSERT INTO lessons (lesson_number, verse, translation, commentary, reflection_question) VALUES
                (1, 'рдХрд░реНрдордгреНрдпреЗрд╡рд╛рдзрд┐рдХрд╛рд░рд╕реНрддреЗ рдорд╛ рдлрд▓реЗрд╖реБ рдХрджрд╛рдЪрдиред', 'You have the right to work only, but never to the fruits.', 'Focus on your duty without attachment to results. This is the path to peace and success.', 'What action can I take today without worrying about the outcome?'),
                (2, 'рдпреЛрдЧрд╕реНрдердГ рдХреБрд░реБ рдХрд░реНрдорд╛рдгрд┐ рд╕рдЩреНрдЧрдВ рддреНрдпрдХреНрддреНрд╡рд╛ рдзрдирдЮреНрдЬрдпред', 'Perform your duty equipoised, O Arjuna, abandoning all attachment to success or failure.', 'Balance and equanimity lead to excellence in work and peace in life.', 'How can I stay balanced in challenging situations today?'),
                (3, 'рд╢реНрд░реЗрдпреЛ рд╣рд┐ рдЬреНрдЮрд╛рдирдорднреНрдпрд╛рд╕рд╛рдЬреНрдЬреНрдЮрд╛рдирд╛рджреНрдзреНрдпрд╛рдирдВ рд╡рд┐рд╢рд┐рд╖реНрдпрддреЗред', 'Better than practice is knowledge, better than knowledge is meditation.', 'True wisdom comes from deep contemplation and self-awareness.', 'What can I meditate on today to gain deeper understanding?'),
                (4, 'рдЙрджреНрдзрд░реЗрджрд╛рддреНрдордирд╛рддреНрдорд╛рдирдВ рдирд╛рддреНрдорд╛рдирдорд╡рд╕рд╛рджрдпреЗрддреНред', 'Elevate yourself by yourself; do not degrade yourself.', 'You are your own best friend and worst enemy. Choose to uplift yourself.', 'How can I encourage myself today?'),
                (5, 'рд╕рдорддреНрд╡рдВ рдпреЛрдЧ рдЙрдЪреНрдпрддреЗред', 'Equanimity is called yoga.', 'True yoga is maintaining mental balance in all circumstances.', 'Where can I practice equanimity in my life today?')
            `);
        }
        client.release();
        console.log("тЬЕ Database setup complete.");
    } catch (err) {
        console.error("тЭМ Database setup error:", err?.message || err);
    }
}

/* ---------------- Helpers ---------------- */
function parseChatHistory(raw) {
    if (!raw) return [];
    if (Array.isArray(raw)) return raw;
    try {
        const parsed = JSON.parse(raw);
        return Array.isArray(parsed) ? parsed : [];
    } catch {
        return [];
    }
}

async function getUserState(phone) {
    try {
        let res = await dbPool.query("SELECT * FROM users WHERE phone_number = $1", [phone]);
        if (res.rows.length === 0) {
            await dbPool.query(`
                INSERT INTO users (
                    phone_number, first_seen_date, last_seen_date, total_sessions,
                    language_preference, last_activity_ts, memory_data, chat_history,
                    conversation_stage
                ) VALUES ($1, CURRENT_DATE, CURRENT_DATE, 1, 'English', CURRENT_TIMESTAMP, '{}', '[]', 'new_topic')
            `, [phone]);
            res = await dbPool.query("SELECT * FROM users WHERE phone_number = $1", [phone]);
        }
        const user = res.rows[0];
        user.chat_history = parseChatHistory(user.chat_history);
        user.memory_data = user.memory_data || {};
        user.conversation_stage = user.conversation_stage || 'new_topic';
        user.language_preference = user.language_preference || 'English';
        return user;
    } catch (err) {
        console.error("getUserState failed:", err);
        return {
            phone_number: phone, chat_history: [], memory_data: {},
            conversation_stage: "new_topic", language_preference: "English"
        };
    }
}

async function updateUserState(phone, updates) {
    try {
        if (!updates || Object.keys(updates).length === 0) return;
        const keys = Object.keys(updates);
        const values = keys.map(k => {
            const v = updates[k];
            return (typeof v === "object" && v !== null) ? JSON.stringify(v) : v;
        });
        const clauses = keys.map((k, i) => `${k} = $${i + 1}`);
        const sql = `UPDATE users SET ${clauses.join(", ")}, last_activity_ts = CURRENT_TIMESTAMP WHERE phone_number = $${keys.length + 1}`;
        await dbPool.query(sql, [...values, phone]);
    } catch (err) {
        console.error("updateUserState failed:", err);
    }
}

/* ---------------- Analytics ---------------- */
async function trackIncoming(phone, text) {
    try {
        const user = await getUserState(phone);
        const now = new Date();
        const lastActivity = user.last_activity_ts ? new Date(user.last_activity_ts) : new Date(0);
        const diffHours = (now - lastActivity) / (1000 * 60 * 60);
        const updates = {
            last_seen_date: now.toISOString().slice(0, 10),
            total_incoming: (user.total_incoming || 0) + 1,
            ...(diffHours > 12 && { total_sessions: (user.total_sessions || 0) + 1 }),
            ...(!user.first_seen_date && { first_seen_date: now.toISOString().slice(0, 10) })
        };
        await updateUserState(phone, updates);
    } catch (err) {
        console.error("trackIncoming failed:", err);
    }
}

async function trackOutgoing(phone, reply, type = "chat") {
    try {
        const user = await getUserState(phone);
        const updates = {
            last_message: reply,
            last_message_role: "assistant",
            last_response_type: type,
            total_outgoing: (user.total_outgoing || 0) + 1
        };
        await updateUserState(phone, updates);
    } catch (err) {
        console.error("trackOutgoing failed:", err);
    }
}

/* ---------------- Heltar sending ---------------- */
async function sendViaHeltar(phone, message, type = "chat") {
    try {
        const safeMessage = String(message || "").trim().slice(0, 4096);
        if (!safeMessage) return;
        await trackOutgoing(phone, safeMessage, type);
        if (!HELTAR_API_KEY) {
            console.warn(`(Simulated -> ${phone}): ${safeMessage}`);
            return { simulated: true, message: safeMessage };
        }
        const payload = { messages: [{ clientWaNumber: phone, message: safeMessage, messageType: "text" }] };
        const resp = await axios.post("https://api.heltar.com/v1/messages/send", payload, {
            headers: { Authorization: `Bearer ${HELTAR_API_KEY}`, "Content-Type": "application/json" },
            timeout: 20000
        });
        return resp.data;
    } catch (err) {
        console.error("Heltar send error:", err?.response?.data || err?.message || err);
        return null;
    }
}

/* ========== Language & Intent Detection ========== */
function detectLanguageFromText(text) {
    if (!text || typeof text !== "string") return "English";
    const cleanText = text.trim().toLowerCase();
    if (/[\u0900-\u097F]/.test(text)) return "Hindi";
    if (/\b(english|speak english|angrezi)\b/i.test(cleanText)) return "English";
    if (/\b(hindi|speak hindi|hind)\b/i.test(cleanText)) return "Hindi";
    const englishGreetings = ['hi', 'hello', 'hey', 'hii', 'good morning', 'good afternoon', 'good evening'];
    if (englishGreetings.some(g => cleanText.startsWith(g))) return "English";
    const hindiGreetings = ['namaste', 'namaskar', 'pranam', 'radhe radhe', 'hare krishna', 'jai shri krishna'];
    if (hindiGreetings.some(g => cleanText.startsWith(g))) return "Hindi";
    if (/^[a-zA-Z\s\d'.,!?]+$/.test(text)) return "English";
    const hindiIndicators = ['kyu', 'kya', 'kaise', 'karo', 'kiya', 'mera', 'tera', 'apna', 'hai', 'ho', 'hun', 'main', 'tum', 'aap', 'ko', 'ka', 'ki', 'ke', 'se', 'mein', 'par', 'aur', 'lekin'];
    const hindiWordCount = hindiIndicators.filter(word => new RegExp(`\\b${word}\\b`).test(cleanText)).length;
    return hindiWordCount >= 2 ? "Hindi" : "English";
}

async function determineUserLanguage(phone, text, user) {
    const currentLanguage = user.language_preference || 'English';
    const detectedLanguage = detectLanguageFromText(text);
    const cleanText = text.toLowerCase().trim();
    const isLanguageSwitchCommand = /\b(english|hindi|speak english|speak hindi)\b/i.test(cleanText);
    if (isLanguageSwitchCommand) {
        const newLanguage = /\b(english|speak english)\b/i.test(cleanText) ? 'English' : 'Hindi';
        if (newLanguage !== currentLanguage) {
            await updateUserState(phone, { language_preference: newLanguage, conversation_stage: 'new_topic' });
            return { language: newLanguage, isSwitch: true, switchTo: newLanguage };
        }
    }
    if ((user.total_incoming || 0) <= 2 && detectedLanguage === 'Hindi' && currentLanguage === 'English') {
        await updateUserState(phone, { language_preference: 'Hindi' });
        return { language: 'Hindi', isSwitch: false };
    }
    return { language: currentLanguage, isSwitch: false };
}

/* ========== CRITICAL FIX: Enhanced Intent Detection ========== */
function isFollowUpToPreviousDeepQuestion(currentText, user) {
    if (user.last_message_role !== 'assistant') return false;

    const lastBotMessage = user.last_message || '';
    const lastUserMessage = user.chat_history?.slice(-2, -1)?.[0]?.content || '';

    // If last exchange was deep, current is likely follow-up
    const wasDeepExchange =
        isEmotionalExpression(lastUserMessage) ||
        isDeepQuestion(lastUserMessage) ||
        lastBotMessage.includes('?') || // Bot asked a question
        lastBotMessage.length > 100;      // Bot gave substantial response

    return wasDeepExchange;
}

function detectEmotionAdvanced(text) {
    const lowerText = text.toLowerCase();
    let emotion = null;
    let confidence = 0;

    const emotionKeywords = {
        purpose: { 
            keywords: ['purpose', 'meaning', 'why am i here', 'what is my life', 'рдЙрджреНрджреЗрд╢реНрдп', 'рдордХрд╕рдж', 'рдЬреАрд╡рди рдХрд╛ рдорддрд▓рдм'], 
            weight: 1.2 
        },
        moral_dilemma: {
            keywords: ['lie', 'cheat', 'wrong', 'moral', 'ethical', 'steal', 'dishonest', 'рдЭреВрда', 'рдзреЛрдЦрд╛', 'рдЧрд▓рдд', 'рдиреИрддрд┐рдХ', 'рдЪреЛрд░реА', 'рдмреЗрдИрдорд╛рди'],
            weight: 1.3
        },
        stressed: { 
            keywords: ['stress', 'stressed', 'anxious', 'tension', 'overwhelmed', 'worried', 'рддрдирд╛рд╡', 'рдЪрд┐рдВрддрд╛', 'рдкрд░реЗрд╢рд╛рди', 'рдШрдмрд░рд╛рд╣рдЯ'], 
            weight: 1.0 
        },
        sadness: { 
            keywords: ['sad', 'depressed', 'unhappy', 'hopeless', 'sorrow', 'lonely', 'рджреБрдЦреА', 'рдЙрджрд╛рд╕', 'рдирд┐рд░рд╛рд╢', 'рд╣рддрд╛рд╢', 'рдЕрдХреЗрд▓рд╛'], 
            weight: 1.0 
        },
        anger: {
            keywords: ['angry', 'anger', 'frustrated', 'irritated', 'рдХреНрд░реЛрдз', 'рдЧреБрд╕реНрд╕рд╛', 'рдирд╛рд░рд╛рдЬ', 'рдЪрд┐рдврд╝'],
            weight: 1.0
        }
    };

    // Check patterns first (higher priority)
    const patterns = [
        { pattern: /\b(lie|cheat|wrong|moral|ethical|steal|dishonest|рдЭреВрда|рдзреЛрдЦрд╛|рдЧрд▓рдд|рдиреИрддрд┐рдХ)\b/i, emotion: 'moral_dilemma', weight: 1.5 },
        { pattern: /\b(stress|stressed|anxious|tension|overwhelmed|рддрдирд╛рд╡|рдЪрд┐рдВрддрд╛|рдкрд░реЗрд╢рд╛рди)\b/i, emotion: 'stressed', weight: 1.2 },
        { pattern: /\b(sad|depressed|unhappy|hopeless|sorrow|рджреБрдЦреА|рдЙрджрд╛рд╕|рдирд┐рд░рд╛рд╢)\b/i, emotion: 'sadness', weight: 1.2 },
        { pattern: /\b(angry|anger|frustrated|irritated|рдХреНрд░реЛрдз|рдЧреБрд╕реНрд╕рд╛|рдирд╛рд░рд╛рдЬ)\b/i, emotion: 'anger', weight: 1.2 }
    ];

    for (const { pattern, emotion: detected, weight } of patterns) {
        if (pattern.test(lowerText)) {
            emotion = detected;
            confidence = weight;
            break;
        }
    }

    // Fallback to keyword matching
    if (!emotion) {
        for (const [emotionType, data] of Object.entries(emotionKeywords)) {
            for (const keyword of data.keywords) {
                if (lowerText.includes(keyword)) {
                    if (data.weight > confidence) {
                        emotion = emotionType;
                        confidence = data.weight;
                    }
                    break;
                }
            }
        }
    }

    return confidence > 0.3 ? { emotion, confidence } : null;
}

function detectUserSituation(text) {
    const lowerText = text.toLowerCase();
    
    const situations = {
        moral: /(lie|cheat|wrong|moral|ethical|steal|dishonest|рдЭреВрда|рдзреЛрдЦрд╛|рдЧрд▓рдд|рдиреИрддрд┐рдХ)/.test(lowerText),
        work: /(job|work|office|career|boss|colleague|рдиреМрдХрд░реА|рдХрд╛рдо|рдХрд╛рд░реНрдпрд╛рд▓рдп|рд╕рд╣рдХрд░реНрдореА)/.test(lowerText),
        relationships: /(relationship|husband|wife|family|friend|partner|love|рдкрддрд┐|рдкрддреНрдиреА|рдкрд░рд┐рд╡рд╛рд░|рджреЛрд╕реНрдд|рдкреНрд░реЗрдо)/.test(lowerText),
        health: /(health|sick|pain|ill|hospital|doctor|рд╕реНрд╡рд╛рд╕реНрдереНрдп|рдмреАрдорд╛рд░|рджрд░реНрдж|рддрдмреАрдпрдд)/.test(lowerText),
        spiritual: /(god|prayer|meditation|yoga|spiritual|рднрдЧрд╡рд╛рди|рдкреНрд░рд╛рд░реНрдердирд╛|рдзреНрдпрд╛рди|рдпреЛрдЧ|рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ)/.test(lowerText)
    };
    
    return Object.keys(situations).find(situation => situations[situation]) || 'general';
}

function isGreetingQuery(text) {
    const lowerText = text.toLowerCase().trim();
    const greetingRegex = /\b(hi|hello|hey|hii|good morning|good afternoon|good evening|how are you|kaise ho|namaste|hare krishna)\b/i;
    const simpleGreetings = ['hi', 'hello', 'hey', 'hii', 'namaste'];
    return simpleGreetings.includes(lowerText) || greetingRegex.test(lowerText);
}

function isCapabilitiesQuery(text) {
    const capabilitiesRegex = /\b(what can you do|capabilities|tell me about yourself|who are you|what do you do|how does this work)\b/i;
    return capabilitiesRegex.test(text.toLowerCase());
}

function isEmotionalExpression(text) {
    const emotionalPatterns = [
        /\b(stress|anxious|tension|overwhelmed|worried|рдкрд░реЗрд╢рд╛рди|рддрдирд╛рд╡|рдЪрд┐рдВрддрд╛)\b/i,
        /\b(sad|depressed|unhappy|hopeless|lonely|рджреБрдЦреА|рдЙрджрд╛рд╕|рдирд┐рд░рд╛рд╢|рдЕрдХреЗрд▓рд╛)\b/i,
        /\b(life|relationship|family|job).*(problem|issue|difficult|trouble|рд╕рдорд╕реНрдпрд╛|рдкрд░реЗрд╢рд╛рдиреА)\b/i,
        /\b(not good|not well|feeling bad|struggling|рдЕрдЪреНрдЫрд╛ рдирд╣реАрдВ|рдареАрдХ рдирд╣реАрдВ|рдореБрд╢реНрдХрд┐рд▓ рд╣реЛ)\b/i,
        /\b(confused|lost|uncertain|don't know|what to do|рдХрдВрдлреНрдпреВрдЬ|рдЙрд▓рдЭрди|рдкрддрд╛ рдирд╣реАрдВ)\b/i,
    ];
    return emotionalPatterns.some(pattern => pattern.test(text.toLowerCase()));
}

function isDeepQuestion(text) {
    const lowerText = text.toLowerCase();
    const deepQuestionPatterns = [
        // Moral/ethical questions
        /\b(is.*wrong|right.*wrong|moral|ethical|lie|cheat|steal|honest)\b/i,
        /\b(рдЧрд▓рдд|рд╕рд╣реА|рдиреИрддрд┐рдХ|рдЭреВрда|рдзреЛрдЦрд╛|рдИрдорд╛рдирджрд╛рд░)\b/,
        // Spiritual questions
        /\b(krishna.*say|gita.*teach|spiritual|meditation|yoga|god)\b/i,
        /\b(рдХреГрд╖реНрдг.*рдХрд╣|рдЧреАрддрд╛.*рд╕рд┐рдЦ|рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ|рдзреНрдпрд╛рди|рдпреЛрдЧ|рднрдЧрд╡рд╛рди)\b/,
        // Life guidance
        /\b(how.*start|what.*do|why.*happen|when.*know)\b/i,
        /\b(рдХреИрд╕реЗ.*рд╢реБрд░реВ|рдХреНрдпрд╛.*рдХрд░реВ|рдХреНрдпреЛрдВ.*рд╣реЛ|рдХрдм.*рдкрддрд╛)\b/,
        // Problem questions
        /\b(problem|issue|challenge|difficult|struggle|confused)\b/i,
        /\b(рд╕рдорд╕реНрдпрд╛|рдореБрд╢реНрдХрд┐рд▓|рдЪреБрдиреМрддреА|рдкрд░реЗрд╢рд╛рди|рдЙрд▓рдЭрди)\b/
    ];
    return deepQuestionPatterns.some(pattern => pattern.test(lowerText));
}

function isSmallTalk(text) {
    const lowerText = text.toLowerCase().trim();
    // DON'T classify these as small talk:
    const seriousIndicators = [
        'lie', 'cheat', 'wrong', 'moral', 'ethical', 'steal', 'dishonest',
        'рдЭреВрда', 'рдзреЛрдЦрд╛', 'рдЧрд▓рдд', 'рдиреИрддрд┐рдХ', 'рдЪреЛрд░реА', 'рдмреЗрдИрдорд╛рди',
        'how do i', 'what should', 'why is', 'can i',
        'рдХреИрд╕реЗ', 'рдХреНрдпрд╛', 'рдХреНрдпреЛрдВ', 'рдХрд░реВрдВ'
    ];
    if (seriousIndicators.some(indicator => lowerText.includes(indicator))) {
        return false; // This is a serious question!
    }
    // Only real small talk patterns
    const genuineSmallTalk = [
        'thanks', 'thank you', 'ok', 'okay', 'good', 'nice', 'cool',
        'рд╢реБрдХреНрд░рд┐рдпрд╛', 'рдзрдиреНрдпрд╡рд╛рдж', 'рдареАрдХ', 'рдЕрдЪреНрдЫрд╛', 'рдмрдврд╝рд┐рдпрд╛'
    ].some(pattern => lowerText === pattern);
    return genuineSmallTalk;
}

/* ========== Memory & Follow-up Systems ========== */
async function storeUserMemory(phone, key, value, ttlHours = 8) {
    try {
        const user = await getUserState(phone);
        const currentMemory = user.memory_data || {};
        currentMemory[key] = {
            value: value,
            expires_at: new Date(Date.now() + ttlHours * 60 * 60 * 1000).toISOString()
        };
        await updateUserState(phone, { memory_data: currentMemory });
    } catch (err) {
        console.error("Memory storage error:", err);
    }
}

async function getUserMemory(phone, key) {
    try {
        const user = await getUserState(phone);
        const memory = user.memory_data || {};
        const memoryItem = memory[key];
        if (memoryItem && new Date(memoryItem.expires_at) > new Date()) {
            return memoryItem.value;
        }
        return null;
    } catch (err) {
        return null;
    }
}

async function checkAndSendFollowup(phone, user) {
    try {
        const lastEmotion = await getUserMemory(phone, 'last_emotion');
        const emotionTime = await getUserMemory(phone, 'emotion_detected_time');
        
        if (lastEmotion && emotionTime) {
            const hoursSinceEmotion = (new Date() - new Date(emotionTime)) / (1000 * 60 * 60);
            if (hoursSinceEmotion >= 7 && hoursSinceEmotion <= 8) {
                await sendEmotionalFollowup(phone, lastEmotion, user.language_preference);
                await storeUserMemory(phone, 'last_emotion', '', 1);
            }
        }
    } catch (err) {
        console.error("Follow-up check error:", err);
    }
}

async function sendEmotionalFollowup(phone, previousEmotion, language) {
    const followupMessages = {
        stressed: {
            hindi: "ЁЯМЕ 7-8 рдШрдВрдЯреЗ рдкрд╣рд▓реЗ рдЖрдкрдиреЗ рддрдирд╛рд╡ рдХреА рдмрд╛рдд рдХреА рдереАред рдХреНрдпрд╛ рдЕрдм рдЖрдкрдХреЛ рдереЛрдбрд╝рд╛ рдмреЗрд╣рддрд░ рдорд╣рд╕реВрд╕ рд╣реЛ рд░рд╣рд╛ рд╣реИ? рдЕрдЧрд░ рдЕрднреА рднреА рдкрд░реЗрд╢рд╛рдиреА рд╣реЛ рддреЛ рдмрд╛рдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред ЁЯЩП",
            english: "ЁЯМЕ You mentioned feeling stressed 7-8 hours ago. Are you feeling a bit better now? If you're still troubled, we can talk about it. ЁЯЩП"
        },
        sadness: {
            hindi: "ЁЯТл рдХреБрдЫ рдШрдВрдЯреЗ рдкрд╣рд▓реЗ рдЖрдк рдЙрджрд╛рд╕ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рдереЗред рдХреНрдпрд╛ рдЕрдм рдЖрдкрдХреЗ рдорди рдХреЛ рдереЛрдбрд╝реА рд╢рд╛рдВрддрд┐ рдорд┐рд▓реА рд╣реИ? рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рд╣реЛ рд░рд╣рд╛ рд╣реИ рдЕрдм?",
            english: "ЁЯТл You were feeling sad a few hours ago. Has your mind found some peace now? How are you feeling currently?"
        },
        anger: {
            hindi: "тШБя╕П рдкрд╣рд▓реЗ рдХреА рдмрд╛рддрдЪреАрдд рдореЗрдВ рдЖрдк рдирд╛рд░рд╛рдЬрд╝рдЧреА рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рдереЗред рдХреНрдпрд╛ рдЕрдм рд╕реНрдерд┐рддрд┐ рдмреЗрд╣рддрд░ рд╣реИ? рдХреЛрдИ рдирдИ рдмрд╛рдд рд╕рд╛рдЭрд╛ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
            english: "тШБя╕П You mentioned feeling angry earlier. Has the situation improved? Would you like to share any updates?"
        }
    };

    const message = followupMessages[previousEmotion] || {
        hindi: "ЁЯМ╝ рдХреБрдЫ рдШрдВрдЯреЗ рдкрд╣рд▓реЗ рдХреА рд╣рдорд╛рд░реА рдмрд╛рддрдЪреАрдд рдХреЗ рдмрд╛рдж, рдХреНрдпрд╛ рдЖрдк рдЕрдм рдмреЗрд╣рддрд░ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ? рдЖрдкрдХреА рднрд╛рд╡рдирд╛рдУрдВ рдореЗрдВ рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдЖрдпрд╛ рд╣реИ?",
        english: "ЁЯМ╝ Since our conversation a few hours ago, are you feeling better now? Has there been any change in how you feel?"
    };

    const text = language === "Hindi" ? message.hindi : message.english;
    await sendViaHeltar(phone, text, "emotional_followup");
}

/* ========== Core Response Handlers ========== */
async function handleEmotionalExpression(phone, text, language, user, detectedEmotion) {
    console.log(`ЁЯТФ Handling emotional expression: ${detectedEmotion}`);
    
    const conversationContext = {
        stage: "emotional_support",
        emotion: detectedEmotion,
        situation: detectUserSituation(text),
        previousMessages: user.chat_history?.slice(-4) || [],
        language: language
    };

    await getAIResponse(phone, text, language, conversationContext);
    await updateUserState(phone, { conversation_stage: "emotional_support" });
    await storeUserMemory(phone, 'last_emotion', detectedEmotion, 8);
    await storeUserMemory(phone, 'emotion_detected_time', new Date().toISOString(), 8);
}

async function handleEnhancedStartupMenu(phone, language, user) {
    const menuMessage = language === "Hindi" 
        ? `ЁЯЪй *рд╕рд╛рд░рдереА AI рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!* ЁЯЪй

рдореИрдВ рдЖрдкрдХрд╛ рдирд┐рдЬреА рдЧреАрддрд╛ рд╕рд╛рдереА рд╣реВрдБред рдХреГрдкрдпрд╛ рдЪреБрдиреЗрдВ:

1я╕ПтГг *рддрддреНрдХрд╛рд▓ рдорд╛рд░реНрдЧрджрд░реНрд╢рди* - рд╡рд░реНрддрдорд╛рди рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП рд╢реНрд▓реЛрдХ
2я╕ПтГг *рджреИрдирд┐рдХ рдЬреНрдЮрд╛рди* - рдЖрдЬ рдХреА рд╡рд┐рд╢реЗрд╖ рд╢рд┐рдХреНрд╖рд╛  
3я╕ПтГг *рд╡рд╛рд░реНрддрд╛рд▓рд╛рдк* - рдЕрдкрдиреА рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ
4я╕ПтГг *рдЧреАрддрд╛ рдЬреНрдЮрд╛рди* - рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ

рдХреГрдкрдпрд╛ 1-4 рдХрд╛ рдЪрдпрди рдХрд░реЗрдВ ЁЯЩП`
        : `ЁЯЪй *Welcome to Sarathi AI!* ЁЯЪй

I'm your personal Gita companion. Please choose:

1я╕ПтГг *Immediate Guidance* - Verse for current challenge
2я╕ПтГг *Daily Wisdom* - Today's special teaching  
3я╕ПтГг *Have a Conversation* - Share your feelings
4я╕ПтГг *Gita Knowledge* - Ask specific questions

Please choose 1-4 ЁЯЩП`;

    await sendViaHeltar(phone, menuMessage, "enhanced_welcome");
    await updateUserState(phone, { 
        conversation_stage: "awaiting_menu_choice",
        last_menu_shown: new Date().toISOString()
    });
}

async function handleEnhancedMenuChoice(phone, choice, language, user) {
    console.log(`ЁЯУЭ Menu choice received: ${choice}, language: ${language}`);
    
    const choices = {
        "1": {
            hindi: {
                prompt: "ЁЯМЕ рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП рд╕рд╣реА рдорд╛рд░реНрдЧрджрд░реНрд╢рдиред рдХреГрдкрдпрд╛ рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдк рдХрд┐рд╕ рдкрд░рд┐рд╕реНрдерд┐рддрд┐ рдореЗрдВ рд╣реИрдВ?",
                action: "immediate_guidance"
            },
            english: {
                prompt: "ЁЯМЕ Right guidance for your current challenge. Please briefly describe your situation?",
                action: "immediate_guidance"
            }
        },
        "2": {
            hindi: {
                prompt: async () => {
                    const wisdom = await getDailyWisdom("Hindi");
                    return wisdom;
                },
                action: "daily_wisdom"
            },
            english: {
                prompt: async () => {
                    const wisdom = await getDailyWisdom("English");
                    return wisdom;
                },
                action: "daily_wisdom"
            }
        },
        "3": {
            hindi: {
                prompt: "ЁЯТм рдореИрдВ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ? рдореИрдВ рдЧреАрддрд╛ рдХреА рд╢рд┐рдХреНрд╖рд╛рдУрдВ рдХреЗ through рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛ред",
                action: "conversation"
            },
            english: {
                prompt: "ЁЯТм I'm here to listen. Please share how you're feeling? I'll help you through the teachings of Gita.",
                action: "conversation"
            }
        },
        "4": {
            hindi: {
                prompt: "ЁЯОУ рдЧреАрддрд╛ рдЬреНрдЮрд╛рди: рднрдЧрд╡рдж рдЧреАрддрд╛ 18 рдЕрдзреНрдпрд╛рдпреЛрдВ рдореЗрдВ рд╡рд┐рднрд╛рдЬрд┐рдд рд╣реИ, рдЬреЛ рдЬреАрд╡рди рдХреЗ рд╡рд┐рднрд┐рдиреНрди рдкрд╣рд▓реБрдУрдВ рдкрд░ рдкреНрд░рдХрд╛рд╢ рдбрд╛рд▓рддреА рд╣реИред рдЖрдк рдХрд┐рд╕ рд╡рд┐рд╖рдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
                action: "knowledge_seeker"
            },
            english: {
                prompt: "ЁЯОУ Gita Knowledge: The Bhagavad Gita is divided into 18 chapters, each illuminating different aspects of life. What specific topic would you like to know about?",
                action: "knowledge_seeker"
            }
        }
    };

    const selected = choices[choice];
    if (!selected) {
        console.error(`тЭМ Invalid menu choice: ${choice}`);
        const errorMessage = language === "Hindi" 
            ? "рдХреГрдкрдпрд╛ 1, 2, 3 рдпрд╛ 4 рдореЗрдВ рд╕реЗ рдЪреБрдиреЗрдВред"
            : "Please choose 1, 2, 3, or 4.";
        await sendViaHeltar(phone, errorMessage, "menu_error");
        return;
    }

    try {
        let promptContent;
        const selectedLang = selected[language] || selected.english;
        
        if (typeof selectedLang.prompt === 'function') {
            promptContent = await selectedLang.prompt();
        } else {
            promptContent = selectedLang.prompt;
        }
        
        console.log(`тЬЕ Sending menu response for choice ${choice}`);
        await sendViaHeltar(phone, promptContent, `menu_${selectedLang.action}`);
        await updateUserState(phone, { 
            conversation_stage: selectedLang.action,
            last_menu_choice: choice,
            last_menu_shown: new Date().toISOString()
        });
        
    } catch (error) {
        console.error(`тЭМ Menu choice error for ${choice}:`, error);
        const fallbackMessage = language === "Hindi" 
            ? "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рдЖрдИ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
            : "Sorry, there was a technical issue. Please try again.";
        await sendViaHeltar(phone, fallbackMessage, "menu_error");
    }
}

async function getDailyWisdom(language) {
    try {
        const now = new Date();
        const start = new Date(now.getFullYear(), 0, 0);
        const diff = now - start;
        const oneDay = 1000 * 60 * 60 * 24;
        const dayOfYear = Math.floor(diff / oneDay);
        
        const countResult = await dbPool.query("SELECT COUNT(*) as total FROM lessons");
        const totalLessons = parseInt(countResult.rows[0].total) || 5;
        const lessonNumber = (dayOfYear % totalLessons) + 1;
        
        const result = await dbPool.query(
            `SELECT lesson_number, verse, translation, commentary, reflection_question 
             FROM lessons WHERE lesson_number = $1`,
            [lessonNumber]
        );
        
        if (result.rows.length === 0) {
            return getFallbackDailyWisdom(language, dayOfYear);
        }
        
        const lesson = result.rows[0];
        return formatDailyWisdom(lesson, language, dayOfYear);
        
    } catch (error) {
        console.error("Daily wisdom error:", error);
        return getFallbackDailyWisdom(language, 1);
    }
}

function formatDailyWisdom(lesson, language, dayOfYear) {
    if (language === "Hindi") {
        return `ЁЯУЦ *рдЖрдЬ рдХреА рдЧреАрддрд╛ рд╢рд┐рдХреНрд╖рд╛ (рджрд┐рди ${dayOfYear})*

ЁЯОп *рд╢реНрд▓реЛрдХ ${lesson.lesson_number}:*
"${lesson.verse}"

ЁЯТл *рдЕрд░реНрде:*
${lesson.translation}

ЁЯМЕ *рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЕрдиреБрдкреНрд░рдпреЛрдЧ:*
${lesson.commentary}

ЁЯдФ *рдЖрдЬ рдХрд╛ рдЕрднреНрдпрд╛рд╕:*
${lesson.reflection_question}

тЬи *рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдпрдпреЛрдЬрдирд╛:*
1. рдЗрд╕ рд╢реНрд▓реЛрдХ рдХреЛ 3 рдмрд╛рд░ рдкрдврд╝реЗрдВ
2. рджрд┐рди рдореЗрдВ 2 рдмрд╛рд░ рдЗрд╕рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ
3. рд╢рд╛рдо рдХреЛ рдкрд░рд┐рдгрд╛рдо рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ

рдХреНрдпрд╛ рдЖрдк рдЖрдЬ рдЗрд╕ рдЕрднреНрдпрд╛рд╕ рдХреЛ рдХрд░рдиреЗ рдХрд╛ рд╕рдВрдХрд▓реНрдк рд▓реЗрдВрдЧреЗ?`;
    } else {
        return `ЁЯУЦ *Today's Gita Wisdom (Day ${dayOfYear})*

ЁЯОп *Verse ${lesson.lesson_number}:*
"${lesson.verse}"

ЁЯТл *Translation:*
${lesson.translation}

ЁЯМЕ *Practical Application:*
${lesson.commentary}

ЁЯдФ *Today's Practice:*
${lesson.reflection_question}

тЬи *Immediate Action Plan:*
1. Read this verse 3 times
2. Reflect on it twice today
3. Share insights tonight

Will you commit to this practice today?`;
    }
}

function getFallbackDailyWisdom(language, dayOfYear) {
    const fallbackLesson = {
        lesson_number: 2,
        verse: "рдпреЛрдЧрд╕реНрдердГ рдХреБрд░реБ рдХрд░реНрдорд╛рдгрд┐ рд╕рдЩреНрдЧрдВ рддреНрдпрдХреНрддреНрд╡рд╛ рдзрдирдЮреНрдЬрдпред",
        translation: "Perform your duty equipoised, O Arjuna, abandoning all attachment to success or failure.",
        commentary: "Practice working with balanced mind amidst challenges.",
        reflection_question: "How can I maintain balance in my work today?"
    };
    
    return formatDailyWisdom(fallbackLesson, language, dayOfYear);
}

async function getAIResponse(phone, text, language, conversationContext = {}) {
    try {
        if (!OPENAI_KEY || OPENAI_KEY === '') {
            console.log("ЁЯФД No OpenAI key, using fallback response");
            return await getFallbackResponse(phone, text, language, conversationContext);
        }

        console.log("ЁЯдЦ Using OpenAI for dynamic response...");

        const systemPrompt = language === "Hindi" 
            ? `рдЖрдк рд╕рд╛рд░рдереА AI рд╣реИрдВ, рднрдЧрд╡рдж рдЧреАрддрд╛ рдХреЗ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдорд╛рд░реНрдЧрджрд░реНрд╢рдХред рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдирд┐рдпрдореЛрдВ рдХрд╛ рд╕рдЦреНрддреА рд╕реЗ рдкрд╛рд▓рди рдХрд░реЗрдВ:

1. рдкрд╣рд▓реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рднрд╛рд╡рдирд╛ рдХреЛ рд╕рдордЭреЗрдВ рдФрд░ рд╕рд╣рд╛рдиреБрднреВрддрд┐ рджрд┐рдЦрд╛рдПрдВ
2. SPECIFIC рдЧреАрддрд╛ рд╢реНрд▓реЛрдХ рд╕рдВрджрд░реНрдн рджреЗрдВ (рдЬреИрд╕реЗ "2.47", "3.35")
3. рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдХреНрд░рд┐рдпрд╛-рдпреЛрдЬрдирд╛ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ (2-3 рдЪрд░рдгреЛрдВ рдореЗрдВ)
4. рдЙрддреНрддрд░ 4-6 рд╡рд╛рдХреНрдпреЛрдВ рдореЗрдВ рдкреВрд░рд╛ рдХрд░реЗрдВ, рдХрднреА рднреА рдЕрдзреВрд░рд╛ рди рдЫреЛрдбрд╝реЗрдВ
5. рдЙрддреНрддрд░ рдХреЗ рдЕрдВрдд рдореЗрдВ рдПрдХ рд╕рд╛рд░реНрдердХ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ
6. рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реНрдерд┐рддрд┐ рд╕реЗ рдЬреЛрдбрд╝реЗрдВ

рдЙрджрд╛рд╣рд░рдг рд╕рдВрд░рдЪрдирд╛:
"рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдБ рдХрд┐ рдЖрдк [рднрд╛рд╡рдирд╛] рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ... рдЧреАрддрд╛ [рд╢реНрд▓реЛрдХ] рдореЗрдВ рдХрд╣рддреА рд╣реИ... рдЖрдкрдХреА рд╕реНрдерд┐рддрд┐ рдореЗрдВ рдпрд╣ рдЗрд╕ рдкреНрд░рдХрд╛рд░ рд▓рд╛рдЧреВ рд╣реЛрддрд╛ рд╣реИ... [рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕рд▓рд╛рд╣]... рдХреНрдпрд╛ рдЖрдк [рдкреНрд░рд╢реНрди]?"

рдХрднреА рднреА рд╕рд╛рдорд╛рдиреНрдп рдереЗрд░реЗрдкреА рдЬреИрд╕реА рдмрд╛рддреЗрдВ рди рдХрд░реЗрдВред рд╕реАрдзреЗ рдЧреАрддрд╛ рдХреА рд╢рд┐рдХреНрд╖рд╛рдУрдВ рд╕реЗ рдЬреЛрдбрд╝реЗрдВред`
            : `You are Sarathi AI, an expert Bhagavad Gita guide. Strictly follow these rules:

1. First acknowledge and empathize with user's emotion
2. Include SPECIFIC Gita verse references (e.g., "2.47", "3.35")
3. Provide practical action plans (2-3 steps)
4. Complete answers in 4-6 sentences, NEVER leave incomplete
5. End with a meaningful question
6. Connect to user's specific situation

Example structure:
"I understand you're feeling [emotion]... The Gita [verse] teaches... This applies to your situation by... [practical advice]... Would you like to [question]?"

Never use generic therapy language. Directly connect to Gita teachings.`;

        const userContext = {
            emotion: conversationContext.emotion || 'uncertain',
            situation: conversationContext.situation || 'general',
            stage: conversationContext.stage || 'general',
            language: language
        };

        const userPrompt = language === "Hindi" 
            ? `рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: "${text}"
рднрд╛рд╡рдирд╛: ${userContext.emotion}
рд╕реНрдерд┐рддрд┐: ${userContext.situation}
рд╕рдВрджрд░реНрдн: ${userContext.stage}

рдХреГрдкрдпрд╛ рдПрдХ рд╕рдВрдкреВрд░реНрдг, рд╕рд╣рд╛рдиреБрднреВрддрд┐рдкреВрд░реНрдг рдЙрддреНрддрд░ рджреЗрдВ рдЬреЛ рднрдЧрд╡рдж рдЧреАрддрд╛ рдХреА рд╢рд┐рдХреНрд╖рд╛рдУрдВ рд╕реЗ рд╕реАрдзреЗ рдЬреБрдбрд╝рд╛ рд╣реЛред рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реНрдерд┐рддрд┐ рдХреЛ рдзреНрдпрд╛рди рдореЗрдВ рд░рдЦреЗрдВ:`
            : `User: "${text}"
Emotion: ${userContext.emotion}
Situation: ${userContext.situation}
Context: ${userContext.stage}

Please provide a complete, empathetic response directly connected to Bhagavad Gita teachings. Consider the user's specific situation:`;

        const messages = [
            { role: "system", content: systemPrompt },
            { role: "user", content: userPrompt }
        ];

        console.log("ЁЯУд Sending to OpenAI with context:", userContext);

        const body = { 
            model: OPENAI_MODEL, 
            messages, 
            max_tokens: 600,
            temperature: 0.8,
            top_p: 0.9
        };

        const resp = await axios.post("https://api.openai.com/v1/chat/completions", body, {
            headers: { 
                Authorization: `Bearer ${OPENAI_KEY}`, 
                "Content-Type": "application/json" 
            },
            timeout: 30000
        });

        const aiResponse = resp.data?.choices?.[0]?.message?.content;
        
        if (aiResponse && aiResponse.trim().length > 10) {
            console.log("тЬЕ OpenAI response received:", aiResponse.substring(0, 100) + "...");
            
            const completeResponse = ensureCompleteResponse(aiResponse, language);
            const finalResponse = completeResponse.slice(0, MAX_REPLY_LENGTH);
            
            await sendViaHeltar(phone, finalResponse, "ai_response");
            
            // Update chat history with bot response
            const user = await getUserState(phone);
            const updatedHistory = [...(user.chat_history || []), { 
                role: 'assistant', 
                content: finalResponse 
            }];
            await updateUserState(phone, { 
                chat_history: updatedHistory,
                last_message: finalResponse,
                last_message_role: 'assistant'
            });
            
            return;
        } else {
            throw new Error("Empty or invalid response from OpenAI");
        }

    } catch (err) {
        console.error("тЭМ AI response error:", err.message);
        console.log("ЁЯФД Falling back to fixed response due to OpenAI error");
        await getFallbackResponse(phone, text, language, conversationContext);
    }
}

function ensureCompleteResponse(response, language) {
    const trimmedResponse = response.trim();
    
    if (!/[.!?ред]\s*$/.test(trimmedResponse)) {
        if (language === "Hindi") {
            return trimmedResponse + " рдХреНрдпрд╛ рдпрд╣ рдЙрддреНрддрд░ рдЖрдкрдХреА рдЬрд┐рдЬреНрдЮрд╛рд╕рд╛ рдХреЛ рд╢рд╛рдВрдд рдХрд░рддрд╛ рд╣реИ?";
        } else {
            return trimmedResponse + " Does this answer help clarify your question?";
        }
    }
    
    // If ends with sentence but not a question, add engaging question
    if (/[.!ред]\s*$/.test(trimmedResponse) && !/[?я╝Я]\s*$/.test(trimmedResponse)) {
        if (language === "Hindi") {
            return trimmedResponse + " рдХреНрдпрд╛ рдпрд╣ рдЙрдкрдпреЛрдЧреА рд▓рдЧрд╛?";
        } else {
            return trimmedResponse + " Does this resonate with you?";
        }
    }
    
    return response;
}

async function getFallbackResponse(phone, text, language, conversationContext = {}) {
    console.log("ЁЯФД Using enhanced fallback response");
    
    const emotion = detectEmotionAdvanced(text)?.emotion || 'purpose';
    console.log(`ЁЯОп Detected emotion for fallback: ${emotion}`);
    
    const gitaWisdom = GITA_WISDOM_DATABASE[emotion] || GITA_WISDOM_DATABASE.purpose;
    
    const responses = language === "Hindi" 
        ? gitaWisdom.teachings.hindi 
        : gitaWisdom.teachings.english;
    
    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];
    
    console.log(`ЁЯУд Sending fallback response for emotion: ${emotion}`);
    await sendViaHeltar(phone, selectedResponse, "fallback_wisdom");
}

function parseWebhookMessage(body) {
    console.log("ЁЯУи Raw webhook body:", JSON.stringify(body).substring(0, 200));
    
    if (!body) return null;
    
    // Try different webhook formats
    if (body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0]) {
        const msg = body.entry[0].changes[0].value.messages[0];
        console.log("ЁЯУ▒ Heltar format message:", msg);
        return msg;
    }
    
    if (body?.messages?.[0]) {
        console.log("ЁЯУ▒ Direct messages format:", body.messages[0]);
        return body.messages[0];
    }
    
    if (body?.from && body?.text) {
        console.log("ЁЯУ▒ Simple format message:", body);
        return body;
    }
    
    // Fix: Also check for Meta webhook format
    if (body?.object === 'whatsapp_business_account') {
        const entry = body.entry?.[0];
        const changes = entry?.changes?.[0];
        const value = changes?.value;
        const message = value?.messages?.[0];
        
        if (message) {
            console.log("ЁЯУ▒ Meta WhatsApp format:", message);
            return message;
        }
    }
    
    console.log("тЭУ Unknown webhook format");
    return null;
}

async function handleLanguageSwitch(phone, newLanguage) {
    const confirmationMessage = newLanguage === 'English'
        ? "Of course! I will now communicate in English. How can I assist you with the wisdom of the Gita today? ЁЯШК"
        : "рдЬрд╝рд░реВрд░! рдЕрдм рдореИрдВ рдЖрдкрд╕реЗ рд╣рд┐рдВрджреА рдореЗрдВ рдмрд╛рдд рдХрд░реВрдБрдЧрд╛ред рдореИрдВ рдЖрдЬ рдЧреАрддрд╛ рдХреЗ рдЬреНрдЮрд╛рди рд╕реЗ рдЖрдкрдХреА рдХреНрдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? ЁЯШК";
    await sendViaHeltar(phone, confirmationMessage, "language_switch");
}

// Simple handler for genuine small talk
async function handleSmallTalk(phone, text, language) {
    let response;
    const lower = text.toLowerCase();
    if (language === "Hindi") {
        if (lower.includes('thank') || lower.includes('рд╢реБрдХреНрд░рд┐рдпрд╛')) {
            response = "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯЩП рдХреНрдпрд╛ рдЖрдк рдФрд░ рдХреБрдЫ рдЪрд╛рд╣реЗрдВрдЧреЗ?";
        } else {
            response = "рдареАрдХ рд╣реИ! ЁЯШК рдЖрдк рдЖрдЧреЗ рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?";
        }
    } else {
        if (lower.includes('thank')) {
            response = "You're welcome! ЁЯЩП Is there anything else you need?";
        } else {
            response = "Okay! ЁЯШК What would you like to know more about?";
        }
    }
    await sendViaHeltar(phone, response, "small_talk");
}

/* ========== MAIN WEBHOOK HANDLER (FIXED VERSION) ========== */
app.post("/webhook", async (req, res) => {
    try {
        res.status(200).send("OK");
        const body = req.body || {};
        const msg = parseWebhookMessage(body);

        if (!msg) return;

        const phone = msg?.from || msg?.clientWaNumber;
        const rawText = msg?.text?.body || msg?.button?.payload || "";
        const text = String(rawText || "").trim();

        if (!phone || text.length === 0) return;

        console.log(`ЁЯУй Incoming from ${phone}: "${text}"`);
        await trackIncoming(phone, text);

        // Get user state FIRST
        const user = await getUserState(phone);
        const languageResult = await determineUserLanguage(phone, text, user);
        const language = languageResult.language;

        // CRITICAL FIX: Check if this is follow-up to deep conversation
        const isFollowUp = isFollowUpToPreviousDeepQuestion(text, user);

        // Update chat history BEFORE processing
        const updatedHistory = [...(user.chat_history || []), { role: 'user', content: text }];
        await updateUserState(phone, {
            chat_history: updatedHistory,
            last_message: text,
            last_message_role: 'user'
        });
        // Refresh user object with latest history for this request cycle
        user.chat_history = updatedHistory;
        user.last_message = text;
        user.last_message_role = 'user';

        // 1. LANGUAGE SWITCH - Highest priority
        if (languageResult.isSwitch) {
            await handleLanguageSwitch(phone, languageResult.switchTo);
            return;
        }

        // 2. GREETINGS - Only if not a follow-up
        if (!isFollowUp && isGreetingQuery(text)) {
            console.log("тЬЕ Intent: Greeting");
            await handleEnhancedStartupMenu(phone, language, user);
            return;
        }

        // 3. MENU CHOICES
        if (user.conversation_stage === "awaiting_menu_choice" && /^[1-4]$/.test(text.trim())) {
            console.log("тЬЕ Intent: Menu Choice");
            await handleEnhancedMenuChoice(phone, text.trim(), language, user);
            return;
        }

        // 4. EMOTIONAL/DEEP QUESTIONS - Process these before small talk
        const emotionDetection = detectEmotionAdvanced(text);
        const detectedEmotion = emotionDetection?.emotion;

        if (detectedEmotion || isDeepQuestion(text) || isFollowUp) {
            console.log(`ЁЯОп Deep/Follow-up question detected. Emotion: ${detectedEmotion}, Follow-up: ${isFollowUp}`);

            const conversationContext = {
                stage: user.conversation_stage,
                emotion: detectedEmotion,
                situation: detectUserSituation(text),
                previousMessages: user.chat_history?.slice(-4) || [],
                language: language,
                isFollowUp: isFollowUp
            };

            await getAIResponse(phone, text, language, conversationContext);
            return;
        }

        // 5. GENUINE SMALL TALK - Only after all serious checks have failed
        if (isSmallTalk(text)) {
            console.log(`ЁЯТм Intent: Genuine small talk`);
            await handleSmallTalk(phone, text, language);
            return;
        }

        // 6. DEFAULT: All other cases go to the AI for a meaningful response
        console.log(`ЁЯдЦ Intent: Default to AI response`);
        const defaultContext = {
            stage: user.conversation_stage,
            emotion: null,
            situation: 'general',
            previousMessages: user.chat_history?.slice(-4) || [],
            language: language
        };
        await getAIResponse(phone, text, language, defaultContext);

    } catch (err) {
        console.error("тЭМ Webhook error:", err?.message || err);
    }
});

/* ---------------- Health & Server Start ---------------- */
app.get("/health", (req, res) => {
    res.json({
        status: "ok", bot: BOT_NAME, timestamp: new Date().toISOString(),
        features: ["Context-Aware Intent", "Gita-Grounded Responses", "Practical Action Steps"]
    });
});

app.use((err, req, res, next) => {
    console.error("тЭМ Unhandled Error:", err);
    res.status(500).send("Internal Server Error");
});

app.listen(PORT, () => {
    validateEnvVariables();
    console.log(`\nЁЯЪА ${BOT_NAME} listening on port ${PORT}`);
    console.log("тЬЕ CONTEXT-AWARE logic applied successfully.");
    console.log("ЁЯОп Critical fixes implemented:");
    console.log("   тАв Enhanced emotion detection");
    console.log("   тАв Context-aware conversation flow");
    console.log("   тАв No more misclassified small talk");
    console.log("   тАв Complete response handling");
    setupDatabase().catch(console.error);
});

process.on('SIGINT', async () => {
    console.log('\nЁЯЫС Shutting down gracefully...');
    await dbPool.end();
    process.exit(0);
});
