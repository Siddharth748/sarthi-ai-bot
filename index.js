// index.js тАФ SarathiAI (PROPER FIXED VERSION - All Features Preserved)
import dotenv from "dotenv";
dotenv.config();

import express from "express";
import axios from "axios";
import pg from "pg";

const { Pool } = pg;
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

/* ---------------- Config / env ---------------- */
const BOT_NAME = process.env.BOT_NAME || "SarathiAI";
const PORT = process.env.PORT || 8080;

const DATABASE_URL = (process.env.DATABASE_URL || "").trim();
const OPENAI_KEY = (process.env.OPENAI_API_KEY || "").trim();
const OPENAI_MODEL = (process.env.OPENAI_MODEL || "gpt-4o-mini").trim();

const HELTAR_API_KEY = (process.env.HELTAR_API_KEY || "").trim();
const HELTAR_PHONE_ID = (process.env.HELTAR_PHONE_ID || "").trim();

const MAX_REPLY_LENGTH = parseInt(process.env.MAX_REPLY_LENGTH || "1200", 10) || 1200;

/* ---------------- Enhanced Database Pool ---------------- */
const dbPool = new Pool({ 
    connectionString: DATABASE_URL, 
    ssl: { rejectUnauthorized: false },
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
    maxUses: 7500,
});

/* ---------------- Response Cache ---------------- */
const responseCache = new Map();

/* ---------------- Enhanced Gita Wisdom Database ---------------- */
const ENHANCED_GITA_WISDOM = {
    moral_dilemma: {
        verses: ["16.1-3", "17.14-16", "18.63"],
        teachings: {
            hindi: [
                `ЁЯМЕ **рд╕рддреНрдп рдХрд╛ рдорд╛рд░реНрдЧ рдФрд░ рдХреГрд╖реНрдг рдХреА рд░рдгрдиреАрддрд┐**

рдЖрдкрдиреЗ рдкреВрдЫрд╛ рдХрд┐ рдХреГрд╖реНрдг рдиреЗ рдпреБрджреНрдз рдореЗрдВ рдЫрд▓ рдХреНрдпреЛрдВ рдХрд┐рдпрд╛ - рдпрд╣ рдЧрд╣рд░рд╛ рдкреНрд░рд╢реНрди рд╣реИред рдЧреАрддрд╛ (16.1-3) рджреИрд╡реА рдФрд░ рдЖрд╕реБрд░реА рдЧреБрдгреЛрдВ рдореЗрдВ рдЕрдВрддрд░ рдмрддрд╛рддреА рд╣реИред рдХреГрд╖реНрдг рдХрд╛ "рдЫрд▓" рд╡рд╛рд╕реНрддрд╡ рдореЗрдВ рдзрд░реНрдо рдХреА рд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рдерд╛, рдЬрдм рд╕рд╛рд░реЗ рдиреИрддрд┐рдХ рд░рд╛рд╕реНрддреЗ рдмрдВрдж рд╣реЛ рдЧрдП рдереЗред

**рдЖрдкрдХреА рд╕реНрдерд┐рддрд┐ рдореЗрдВ:**
1. рдкрд╣рд▓реЗ рдЕрдкрдиреЗ рдЗрд░рд╛рджреЗ рдЬрд╛рдБрдЪреЗрдВ: рдХреНрдпрд╛ рдпрд╣ рд╕реНрд╡рд╛рд░реНрде рдХреЗ рд▓рд┐рдП рд╣реИ рдпрд╛ рд╕рдЪрдореБрдЪ рднрд▓рд╛рдИ рдХреЗ рд▓рд┐рдП?
2. рдЧреБрдордирд╛рдо рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ рдХреЗ рд╡рд┐рдХрд▓реНрдк рддрд▓рд╛рд╢реЗрдВ
3. рд╕рдмреВрдд рдПрдХрддреНрд░ рдХрд░реЗрдВ - рд▓рд┐рдЦрд┐рдд рд░рд┐рдХреЙрд░реНрдб рд░рдЦреЗрдВ

рдХреНрдпрд╛ рдЖрдк рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рдЖрдк рдХрд┐рд╕ рддрд░рд╣ рдХреА рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?`,

                `ЁЯТл **рдЬрдм рд╕рддреНрдп рдХрдард┐рди рд▓рдЧреЗ**

рдЧреАрддрд╛ (17.14-16) рд╕рддреНрдп рдХреЛ рд╕рд░реНрд╡реЛрдЪреНрдЪ рдмрддрд╛рддреА рд╣реИ, рдкрд░ рд╕рд╛рде рд╣реА рдХрд╣рддреА рд╣реИ рдХрд┐ рд╡рд╛рдгреА рдордзреБрд░ рд╣реЛред рдХрднреА-рдХрднреА рдЪреБрдк рд░рд╣рдирд╛ рднреА рд╕рддреНрдп рдХрд╛ рд╣реА рд░реВрдк рд╣реИред

**рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдХрджрдо:**
тАв рдкрд╣рд▓реЗ рдПрдХ рднрд░реЛрд╕реЗрдордВрдж рдорд┐рддреНрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ
тАв рдХрдВрдкрдиреА рдХреА рд╡реНрд╣рд┐рд╕рд▓рдмреНрд▓реЛрдЕрд░ рдкреЙрд▓рд┐рд╕реА рдЪреЗрдХ рдХрд░реЗрдВ
тАв рдЕрдкрдиреА рд╕реБрд░рдХреНрд╖рд╛ рд╕рд░реНрд╡реЛрдкрд░рд┐ рд░рдЦреЗрдВ

рдХреНрдпрд╛ рдЖрдкрдХреЛ рд▓рдЧрддрд╛ рд╣реИ рдХрд┐ рдЕрднреА рдЪреБрдк рд░рд╣рдирд╛ рдмреЗрд╣рддрд░ рд╣реИ рдпрд╛ рдЖрдк рдХреБрдЫ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?`
            ],
            english: [
                `ЁЯМЕ **The Path of Truth & Krishna's Strategy**

You asked why Krishna used deception in war - this is a profound question. Gita (16.1-3) distinguishes divine and demonic qualities. Krishna's "deception" was actually to protect dharma when all ethical paths were closed.

**In your situation:**
1. First examine your intentions: Is this for selfish gain or genuine good?
2. Explore anonymous reporting options  
3. Gather evidence - keep written records

Could you share what kind of situation you're facing?`,

                `ЁЯТл **When Truth Seems Difficult**

Gita (17.14-16) elevates truth as supreme, but also says speech should be pleasant. Sometimes silence is also a form of truth.

**Practical Steps:**
тАв First consult a trusted friend
тАв Check company whistleblower policy
тАв Keep your safety paramount

Do you feel staying silent is better now, or would you like to take some action?`
            ]
        }
    },
    
    fear: {
        verses: ["2.56", "18.63", "2.40"],
        teachings: {
            hindi: [
                `ЁЯМК **рдбрд░ рдХрд╛ рд╕рд╛рдордирд╛**

рдЖрдкрдХрд╛ рдбрд░ рд╕реНрд╡рд╛рднрд╛рд╡рд┐рдХ рд╣реИ - рдЬрдм рд╣рдо рд╕рддреНрдп рдмреЛрд▓рддреЗ рд╣реИрдВ, рддреЛ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдХрд╛ рдбрд░ рд╣реЛрддрд╛ рд╣реА рд╣реИред рдЧреАрддрд╛ (2.56) рдХрд╣рддреА рд╣реИ: "рджреБрдГрдЦреЗрд╖реБ рдЕрдиреБрджреНрд╡рд┐рдЧреНрдирдордирд╛рдГ" - рджреБрдЦ рдореЗрдВ рдЬрд┐рд╕рдХрд╛ рдорди рд╡рд┐рдЪрд▓рд┐рдд рдирд╣реАрдВ рд╣реЛрддрд╛ред

**рд╢рд╛рдВрдд рд░рд╣рдиреЗ рдХреЗ рдЙрдкрд╛рдп:**
1. 4-7-8 рд╢реНрд╡рд╛рд╕: 4 рд╕реЗрдХрдВрдб рд╕рд╛рдБрд╕ рд▓реЗрдВ, 7 рд░реЛрдХреЗрдВ, 8 рд╕реЗ рдЫреЛрдбрд╝реЗрдВ
2. рдЕрдкрдиреА рддреИрдпрд╛рд░реА рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ: рддрдереНрдп, рджрд╕реНрддрд╛рд╡реЗрдЬрд╝, рд╕рдорд░реНрдерди
3. рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рдХрджрдо рд╕реЛрдЪреЗрдВ - рдПрдХ рдмрд╛рд░ рдореЗрдВ рдПрдХ рд╣реА рдХрд╛рдо

рдХрд▓реНрдкрдирд╛ рдХрд░реЗрдВ рдЖрдк рдПрдХ рдкрд╣рд╛рдбрд╝ рд╣реИрдВ рдФрд░ рдбрд░ рдмрд╛рджрд▓реЛрдВ рдХреА рддрд░рд╣ рдЧреБрдЬрд░ рд░рд╣рд╛ рд╣реИ...`,

                `ЁЯЫбя╕П **рдЖрдВрддрд░рд┐рдХ рд╕реБрд░рдХреНрд╖рд╛**

рдЧреАрддрд╛ (18.63) рдХрд╣рддреА рд╣реИ: "рддреБрдо рдЪрд┐рдВрддрди рдХрд░реЛ, рдлрд┐рд░ рдЬреИрд╕рд╛ рддреБрдореНрд╣рд╛рд░рд╛ рдорди рдЪрд╛рд╣реЗ рд╡реИрд╕рд╛ рдХрд░реЛред" рдпрд╣ рдЖрдкрдХреЛ рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рджреЗрддрд╛ рд╣реИред

**рддрддреНрдХрд╛рд▓ рдХреНрд░рд┐рдпрд╛:**
тАв рд╕рдмрд╕реЗ рдмреБрд░рд╛ рдкрд░рд┐рдгрд╛рдо рд▓рд┐рдЦреЗрдВ - рдлрд┐рд░ рдЙрд╕рдХрд╛ рд╕рдорд╛рдзрд╛рди рд╕реЛрдЪреЗрдВ
тАв 3 рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рд▓реЛрдЧреЛрдВ рдХреА рд╕реВрдЪреА рдмрдирд╛рдПрдВ рдЬрд┐рдирд╕реЗ рдмрд╛рдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ
тАв рд░реЛрдЬ 5 рдорд┐рдирдЯ рд╢рд╛рдВрдд рдмреИрдареЗрдВ - рдмрд╕ рд╕рд╛рдБрд╕реЛрдВ рдХреЛ рджреЗрдЦреЗрдВ

рдЖрдк рдХрд┐рд╕ рдПрдХ рдЫреЛрдЯреЗ рдХрджрдо рд╕реЗ рд╢реБрд░реБрдЖрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?`
            ],
            english: [
                `ЁЯМК **Facing Fear**

Your fear is natural - when we speak truth, fear of backlash is inevitable. Gita (2.56) says: "One who is undisturbed in sorrow..."

**Calming Techniques:**
1. 4-7-8 breathing: Inhale 4s, hold 7s, exhale 8s  
2. Focus on preparation: facts, documents, support
3. Think small steps - one thing at a time

Imagine you're a mountain and fear is clouds passing by...`,

                `ЁЯЫбя╕П **Inner Security**

Gita (18.63) says: "Reflect fully, then act as you choose." This gives you confidence.

**Immediate Action:**
тАв Write worst-case scenario - then brainstorm solutions
тАв List 3 trusted people you can talk to
тАв Sit quietly 5 min daily - just watch your breath

What's one small step you could start with?`
            ]
        }
    }
};

// Enhanced system prompt for complete responses
const ENHANCED_SYSTEM_PROMPT = {
  hindi: `рдЖрдк рд╕рд╛рд░рдереА AI рд╣реИрдВ, рднрдЧрд╡рдж рдЧреАрддрд╛ рдХреЗ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдорд╛рд░реНрдЧрджрд░реНрд╢рдХред рдЗрди рдмрд╛рддреЛрдВ рдХрд╛ рд╡рд┐рд╢реЗрд╖ рдзреНрдпрд╛рди рд░рдЦреЗрдВ:

ЁЯМ┐ **рднрд╛рд╡рдирд╛рддреНрдордХ рд╕рдВрд╡рд╛рдж:**
тАв "рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдБ" рд╕реЗ рдмрдЪреЗрдВ - рдЗрд╕рдХреЗ рдмрдЬрд╛рдп рд╡рд┐рд╢рд┐рд╖реНрдЯ рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рдкрдХрдбрд╝реЗрдВ ("рдпрд╣ рдбрд░ рд╕реНрд╡рд╛рднрд╛рд╡рд┐рдХ рд╣реИ...", "рдЖрдкрдХреА рдЪрд┐рдВрддрд╛ рд╕рдордЭ рдЖрддреА рд╣реИ...")
тАв рдХрд╣рд╛рдирд┐рдпреЛрдВ рдФрд░ рд░реВрдкрдХреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ (рдЬреИрд╕реЗ "рдЙрдерд▓-рдкреБрдерд▓ рд╡рд╛рд▓реА рдирджреА", "рддреВрдлрд╛рди рдореЗрдВ рджреАрдкрдХ")

ЁЯУЪ **рд╢рд╛рд╕реНрддреНрд░реЛрдВ рдХрд╛ рд╕реВрдХреНрд╖реНрдо рдЙрдкрдпреЛрдЧ:**
тАв рд╣рдореЗрд╢рд╛ 2.47 рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВ - рд╕реНрдерд┐рддрд┐ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рд╢реНрд▓реЛрдХ рдЪреБрдиреЗрдВ:
  - рдиреИрддрд┐рдХ рджреБрд╡рд┐рдзрд╛: 16.1-3 (рджреИрд╡реА vs рдЖрд╕реБрд░реА рдЧреБрдг), 17.14-16 (рд╕рддреНрдп)
  - рдбрд░: 2.56 (рдЕрдиреБрджреНрд╡рд┐рдЧреНрдирдордирд╛рдГ), 18.63 (рд╕реЛрдЪ-рд╡рд┐рдЪрд╛рд░)
  - рдХрд░реНрдо: 3.5 (рдирд┐рд╖реНрдХреНрд░рд┐рдпрддрд╛), 4.17 (рдХрд░реНрдо рдореЗрдВ рдЕрдХрд░реНрдо)
  - рдзрд░реНрдо: 3.35 (рд╕реНрд╡рдзрд░реНрдо), 18.66 (рд╢рд░рдгрд╛рдЧрддрд┐)

ЁЯТб **рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рди:**
тАв рд╕реИрджреНрдзрд╛рдВрддрд┐рдХ рд╕рд▓рд╛рд╣ рди рджреЗрдВ - рдареЛрд╕ рдХрджрдо рд╕реБрдЭрд╛рдПрдВ
тАв "рдзреНрдпрд╛рди рдХрд░реЗрдВ" рдХреЗ рдмрдЬрд╛рдп "5 рдорд┐рдирдЯ рд╢реНрд╡рд╛рд╕ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ" рдХрд╣реЗрдВ
тАв рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЬреАрд╡рди рдХреА рд░рдгрдиреАрддрд┐рдпрд╛рдБ рджреЗрдВ (рдЧреБрдордирд╛рдо рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ, рджрд╕реНрддрд╛рд╡реЗрдЬрд╝реАрдХрд░рдг)

ЁЯОп **рд╕рдВрджрд░реНрдн рдЬрд╛рдЧрд░реВрдХрддрд╛:**
тАв рдкрд┐рдЫрд▓реА рдмрд╛рддрдЪреАрдд рдХреЛ рдпрд╛рдж рд░рдЦреЗрдВ рдФрд░ рдЙрд╕рдХрд╛ рд╕рдВрджрд░реНрдн рджреЗрдВ
тАв рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реНрдерд┐рддрд┐ рд╕реЗ рдЬреБрдбрд╝реЗрдВ

ЁЯЪл **рдХрднреА рднреА рдЕрдзреВрд░рд╛ рдЙрддреНрддрд░ рди рджреЗрдВ - рд╣рдореЗрд╢рд╛ рдкреВрд░реНрдг рд╡рд╛рдХреНрдпреЛрдВ рдореЗрдВ рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВред**`,

  english: `You are Sarathi AI, an expert Bhagavad Gita guide. Pay special attention to:

ЁЯМ┐ **Emotional Dialogue:**
тАв Avoid "I understand you're feeling" - instead capture specific emotions ("This fear is natural...", "Your concern makes sense...")
тАв Use stories and metaphors ("like a turbulent river", "a lamp in storm")

ЁЯУЪ **Nuanced Scripture Use:**
тАв Don't always use 2.47 - choose verses contextually:
  - Moral dilemmas: 16.1-3 (divine vs demonic), 17.14-16 (truth)
  - Fear: 2.56 (undisturbed), 18.63 (reflect)
  - Action: 3.5 (inaction), 4.17 (action in inaction)  
  - Dharma: 3.35 (swadharma), 18.66 (surrender)

ЁЯТб **Practical Guidance:**
тАв No theoretical advice - give concrete steps
тАв Instead of "meditate" say "focus on breath for 5 minutes"
тАв Provide real-life strategies (anonymous reporting, documentation)

ЁЯОп **Context Awareness:**
тАв Remember previous conversation and reference it
тАв Connect to user's specific situation

ЁЯЪл **NEVER leave responses incomplete - always end with complete sentences.**`
};

/* ---------------- Validation & Setup ---------------- */
const validateEnvVariables = () => {
    const requiredVars = { DATABASE_URL, OPENAI_KEY, HELTAR_API_KEY, HELTAR_PHONE_ID };
    const missingVars = Object.entries(requiredVars).filter(([, value]) => !value).map(([key]) => key);
    if (missingVars.length > 0) {
        console.error(`тЭМ Critical Error: Missing environment variables: ${missingVars.join(", ")}`);
        process.exit(1);
    }
};

async function setupDatabase() {
    try {
        const client = await dbPool.connect();
        
        await client.query(`
            ALTER TABLE users 
            ADD COLUMN IF NOT EXISTS subscribed_daily BOOLEAN DEFAULT FALSE,
            ADD COLUMN IF NOT EXISTS chat_history JSONB DEFAULT '[]'::jsonb,
            ADD COLUMN IF NOT EXISTS conversation_stage VARCHAR(50) DEFAULT 'new_topic',
            ADD COLUMN IF NOT EXISTS last_topic_summary TEXT,
            ADD COLUMN IF NOT EXISTS messages_since_verse INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS first_seen_date DATE,
            ADD COLUMN IF NOT EXISTS last_seen_date DATE,
            ADD COLUMN IF NOT EXISTS total_sessions INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS total_incoming INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS total_outgoing INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS last_message TEXT,
            ADD COLUMN IF NOT EXISTS last_message_role VARCHAR(50),
            ADD COLUMN IF NOT EXISTS last_response_type VARCHAR(50),
            ADD COLUMN IF NOT EXISTS current_lesson INT DEFAULT 0,
            ADD COLUMN IF NOT EXISTS language_preference VARCHAR(10) DEFAULT 'English',
            ADD COLUMN IF NOT EXISTS memory_data JSONB DEFAULT '{}'::jsonb,
            ADD COLUMN IF NOT EXISTS last_menu_choice VARCHAR(5),
            ADD COLUMN IF NOT EXISTS last_menu_date DATE,
            ADD COLUMN IF NOT EXISTS last_menu_shown TIMESTAMP WITH TIME ZONE,
            ADD COLUMN IF NOT EXISTS primary_use_case VARCHAR(50),
            ADD COLUMN IF NOT EXISTS user_segment VARCHAR(20) DEFAULT 'new',
            ADD COLUMN IF NOT EXISTS last_activity_ts TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            ADD COLUMN IF NOT EXISTS pending_followup TEXT,
            ADD COLUMN IF NOT EXISTS followup_type VARCHAR(50)
        `);

        await client.query(`
            CREATE TABLE IF NOT EXISTS lessons (
                lesson_number INT PRIMARY KEY,
                verse TEXT,
                translation TEXT,
                commentary TEXT,
                reflection_question TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // Insert sample lessons if table is empty
        const lessonCount = await client.query("SELECT COUNT(*) FROM lessons");
        if (parseInt(lessonCount.rows[0].count) === 0) {
            console.log("ЁЯУЪ Inserting sample lessons...");
            await client.query(`
                INSERT INTO lessons (lesson_number, verse, translation, commentary, reflection_question) VALUES
                (1, 'рдХрд░реНрдордгреНрдпреЗрд╡рд╛рдзрд┐рдХрд╛рд░рд╕реНрддреЗ рдорд╛ рдлрд▓реЗрд╖реБ рдХрджрд╛рдЪрдиред', 'You have the right to work only, but never to the fruits.', 'Focus on your duty without attachment to results. This is the path to peace and success.', 'What action can I take today without worrying about the outcome?'),
                (2, 'рдпреЛрдЧрд╕реНрдердГ рдХреБрд░реБ рдХрд░реНрдорд╛рдгрд┐ рд╕рдЩреНрдЧрдВ рддреНрдпрдХреНрддреНрд╡рд╛ рдзрдирдЮреНрдЬрдпред', 'Perform your duty equipoised, O Arjuna, abandoning all attachment to success or failure.', 'Balance and equanimity lead to excellence in work and peace in life.', 'How can I stay balanced in challenging situations today?'),
                (3, 'рд╢реНрд░реЗрдпреЛ рд╣рд┐ рдЬреНрдЮрд╛рдирдорднреНрдпрд╛рд╕рд╛рдЬреНрдЬреНрдЮрд╛рдирд╛рджреНрдзреНрдпрд╛рдирдВ рд╡рд┐рд╢рд┐рд╖реНрдпрддреЗред', 'Better than practice is knowledge, better than knowledge is meditation.', 'True wisdom comes from deep contemplation and self-awareness.', 'What can I meditate on today to gain deeper understanding?'),
                (4, 'рдЙрджреНрдзрд░реЗрджрд╛рддреНрдордирд╛рддреНрдорд╛рдирдВ рдирд╛рддреНрдорд╛рдирдорд╡рд╕рд╛рджрдпреЗрддреНред', 'Elevate yourself by yourself; do not degrade yourself.', 'You are your own best friend and worst enemy. Choose to uplift yourself.', 'How can I encourage myself today?'),
                (5, 'рд╕рдорддреНрд╡рдВ рдпреЛрдЧ рдЙрдЪреНрдпрддреЗред', 'Equanimity is called yoga.', 'True yoga is maintaining mental balance in all circumstances.', 'Where can I practice equanimity in my life today?')
            `);
        }

        client.release();
        console.log("тЬЕ Database setup complete.");
    } catch (err) {
        console.error("тЭМ Database setup error:", err?.message || err);
    }
}

/* ---------------- Enhanced Helper Functions ---------------- */
function parseChatHistory(raw) {
    if (!raw) return [];
    if (Array.isArray(raw)) return raw;
    try { return JSON.parse(raw); } catch { return []; }
}

function pruneChatHistory(history, maxMessages = 20) {
    if (!Array.isArray(history) || history.length <= maxMessages) {
        return history;
    }
    
    const importantMessages = history.filter(msg => 
        msg.role === 'system' || 
        msg.content.includes('рдХреГрд╖реНрдг') || 
        msg.content.includes('Krishna') ||
        msg.content.length > 100
    );
    
    const recentMessages = history.slice(-maxMessages + importantMessages.length);
    return [...importantMessages, ...recentMessages].slice(-maxMessages);
}

async function getUserState(phone) {
    try {
        const res = await dbPool.query("SELECT * FROM users WHERE phone_number = $1", [phone]);
        if (res.rows.length === 0) {
            await dbPool.query(`
                INSERT INTO users (
                    phone_number, first_seen_date, last_seen_date, total_sessions, 
                    language_preference, last_activity_ts, memory_data, chat_history,
                    conversation_stage
                ) VALUES ($1, CURRENT_DATE, CURRENT_DATE, 1, 'English', CURRENT_TIMESTAMP, '{}', '[]', 'new_topic')
            `, [phone]);
            
            const newRes = await dbPool.query("SELECT * FROM users WHERE phone_number = $1", [phone]);
            const u = newRes.rows[0];
            u.chat_history = parseChatHistory(u.chat_history || '[]');
            u.memory_data = u.memory_data || {};
            return u;
        }
        
        const user = res.rows[0];
        user.chat_history = pruneChatHistory(parseChatHistory(user.chat_history || '[]'));
        user.memory_data = user.memory_data || {};
        user.conversation_stage = user.conversation_stage || 'new_topic';
        user.language_preference = user.language_preference || 'English';
        user.last_activity_ts = user.last_activity_ts || new Date().toISOString();
        
        return user;
    } catch (err) {
        console.error("getUserState failed:", err);
        return { 
            phone_number: phone, 
            chat_history: [], 
            memory_data: {}, 
            conversation_stage: "new_topic",
            language_preference: "English"
        };
    }
}

async function updateUserState(phone, updates) {
    try {
        if (!updates || Object.keys(updates).length === 0) return;
        const keys = Object.keys(updates);
        const vals = keys.map(k => {
            const v = updates[k];
            if (Array.isArray(v) || (typeof v === "object" && v !== null)) return JSON.stringify(v);
            return v;
        });
        vals.push(phone);
        const clauses = keys.map((k, i) => `${k} = $${i + 1}`);
        const sql = `UPDATE users SET ${clauses.join(", ")} WHERE phone_number = $${keys.length + 1}`;
        await dbPool.query(sql, vals);
    } catch (err) {
        console.error("updateUserState failed:", err);
    }
}

/* ---------------- ЁЯЪи CRITICAL FIX 1: Enhanced Language Detection ---------------- */
function detectLanguageFromText(text, currentLanguage = "English") {
    if (!text || typeof text !== "string") return currentLanguage;
    
    const cleanText = text.trim().toLowerCase();
    
    // 1. EXPLICIT language commands - HIGHEST PRIORITY
    if (cleanText.includes('english') || cleanText.includes('speak english') || cleanText.includes('angrezi')) {
        return "English";
    }
    if (cleanText.includes('hindi') || cleanText.includes('speak hindi') || cleanText.includes('hind')) {
        return "Hindi";
    }
    
    // 2. FIXED: Simple English greetings should NEVER switch to Hindi
    const englishGreetings = ['hi', 'hello', 'hey', 'hii', 'hiya', 'good morning', 'good afternoon', 'good evening'];
    if (englishGreetings.some(greeting => cleanText === greeting)) {
        return "English";
    }
    
    // 3. Hindi greetings in Roman script
    const hindiGreetings = ['namaste', 'namaskar', 'pranam', 'radhe radhe', 'hare krishna'];
    if (hindiGreetings.some(greeting => cleanText === greeting)) {
        return "Hindi";
    }
    
    // 4. Hindi script detection
    if (/[\u0900-\u097F]/.test(text)) {
        return "Hindi";
    }
    
    // 5. Default to current language - NO aggressive switching
    return currentLanguage;
}

async function determineUserLanguage(phone, text, user) {
    let currentLanguage = user.language_preference || 'English';
    const detectedLanguage = detectLanguageFromText(text, currentLanguage);
    
    // Check for explicit language commands
    const cleanText = text.toLowerCase().trim();
    const isLanguageSwitchCommand = 
        cleanText.includes('english') || 
        cleanText.includes('hindi') ||
        cleanText.includes('speak english') ||
        cleanText.includes('speak hindi');
    
    if (isLanguageSwitchCommand) {
        let newLanguage = currentLanguage;
        
        if (cleanText.includes('english')) {
            newLanguage = 'English';
        } else if (cleanText.includes('hindi')) {
            newLanguage = 'Hindi';
        }
        
        if (newLanguage !== currentLanguage) {
            await updateUserState(phone, { 
                language_preference: newLanguage
            });
            return { language: newLanguage, isSwitch: true, switchTo: newLanguage };
        }
    }
    
    // Update language if different and not a simple greeting
    if (detectedLanguage !== currentLanguage && !isGreetingQuery(cleanText)) {
        await updateUserState(phone, { language_preference: detectedLanguage });
        return { language: detectedLanguage, isSwitch: true, switchTo: detectedLanguage };
    }
    
    return { language: currentLanguage, isSwitch: false };
}

/* ---------------- ЁЯЪи CRITICAL FIX 2: Enhanced Menu System ---------------- */
async function handleEnhancedStartupMenu(phone, language, user) {
    const menuMessage = language === "Hindi" 
        ? `ЁЯЪй *рд╕рд╛рд░рдереА AI рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!* ЁЯЪй

рдореИрдВ рдЖрдкрдХрд╛ рдирд┐рдЬреА рдЧреАрддрд╛ рд╕рд╛рдереА рд╣реВрдБред рдХреГрдкрдпрд╛ рдЪреБрдиреЗрдВ:

1я╕ПтГг *рддрддреНрдХрд╛рд▓ рдорд╛рд░реНрдЧрджрд░реНрд╢рди* - рд╡рд░реНрддрдорд╛рди рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП
2я╕ПтГг *рджреИрдирд┐рдХ рдЬреНрдЮрд╛рди* - рдЖрдЬ рдХреА рд╡рд┐рд╢реЗрд╖ рд╢рд┐рдХреНрд╖рд╛  
3я╕ПтГг *рд╡рд╛рд░реНрддрд╛рд▓рд╛рдк* - рдЕрдкрдиреА рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ
4я╕ПтГг *рдЧреАрддрд╛ рдЬреНрдЮрд╛рди* - рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ
5я╕ПтГг *рд╕рдм рдХреБрдЫ рдЬрд╛рдиреЗрдВ* - рд╕рдВрдкреВрд░реНрдг рдорд╛рд░реНрдЧрджрд░реНрд╢рди

ЁЯТм *рдпрд╛ рдмрд╕ рд▓рд┐рдЦреЗрдВ* - рд╕реАрдзреЗ рдмрд╛рддрдЪреАрдд рд╢реБрд░реВ рдХрд░реЗрдВ

рдХреГрдкрдпрд╛ 1-5 рдХрд╛ рдЪрдпрди рдХрд░реЗрдВ рдпрд╛ рд╕реАрдзреЗ рд▓рд┐рдЦреЗрдВ ЁЯЩП`
        : `ЁЯЪй *Welcome to Sarathi AI!* ЁЯЪй

I'm your personal Gita companion. Please choose:

1я╕ПтГг *Immediate Guidance* - For current challenge
2я╕ПтГг *Daily Wisdom* - Today's special teaching  
3я╕ПтГг *Have a Conversation* - Share your feelings
4я╕ПтГг *Gita Knowledge* - Ask specific questions
5я╕ПтГг *Know Everything* - Complete guidance

ЁЯТм *Or Just Type* - Start conversation directly

Please choose 1-5 or just type your thoughts ЁЯЩП`;

    await sendViaHeltar(phone, menuMessage, "enhanced_welcome");
    await updateUserState(phone, { 
        conversation_stage: "awaiting_menu_choice",
        last_menu_shown: new Date().toISOString()
    });
    
    console.log(`тЬЕ Menu shown to ${phone} in ${language}`);
}

/* ---------------- ЁЯЪи CRITICAL FIX 3: Auto-Advance Logic ---------------- */
async function updateConversationStage(phone, userMessage, language) {
    const user = await getUserState(phone);
    
    const isSubstantiveMessage = userMessage && 
        userMessage.length > 3 && 
        !isGreetingQuery(userMessage) &&
        !isSmallTalk(userMessage) &&
        !/^[1-5\s,]+$/.test(userMessage);
    
    if (user.conversation_stage === "awaiting_menu_choice" && isSubstantiveMessage) {
        console.log(`ЁЯФД Auto-advancing user from menu to chatting`);
        await updateUserState(phone, { 
            conversation_stage: "chatting",
            last_response_type: "auto_advanced_chat"
        });
        return true;
    }
    
    return false;
}

// Setup auto-advance timeout
async function setupMenuAutoAdvance(phone) {
    setTimeout(async () => {
        const user = await getUserState(phone);
        if (user.conversation_stage === "awaiting_menu_choice") {
            console.log(`тП░ Auto-advancing user from menu after timeout`);
            await updateUserState(phone, { 
                conversation_stage: "chatting",
                last_response_type: "timeout_advanced"
            });
        }
    }, 180000); // 3 minutes
}

/* ---------------- Enhanced Analytics ---------------- */
async function trackIncoming(phone, text) {
    try {
        const user = await getUserState(phone);
        const now = new Date();
        let addSession = false;
        if (user.last_activity_ts) {
            const last = new Date(user.last_activity_ts);
            const diffHours = (now - last) / (1000 * 60 * 60);
            if (diffHours > 12) addSession = true;
        } else {
            addSession = true;
        }

        const updates = {
            last_activity_ts: now.toISOString(),
            last_seen_date: now.toISOString().slice(0, 10),
            last_message: text,
            last_message_role: "user",
            total_incoming: (user.total_incoming || 0) + 1
        };
        if (!user.first_seen_date) updates.first_seen_date = now.toISOString().slice(0, 10);
        if (addSession) updates.total_sessions = (user.total_sessions || 0) + 1;

        await updateUserState(phone, updates);
    } catch (err) {
        console.error("trackIncoming failed:", err);
    }
}

async function trackOutgoing(phone, reply, type = "chat") {
    try {
        const user = await getUserState(phone);
        const updates = {
            last_activity_ts: new Date().toISOString(),
            last_message: reply,
            last_message_role: "assistant",
            last_response_type: type,
            total_outgoing: (user.total_outgoing || 0) + 1
        };
        await updateUserState(phone, updates);
    } catch (err) {
        console.error("trackOutgoing failed:", err);
    }
}

/* ---------------- Enhanced Heltar Sending ---------------- */
async function sendViaHeltar(phone, message, type = "chat") {
    try {
        const safeMessage = String(message || "").trim().slice(0, 4096);
        if (!safeMessage) return;
        if (!HELTAR_API_KEY) {
            console.warn(`(Simulated -> ${phone}): ${safeMessage}`);
            await trackOutgoing(phone, safeMessage, type);
            return { simulated: true, message: safeMessage };
        }

        const payload = { messages: [{ clientWaNumber: phone, message: safeMessage, messageType: "text" }] };
        const resp = await axios.post("https://api.heltar.com/v1/messages/send", payload, {
            headers: {
                Authorization: `Bearer ${HELTAR_API_KEY}`,
                "Content-Type": "application/json"
            },
            timeout: 15000 // Reduced timeout
        });

        await trackOutgoing(phone, safeMessage, type);
        return resp.data;
    } catch (err) {
        console.error("Heltar send error:", err?.response?.data || err?.message || err);
        return null;
    }
}

async function sendLayeredResponse(phone, fullResponse, language, type = "chat") {
    const maxInitialLength = 400;
    const sentences = fullResponse.split(/[.!?ред]/).filter(s => s.trim().length > 0);
    
    if (fullResponse.length <= maxInitialLength) {
        await sendViaHeltar(phone, fullResponse, type);
        return;
    }
    
    let initialResponse = '';
    let charCount = 0;
    
    for (let i = 0; i < Math.min(sentences.length, 3); i++) {
        const sentence = sentences[i].trim() + (language === "Hindi" ? 'ред ' : '. ');
        if (charCount + sentence.length <= maxInitialLength) {
            initialResponse += sentence;
            charCount += sentence.length;
        } else {
            break;
        }
    }
    
    const prompt = language === "Hindi" 
        ? "\n\n*'More' рдЯрд╛рдЗрдк рдХрд░реЗрдВ рдкреВрд░рд╛ рдЬрд╡рд╛рдм рдкрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП* ЁЯУЦ"
        : "\n\n*Type 'More' to read the complete response* ЁЯУЦ";
    
    initialResponse += prompt;
    const remainingResponse = sentences.slice(initialResponse.split(/[.!?ред]/).length - 1).join('. ');
    
    await sendViaHeltar(phone, initialResponse, type);
    
    if (remainingResponse.trim().length > 0) {
        await updateUserState(phone, { 
            pending_followup: remainingResponse,
            followup_type: type
        });
    }
}

/* ---------------- Context Building ---------------- */
function buildContextSummary(messages, language) {
    if (!messages || messages.length === 0) {
        return language === "Hindi" ? "рдХреЛрдИ рдкрд┐рдЫрд▓рд╛ рд╕рдВрджрд░реНрдн рдирд╣реАрдВ" : "No previous context";
    }
    
    const userMessages = messages.filter(msg => msg.role === 'user').slice(-2);
    const botMessages = messages.filter(msg => msg.role === 'assistant').slice(-1);
    
    let summary = "";
    
    if (language === "Hindi") {
        summary = "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдиреЗ рдкрд╣рд▓реЗ рдЪрд░реНрдЪрд╛ рдХреА: ";
        userMessages.forEach(msg => {
            summary += `"${msg.content.substring(0, 50)}...", `;
        });
        if (botMessages.length > 0) {
            summary += `рдореИрдВрдиреЗ рдЬрд╡рд╛рдм рджрд┐рдпрд╛: "${botMessages[0].content.substring(0, 30)}..."`;
        }
    } else {
        summary = "User previously discussed: ";
        userMessages.forEach(msg => {
            summary += `"${msg.content.substring(0, 50)}...", `;
        });
        if (botMessages.length > 0) {
            summary += `I responded: "${botMessages[0].content.substring(0, 30)}..."`;
        }
    }
    
    return summary;
}

/* ---------------- Intent Classification ---------------- */
function isFollowUpToPreviousDeepQuestion(currentText, user) {
    if (user.last_message_role !== 'assistant') return false;
    const lastBotMessage = user.last_message || '';
    const wasDeepExchange = 
        isEmotionalExpression(currentText) || 
        isDeepQuestion(currentText) ||
        lastBotMessage.includes('?') ||
        lastBotMessage.length > 100;
    return wasDeepExchange;
}

function isGreetingQuery(text) {
    if (!text || typeof text !== "string") return false;
    const lowerText = text.toLowerCase().trim();
    
    const englishGreetings = ['hi', 'hello', 'hey', 'hii', 'hiya', 'good morning', 'good afternoon', 'good evening'];
    if (englishGreetings.includes(lowerText)) return true;
    
    const hindiGreetings = ['namaste', 'namaskar', 'pranam', 'radhe radhe'];
    if (hindiGreetings.includes(lowerText)) return true;
    
    const greetingRegex = /\b(hi|hello|hey|how are you|what's up|kaise ho|kaise hain aap|namaste|hare krishna)\b/i;
    return greetingRegex.test(lowerText);
}

function isCapabilitiesQuery(text) {
    const lowerText = text.toLowerCase();
    const capabilitiesRegex = /\b(what can you do|what are your capabilities|tell me about yourself|who are you|can i get more info|give me info|what do you do|more info|info about|introduce yourself|what is this|how does this work)\b/i;
    return capabilitiesRegex.test(lowerText);
}

function isEmotionalExpression(text) {
    const lowerText = text.toLowerCase();
    const emotionalPatterns = [
        /\b(stress|stressed|stressing|anxious|anxiety|tension|overwhelmed|pressure|worried|worrying)\b/i,
        /\b(i am in stress|i feel stressed|i'm stressed|i have stress|feeling stressed|under stress)\b/i,
        /\b(рдкрд░реЗрд╢рд╛рди|рддрдирд╛рд╡|рдЪрд┐рдВрддрд╛|рдШрдмрд░рд╛рд╣рдЯ|рджрдмрд╛рд╡|рдЙрд▓рдЭрди|рдорди рдкрд░реЗрд╢рд╛рди|рджрд┐рд▓ рдкрд░реЗрд╢рд╛рди|рдорди рднрд╛рд░реА)\b/,
        /\b(sad|sadness|depressed|depression|unhappy|miserable|hopeless|down|low|sorrow|lonely)\b/i,
        /\b(i am sad|i feel sad|i'm sad|feeling down|feeling low|feeling lonely)\b/i,
        /\b(рджреБрдЦреА|рдЙрджрд╛рд╕|рдирд┐рд░рд╛рд╢|рд╣рддрд╛рд╢|рджреБрдЦ|рдЙрджрд╛рд╕реА|рдЕрдХреЗрд▓рд╛|рдЕрдХреЗрд▓рд╛рдкрди|рддрдиреНрд╣рд╛рдИ|рдорди рдЙрджрд╛рд╕|рджрд┐рд▓ рдЯреВрдЯрд╛)\b/,
        /\b(my life|married life|relationship|husband|wife|family|job|work|career).*(problem|issue|difficult|hard|trouble|disturb|bad)\b/i,
        /\b(рдЬреАрд╡рди|рд╢рд╛рджреА|рд░рд┐рд╢реНрддрд╛|рдкрддрд┐|рдкрддреНрдиреА|рдкрд░рд┐рд╡рд╛рд░|рдиреМрдХрд░реА|рдХрд╛рдо).*(рд╕рдорд╕реНрдпрд╛|рдкрд░реЗрд╢рд╛рдиреА|рдореБрд╢реНрдХрд┐рд▓|рдмреБрд░рд╛|рдЦрд░рд╛рдм)\b/,
        /\b(not good|not well|feeling bad|going through|facing problem|having issue|i am struggling)\b/i,
        /\b(i can't handle|i can't cope|it's too much|too much pressure)\b/i,
        /\b(рдЕрдЪреНрдЫрд╛ рдирд╣реАрдВ|рдареАрдХ рдирд╣реАрдВ|рдмреБрд░рд╛ рд▓рдЧ|рдореБрд╢реНрдХрд┐рд▓ рд╣реЛ|рдкрд░реЗрд╢рд╛рдиреА рд╣реЛ|рд╕рдВрдШрд░реНрд╖ рдХрд░|рдореБрд╢реНрдХрд┐рд▓ рдореЗрдВ|рдкрд░реЗрд╢рд╛рдиреА рдореЗрдВ)\b/,
        /\b(рдорди рднрд╛рд░реА|рджрд┐рд▓ рдЯреВрдЯ|рдЯреЗрдВрд╢рди|рдлрд┐рдХреНрд░|рдЪрд┐рдВрддрд┐рдд|рдШрдмрд░рд╛рдпрд╛|рдирд┐рд░рд╛рд╢рд╛рдЬрдирдХ|рддрдВрдЧ рдЖ рдЧрдпрд╛|рд╣рд╛рд░ рдорд╛рди рд▓реА)\b/,
        /\b(рдореЗрд░рд╛ рдорди|рдореЗрд░рд╛ рджрд┐рд▓).*(рдкрд░реЗрд╢рд╛рди|рджреБрдЦреА|рдЙрджрд╛рд╕|рднрд╛рд░реА|рдЯреВрдЯ|рдмреЗрдЪреИрди)\b/,
        /\b(confused|lost|uncertain|don't know|what to do|which way|рдХрдВрдлреНрдпреВрдЬ|рдЙрд▓рдЭрди|рдкрддрд╛ рдирд╣реАрдВ|рдХреНрдпрд╛ рдХрд░реВрдВ|рд░рд╛рд╕реНрддрд╛ рдирд╣реАрдВ)\b/i
    ];
    return emotionalPatterns.some(pattern => pattern.test(lowerText));
}

function isDeepQuestion(text) {
    const lowerText = text.toLowerCase();
    const deepQuestionPatterns = [
        /\b(is.*wrong|right.*wrong|moral|ethical|lie|cheat|steal|honest)\b/i,
        /\b(рдЧрд▓рдд|рд╕рд╣реА|рдиреИрддрд┐рдХ|рдЭреВрда|рдзреЛрдЦрд╛|рдИрдорд╛рдирджрд╛рд░)\b/,
        /\b(krishna.*say|gita.*teach|spiritual|meditation|yoga|god)\b/i,
        /\b(рдХреГрд╖реНрдг.*рдХрд╣|рдЧреАрддрд╛.*рд╕рд┐рдЦ|рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ|рдзреНрдпрд╛рди|рдпреЛрдЧ|рднрдЧрд╡рд╛рди)\b/,
        /\b(how.*start|what.*do|why.*happen|when.*know)\b/i,
        /\b(рдХреИрд╕реЗ.*рд╢реБрд░реВ|рдХреНрдпрд╛.*рдХрд░реВ|рдХреНрдпреЛрдВ.*рд╣реЛ|рдХрдм.*рдкрддрд╛)\b/,
        /\b(problem|issue|challenge|difficult|struggle|confused)\b/i,
        /\b(рд╕рдорд╕реНрдпрд╛|рдореБрд╢реНрдХрд┐рд▓|рдЪреБрдиреМрддреА|рдкрд░реЗрд╢рд╛рди|рдЙрд▓рдЭрди)\b/
    ];
    return deepQuestionPatterns.some(pattern => pattern.test(lowerText));
}

function isSmallTalk(text) {
    const lowerText = text.toLowerCase().trim();
    const seriousIndicators = [
        'lie', 'cheat', 'wrong', 'moral', 'ethical', 'steal', 'dishonest',
        'рдЭреВрда', 'рдзреЛрдЦрд╛', 'рдЧрд▓рдд', 'рдиреИрддрд┐рдХ', 'рдЪреЛрд░реА', 'рдмреЗрдИрдорд╛рди',
        'how do i', 'what should', 'why is', 'can i',
        'рдХреИрд╕реЗ', 'рдХреНрдпрд╛', 'рдХреНрдпреЛрдВ', 'рдХрд░реВрдВ'
    ];
    if (seriousIndicators.some(indicator => lowerText.includes(indicator))) return false;
    const genuineSmallTalk = [
        'thanks', 'thank you', 'ok', 'okay', 'good', 'nice', 'cool', 'great', 'awesome', 'fine', 'good job', 'well done',
        'рд╢реБрдХреНрд░рд┐рдпрд╛', 'рдзрдиреНрдпрд╡рд╛рдж', 'рдареАрдХ', 'рдЕрдЪреНрдЫрд╛', 'рдмрдврд╝рд┐рдпрд╛', 'рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛'
    ].some(pattern => lowerText === pattern);
    return genuineSmallTalk;
}

function detectEmotionAdvanced(text) {
    const lowerText = text.toLowerCase();
    let emotion = null;
    let confidence = 0;
    const emotionKeywords = {
        moral_dilemma: { keywords: ['lie', 'cheat', 'wrong', 'moral', 'ethical', 'steal', 'dishonest', 'рдЭреВрда', 'рдзреЛрдЦрд╛', 'рдЧрд▓рдд', 'рдиреИрддрд┐рдХ'], weight: 1.3 },
        purpose: { keywords: ['purpose', 'meaning', 'why am i here', 'what is my life', 'reason to live', 'рдЙрджреНрджреЗрд╢реНрдп', 'рдордХрд╕рдж', 'рдЬреАрд╡рди рдХрд╛ рдорддрд▓рдм'], weight: 1.2 },
        stressed: { keywords: ['stress', 'stressed', 'stressing', 'anxious', 'anxiety', 'tension', 'overwhelmed', 'worried', 'worrying', 'рдкрд░реЗрд╢рд╛рди', 'рддрдирд╛рд╡', 'рдЪрд┐рдВрддрд╛'], weight: 1.0 },
        sadness: { keywords: ['sad', 'depressed', 'unhappy', 'hopeless', 'sorrow', 'lonely', 'рджреБрдЦреА', 'рдЙрджрд╛рд╕', 'рдирд┐рд░рд╛рд╢', 'рд╣рддрд╛рд╢', 'рдЕрдХреЗрд▓рд╛'], weight: 1.0 },
        anger: { keywords: ['angry', 'anger', 'frustrated', 'irritated', 'рдХреНрд░реЛрдз', 'рдЧреБрд╕реНрд╕рд╛', 'рдирд╛рд░рд╛рдЬ'], weight: 1.0 }
    };
    const iAmPatterns = [
        { pattern: /\b(lie|cheat|wrong|moral|ethical|dishonest|рдЭреВрда|рдзреЛрдЦрд╛|рдЧрд▓рдд)\b/i, emotion: 'moral_dilemma', weight: 1.5 },
        { pattern: /\b(krishna.*deception|krishna.*cheat|рдХреГрд╖реНрдг.*рдЫрд▓)\b/i, emotion: 'moral_dilemma', weight: 1.5 },
        { pattern: /\b(fear|afraid|scared|рдбрд░|рдбрд░ рд▓рдЧ)\b/i, emotion: 'stressed', weight: 1.3 },
        { pattern: /\b(sad|depressed|unhappy|рджреБрдЦреА|рдЙрджрд╛рд╕)\b/i, emotion: 'sadness', weight: 1.2 }
    ];
    for (const situation of iAmPatterns) {
        if (situation.pattern.test(lowerText)) {
            emotion = situation.emotion;
            confidence = situation.weight;
            break;
        }
    }
    if (!emotion) {
        for (const [emotionType, data] of Object.entries(emotionKeywords)) {
            for (const keyword of data.keywords) {
                if (lowerText.includes(keyword)) {
                    if (data.weight > confidence) {
                        emotion = emotionType;
                        confidence = data.weight;
                    }
                    break;
                }
            }
        }
    }
    return confidence > 0.3 ? { emotion, confidence } : null;
}

function detectUserSituation(text) {
  const lowerText = text.toLowerCase();
  const situations = {
    moral: /(lie|cheat|wrong|moral|ethical|steal|dishonest|рдЭреВрда|рдзреЛрдЦрд╛|рдЧрд▓рдд|рдиреИрддрд┐рдХ)/.test(lowerText),
    work: /(job|work|office|career|boss|colleague|рдиреМрдХрд░реА|рдХрд╛рдо|рдХрд╛рд░реНрдпрд╛рд▓рдп|рд╕рд╣рдХрд░реНрдореА)/.test(lowerText),
    relationships: /(relationship|husband|wife|family|friend|partner|love|рдкрддрд┐|рдкрддреНрдиреА|рдкрд░рд┐рд╡рд╛рд░|рджреЛрд╕реНрдд|рдкреНрд░реЗрдо)/.test(lowerText),
    health: /(health|sick|pain|ill|hospital|doctor|рд╕реНрд╡рд╛рд╕реНрдереНрдп|рдмреАрдорд╛рд░|рджрд░реНрдж|рддрдмреАрдпрдд|рдбреЙрдХреНрдЯрд░)/.test(lowerText),
    studies: /(study|exam|student|school|college|education|рдкрдврд╝рд╛рдИ|рдкрд░реАрдХреНрд╖рд╛|рд╡рд┐рджреНрдпрд╛рд░реНрдереА|рд╢рд┐рдХреНрд╖рд╛)/.test(lowerText),
    spiritual: /(god|prayer|meditation|yoga|spiritual|рднрдЧрд╡рд╛рди|рдкреНрд░рд╛рд░реНрдердирд╛|рдзреНрдпрд╛рди|рдпреЛрдЧ|рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ)/.test(lowerText)
  };
  return Object.keys(situations).find(situation => situations[situation]) || 'general';
}

/* ---------------- Enhanced AI Response System ---------------- */
async function getCachedAIResponse(phone, text, language, context) {
    const cacheKey = `${phone}:${text.substring(0, 50)}:${language}`;
    
    if (responseCache.has(cacheKey)) {
        console.log("тЬЕ Using cached response");
        return responseCache.get(cacheKey);
    }
    
    const response = await getEnhancedAIResponseWithRetry(phone, text, language, context);
    
    responseCache.set(cacheKey, response);
    setTimeout(() => responseCache.delete(cacheKey), 300000);
    
    return response;
}

async function getEnhancedAIResponseWithRetry(phone, text, language, context, retries = 2) {
    for (let attempt = 0; attempt <= retries; attempt++) {
        try {
            return await getEnhancedAIResponse(phone, text, language, context);
        } catch (error) {
            console.error(`тЭМ OpenAI attempt ${attempt + 1} failed:`, error.message);
            
            if (attempt === retries) {
                console.log("ЁЯФД All retries exhausted, using fallback");
                return await getContextualFallback(phone, text, language, context);
            }
            
            await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt)));
        }
    }
}

async function getEnhancedAIResponse(phone, text, language, conversationContext = {}) {
  try {
    if (!OPENAI_KEY || OPENAI_KEY === '') {
      console.log("ЁЯФД No OpenAI key, using fallback response");
      return await getContextualFallback(phone, text, language, conversationContext);
    }

    console.log("ЁЯдЦ Using Enhanced OpenAI for nuanced response...");

    const recentHistory = conversationContext.previousMessages?.slice(-3) || [];
    const contextSummary = buildContextSummary(recentHistory, language);
    
    const systemPrompt = ENHANCED_SYSTEM_PROMPT[language] || ENHANCED_SYSTEM_PROMPT.english;
    
    const userPrompt = language === "Hindi" 
      ? `рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛ рд╡рд░реНрддрдорд╛рди рд╕рдВрджреЗрд╢: "${text}"

рдкрд┐рдЫрд▓рд╛ рд╕рдВрджрд░реНрдн: ${contextSummary}

рднрд╛рд╡рдирд╛: ${conversationContext.emotion || 'рд╕рд╛рдорд╛рдиреНрдп'}
рд╕реНрдерд┐рддрд┐: ${conversationContext.situation || 'рд╕рд╛рдорд╛рдиреНрдп'}

ЁЯЪл **рдХреГрдкрдпрд╛ рдзреНрдпрд╛рди рджреЗрдВ: рдЙрддреНрддрд░ рдХрднреА рднреА рдЕрдзреВрд░рд╛ рди рдЫреЛрдбрд╝реЗрдВред рд╣рдореЗрд╢рд╛ рдкреВрд░реНрдг рд╡рд╛рдХреНрдпреЛрдВ рдореЗрдВ рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВред**

рдХреГрдкрдпрд╛ рдПрдХ рд╕рдВрдкреВрд░реНрдг, рд╕реБрд╕рдВрдЧрдд рдЙрддреНрддрд░ рджреЗрдВ рдЬреЛ:
1. 10-15 рд╡рд╛рдХреНрдпреЛрдВ рдореЗрдВ рдкреВрд░рд╛ рд╣реЛ (рдХрднреА рднреА рдЕрдзреВрд░рд╛ рди рдЫреЛрдбрд╝реЗрдВ)
2. рдПрдХ рд╕реНрдкрд╖реНрдЯ рд╕рдорд╛рдкрди рдХреЗ рд╕рд╛рде рд╕рдорд╛рдкреНрдд рд╣реЛ  
3. 2-3 рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕реБрдЭрд╛рд╡ рджреЗ
4. рдПрдХ рд╡рд┐рдЪрд╛рд░рдгреАрдп рдкреНрд░рд╢реНрди рдХреЗ рд╕рд╛рде рд╕рдорд╛рдкреНрдд рд╣реЛ

рдЙрддреНрддрд░ рдХрднреА рднреА рдЕрдзреВрд░рд╛ рди рдЫреЛрдбрд╝реЗрдВ - рдкреВрд░реНрдг рд╡рд╛рдХреНрдпреЛрдВ рдореЗрдВ рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВред`
      : `User's current message: "${text}"

Previous context: ${contextSummary}

Emotion: ${conversationContext.emotion || 'general'}
Situation: ${conversationContext.situation || 'general'}

ЁЯЪл **IMPORTANT: NEVER leave the response incomplete. Always end with complete sentences.**

Please provide a complete, coherent response that:
1. Is 10-15 sentences long (NEVER leave incomplete)
2. Ends with a clear conclusion
3. Provides 2-3 practical suggestions
4. Ends with a thought-provoking question

NEVER leave the response incomplete - always end with complete sentences.`;

    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];

    console.log("ЁЯУд Sending to OpenAI with enhanced context");

    const body = { 
      model: OPENAI_MODEL, 
      messages, 
      max_tokens: 1200,
      temperature: 0.8,
      top_p: 0.9
    };

    const resp = await axios.post("https://api.openai.com/v1/chat/completions", body, {
      headers: { 
        Authorization: `Bearer ${OPENAI_KEY}`, 
        "Content-Type": "application/json" 
      },
      timeout: 25000 // Reduced timeout
    });

    const aiResponse = resp.data?.choices?.[0]?.message?.content;
    
    if (aiResponse && aiResponse.trim().length > 10) {
      console.log("тЬЕ Enhanced OpenAI response received");
      
      const completeResponse = ensureCompleteStructuredResponse(aiResponse, language);
      
      await sendLayeredResponse(phone, completeResponse, language, "enhanced_ai_response");
      
      const user = await getUserState(phone);
      const updatedHistory = [...(user.chat_history || []), { 
        role: 'assistant', 
        content: completeResponse 
      }];
      await updateUserState(phone, { 
        chat_history: updatedHistory,
        last_message: completeResponse,
        last_message_role: 'assistant'
      });
      
      return;
    } else {
      throw new Error("Empty or invalid response from OpenAI");
    }

  } catch (err) {
    console.error("тЭМ Enhanced AI response error:", err.message);
    console.log("ЁЯФД Falling back to contextual response due to OpenAI error");
    await getContextualFallback(phone, text, language, conversationContext);
  }
}

function ensureCompleteStructuredResponse(response, language) {
    const trimmed = response.trim();
    const isTruncated = 
        (!/[.!?ред]\s*$/.test(trimmed)) ||
        (/\s[a-zA-ZрдЕ-рдЬ]{1,5}$/.test(trimmed)) ||
        (trimmed.split(/[.!?ред]/).length < 6);
    
    if (isTruncated) {
        console.log("тЪая╕П Detected truncated response, adding completion");
        const completions = language === "Hindi" 
            ? [
                "\n\nрдЗрд╕ рд╕реНрдерд┐рддрд┐ рдореЗрдВ рдЖрдкрдХреЗ рд▓рд┐рдП рдХреБрдЫ рд╕рдВрд░рдЪрд┐рдд рдХрджрдо:\n1. рдЖрдЬ рд░рд╛рдд рд╢рд╛рдВрдд рдмреИрдардХрд░ рдЕрдкрдиреА рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рд▓рд┐рдЦреЗрдВ\n2. рдХрд▓ рд╕реБрдмрд╣ рдПрдХ рднрд░реЛрд╕реЗрдордВрдж рд╕рд▓рд╛рд╣рдХрд╛рд░ рд╕реЗ рдмрд╛рдд рдХрд░рдиреЗ рдХрд╛ рд╕рдордп рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░реЗрдВ\n3. рд╕рдкреНрддрд╛рд╣ рдХреЗ рдЕрдВрдд рддрдХ рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ рдХрджрдо рдЙрдард╛рдиреЗ рдХрд╛ рд▓рдХреНрд╖реНрдп рд░рдЦреЗрдВ\n\nрдЖрдк рдЗрдирдореЗрдВ рд╕реЗ рдХрд┐рд╕ рдХрджрдо рдкрд░ рдкрд╣рд▓реЗ рдХрд╛рд░реНрдп рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
                "\n\nрдЖрдЧреЗ рдмрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП рддреАрди рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕реБрдЭрд╛рд╡:\nтАв рдЗрд╕ рд╕рдкреНрддрд╛рд╣ рдХреЗ рд▓рд┐рдП рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ рдирд┐рд░реНрдгрдп рд▓реЗрдВ\nтАв рдЕрдкрдиреЗ рднрд╛рдИ рд╕реЗ рдкрд╣рд▓реЗ рдЧреИрд░-рд╡реНрдпрд╡рд╕рд╛рдпрд┐рдХ рд╡рд┐рд╖рдп рдкрд░ рдмрд╛рдд рдХрд░реЗрдВ\nтАв рдПрдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рдХ рд╢реНрд▓реЛрдХ рдХреЛ рджреИрдирд┐рдХ рдкрдврд╝реЗрдВ\n\nрдХреНрдпрд╛ рдЗрдирдореЗрдВ рд╕реЗ рдХреЛрдИ рдПрдХ рд╕реБрдЭрд╛рд╡ рдЖрдкрдХреЛ рд╕рд╣реА рд▓рдЧрддрд╛ рд╣реИ?"
              ]
            : [
                "\n\nHere are some structured steps for your situation:\n1. Write down your feelings tonight when you're calm\n2. Schedule time tomorrow to speak with a trusted advisor\n3. Set a goal to take one small step by week's end\n\nWhich of these steps would you like to focus on first?",
                "\n\nThree practical suggestions to move forward:\nтАв Make one small decision for this week only\nтАв Talk to your brother about non-business topics first\nтАв Read one guiding verse daily for reflection\n\nDoes any of these suggestions resonate with you?"
              ];
        return trimmed + completions[Math.floor(Math.random() * completions.length)];
    }
    
    if (!/[?я╝Я]\s*$/.test(trimmed)) {
        const questions = language === "Hindi" 
            ? ["\n\nрдЗрд╕ рдкрд░ рдЖрдкрдХреА рдХреНрдпрд╛ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╣реИ?", "\n\nрдЖрдк рдХреНрдпрд╛ рд╕реЛрдЪрддреЗ рд╣реИрдВ?", "\n\nрдХреНрдпрд╛ рдпрд╣ рд╕рд╣реА рджрд┐рд╢рд╛ рдореЗрдВ рд▓рдЧрддрд╛ рд╣реИ?"]
            : ["\n\nWhat are your thoughts on this?", "\n\nHow does this land with you?", "\n\nDoes this feel like the right direction?"];
        return trimmed + questions[Math.floor(Math.random() * questions.length)];
    }
    
    return trimmed;
}

async function getContextualFallback(phone, text, language, context) {
  console.log("ЁЯФД Using contextual fallback");
  const emotion = detectEmotionAdvanced(text)?.emotion || 'moral_dilemma';
  const wisdom = ENHANCED_GITA_WISDOM[emotion] || ENHANCED_GITA_WISDOM.moral_dilemma;
  const responses = language === "Hindi" ? wisdom.teachings.hindi : wisdom.teachings.english;
  const selected = responses[Math.floor(Math.random() * responses.length)];
  await sendLayeredResponse(phone, selected, language, "contextual_fallback");
}

/* ---------------- Menu Choice Handler ---------------- */
async function handleEnhancedMenuChoice(phone, choice, language, user) {
  console.log(`ЁЯУЭ Menu choice received: ${choice}, language: ${language}`);
  
  const choices = {
    "1": {
      hindi: {
        prompt: "ЁЯМЕ рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП рд╕рд╣реА рдорд╛рд░реНрдЧрджрд░реНрд╢рдиред рдХреГрдкрдпрд╛ рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдк рдХрд┐рд╕ рдкрд░рд┐рд╕реНрдерд┐рддрд┐ рдореЗрдВ рд╣реИрдВ?",
        action: "immediate_guidance"
      },
      english: {
        prompt: "ЁЯМЕ Right guidance for your current challenge. Please briefly describe your situation?",
        action: "immediate_guidance"
      }
    },
    "2": {
      hindi: {
        prompt: async () => {
          const wisdom = await getDailyWisdom("Hindi");
          return wisdom;
        },
        action: "daily_wisdom"
      },
      english: {
        prompt: async () => {
          const wisdom = await getDailyWisdom("English");
          return wisdom;
        },
        action: "daily_wisdom"
      }
    },
    "3": {
      hindi: {
        prompt: "ЁЯТм рдореИрдВ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ? рдореИрдВ рдЧреАрддрд╛ рдХреА рд╢рд┐рдХреНрд╖рд╛рдУрдВ рдХреЗ through рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛ред",
        action: "conversation"
      },
      english: {
        prompt: "ЁЯТм I'm here to listen. Please share how you're feeling? I'll help you through the teachings of Gita.",
        action: "conversation"
      }
    },
    "4": {
      hindi: {
        prompt: "ЁЯОУ рдЧреАрддрд╛ рдЬреНрдЮрд╛рди: рднрдЧрд╡рдж рдЧреАрддрд╛ 18 рдЕрдзреНрдпрд╛рдпреЛрдВ рдореЗрдВ рд╡рд┐рднрд╛рдЬрд┐рдд рд╣реИ, рдЬреЛ рдЬреАрд╡рди рдХреЗ рд╡рд┐рднрд┐рдиреНрди рдкрд╣рд▓реБрдУрдВ рдкрд░ рдкреНрд░рдХрд╛рд╢ рдбрд╛рд▓рддреА рд╣реИред рдЖрдк рдХрд┐рд╕ рд╡рд┐рд╖рдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
        action: "knowledge_seeker"
      },
      english: {
        prompt: "ЁЯОУ Gita Knowledge: The Bhagavad Gita is divided into 18 chapters, each illuminating different aspects of life. What specific topic would you like to know about?",
        action: "knowledge_seeker"
      }
    },
    "5": {
      hindi: {
        prompt: "ЁЯМИ рд╕рдВрдкреВрд░реНрдг рдорд╛рд░реНрдЧрджрд░реНрд╢рди: рдЖрдЗрдП рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐, рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдЬрд┐рдЬреНрдЮрд╛рд╕рд╛, рдФрд░ рджреИрдирд┐рдХ рдЪреБрдиреМрддрд┐рдпреЛрдВ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░реЗрдВред рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ рдЖрдк рдХрд╣рд╛рдБ рд╕реЗ рд╢реБрд░реВ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
        action: "comprehensive_guidance"
      },
      english: {
        prompt: "ЁЯМИ Complete Guidance: Let's discuss your current situation, spiritual curiosity, and daily challenges. Please tell me where you'd like to start?",
        action: "comprehensive_guidance"
      }
    }
  };

  // Handle "all options" or multiple choices
  if (choice.includes(',') || choice === '1234' || choice === '12345' || choice.toLowerCase().includes('all')) {
    const comprehensiveMessage = language === "Hindi" 
        ? "ЁЯМИ рдЖрдкрдиреЗ рд╕рднреА рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗ рд╣реИрдВ! рдЖрдЗрдП рд╕рдВрдкреВрд░реНрдг рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХреЗ рд╕рд╛рде рд╢реБрд░реВ рдХрд░реЗрдВред рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ:\n\nтАв рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рдЪреБрдиреМрддреА рдХреНрдпрд╛ рд╣реИ?\nтАв рдЖрдк рдХрд┐рд╕ рд╡рд┐рд╖рдп рдореЗрдВ рдЬреНрдЮрд╛рди рдЪрд╛рд╣рддреЗ рд╣реИрдВ?\nтАв рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?\n\nрдЖрдк рдХрд╣рд╛рдБ рд╕реЗ рд╢реБрд░реВ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ? ЁЯЩП"
        : "ЁЯМИ You've chosen all options! Let's start with comprehensive guidance. Please tell me:\n\nтАв What is your current challenge?\nтАв What knowledge are you seeking?\nтАв How are you feeling?\n\nWhere would you like to start? ЁЯЩП";
    
    await sendViaHeltar(phone, comprehensiveMessage, "comprehensive_start");
    await updateUserState(phone, { 
        conversation_stage: "comprehensive_guidance",
        last_menu_choice: "all_options"
    });
    return;
  }

  const selected = choices[choice];
  if (!selected) {
    // If not a menu choice, treat as direct conversation
    console.log(`ЁЯФД Treating as direct conversation instead of menu choice`);
    await updateUserState(phone, { 
        conversation_stage: "chatting"
    });
    
    const conversationContext = {
        stage: "chatting",
        emotion: detectEmotionAdvanced(choice)?.emotion,
        situation: detectUserSituation(choice),
        previousMessages: user.chat_history?.slice(-4) || [],
        language: language,
        isFollowUp: false
    };
    
    await getCachedAIResponse(phone, choice, language, conversationContext);
    return;
  }

  try {
    let promptContent;
    const selectedLang = selected[language] || selected.english;
    
    if (typeof selectedLang.prompt === 'function') {
      promptContent = await selectedLang.prompt();
    } else {
      promptContent = selectedLang.prompt;
    }
    
    console.log(`тЬЕ Sending menu response for choice ${choice}`);
    await sendViaHeltar(phone, promptContent, `menu_${selectedLang.action}`);
    await updateUserState(phone, { 
      conversation_stage: selectedLang.action,
      last_menu_choice: choice,
      last_menu_shown: new Date().toISOString()
    });
    
  } catch (error) {
    console.error(`тЭМ Menu choice error for ${choice}:`, error);
    const fallbackMessage = language === "Hindi" 
      ? "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рдЖрдИ рд╣реИред рдХреГрдкрдпрд╛ рд╕реАрдзреЗ рдЕрдкрдиреА рдмрд╛рдд рд▓рд┐рдЦреЗрдВред"
      : "Sorry, there was a technical issue. Please type your message directly.";
    await sendViaHeltar(phone, fallbackMessage, "menu_error");
  }
}

/* ---------------- Daily Wisdom System ---------------- */
async function getDailyWisdom(language) {
  try {
    const now = new Date();
    const start = new Date(now.getFullYear(), 0, 0);
    const diff = now - start;
    const oneDay = 1000 * 60 * 60 * 24;
    const dayOfYear = Math.floor(diff / oneDay);
    
    const countResult = await dbPool.query("SELECT COUNT(*) as total FROM lessons");
    const totalLessons = parseInt(countResult.rows[0].total) || 5;
    const lessonNumber = (dayOfYear % totalLessons) + 1;
    
    const result = await dbPool.query(
      `SELECT lesson_number, verse, translation, commentary, reflection_question 
       FROM lessons WHERE lesson_number = $1`,
      [lessonNumber]
    );
    
    if (result.rows.length === 0) {
      return getFallbackDailyWisdom(language, dayOfYear);
    }
    
    const lesson = result.rows[0];
    return formatDailyWisdom(lesson, language, dayOfYear);
    
  } catch (error) {
    console.error("Daily wisdom error:", error);
    return getFallbackDailyWisdom(language, 1);
  }
}

function formatDailyWisdom(lesson, language, dayOfYear) {
  if (language === "Hindi") {
    return `ЁЯУЦ *рдЖрдЬ рдХреА рдЧреАрддрд╛ рд╢рд┐рдХреНрд╖рд╛ (рджрд┐рди ${dayOfYear})*

ЁЯОп *рд╢реНрд▓реЛрдХ ${lesson.lesson_number}:*
"${lesson.verse}"

ЁЯТл *рдЕрд░реНрде:*
${lesson.translation}

ЁЯМЕ *рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЕрдиреБрдкреНрд░рдпреЛрдЧ:*
${lesson.commentary}

ЁЯдФ *рдЖрдЬ рдХрд╛ рдЕрднреНрдпрд╛рд╕:*
${lesson.reflection_question}

тЬи *рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдпрдпреЛрдЬрдирд╛:*
1. рдЗрд╕ рд╢реНрд▓реЛрдХ рдХреЛ 3 рдмрд╛рд░ рдкрдврд╝реЗрдВ
2. рджрд┐рди рдореЗрдВ 2 рдмрд╛рд░ рдЗрд╕рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ
3. рд╢рд╛рдо рдХреЛ рдкрд░рд┐рдгрд╛рдо рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ

рдХреНрдпрд╛ рдЖрдк рдЖрдЬ рдЗрд╕ рдЕрднреНрдпрд╛рд╕ рдХреЛ рдХрд░рдиреЗ рдХрд╛ рд╕рдВрдХрд▓реНрдк рд▓реЗрдВрдЧреЗ?`;
  } else {
    return `ЁЯУЦ *Today's Gita Wisdom (Day ${dayOfYear})*

ЁЯОп *Verse ${lesson.lesson_number}:*
"${lesson.verse}"

ЁЯТл *Translation:*
${lesson.translation}

ЁЯМЕ *Practical Application:*
${lesson.commentary}

ЁЯдФ *Today's Practice:*
${lesson.reflection_question}

тЬи *Immediate Action Plan:*
1. Read this verse 3 times
2. Reflect on it twice today
3. Share insights tonight

Will you commit to this practice today?`;
  }
}

function getFallbackDailyWisdom(language, dayOfYear) {
  const fallbackLesson = {
    lesson_number: 2,
    verse: "рдпреЛрдЧрд╕реНрдердГ рдХреБрд░реБ рдХрд░реНрдорд╛рдгрд┐ рд╕рдЩреНрдЧрдВ рддреНрдпрдХреНрддреНрд╡рд╛ рдзрдирдЮреНрдЬрдпред",
    translation: "Perform your duty equipoised, O Arjuna, abandoning all attachment to success or failure.",
    commentary: "Practice working with balanced mind amidst challenges.",
    reflection_question: "How can I maintain balance in my work today?"
  };
  return formatDailyWisdom(fallbackLesson, language, dayOfYear);
}

/* ---------------- Simple Handlers ---------------- */
async function handleLanguageSwitch(phone, newLanguage) {
    const confirmationMessage = newLanguage === 'English' 
        ? "Sure! I'll speak in English. Remember, I provide Gita-based guidance with practical steps. How can I help you today? ЁЯШК" 
        : "рдЬрд░реВрд░! рдореИрдВ рд╣рд┐рдВрджреА рдореЗрдВ рдмрд╛рдд рдХрд░реВрдВрдЧрд╛ред рдпрд╛рдж рд░рдЦреЗрдВ, рдореИрдВ рдЧреАрддрд╛-рдЖрдзрд╛рд░рд┐рдд рдорд╛рд░реНрдЧрджрд░реНрд╢рди рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдХрджрдореЛрдВ рдХреЗ рд╕рд╛рде рджреЗрддрд╛ рд╣реВрдБред рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? ЁЯШК";
    
    await sendViaHeltar(phone, confirmationMessage, "language_switch");
}

async function handleSmallTalk(phone, text, language) {
    let response;
    const lower = text.toLowerCase();
    if (language === "Hindi") {
        if (lower.includes('thank') || lower.includes('рд╢реБрдХреНрд░рд┐рдпрд╛')) {
            response = "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯЩП рдХреНрдпрд╛ рдЖрдк рдФрд░ рдХреБрдЫ рдЪрд╛рд╣реЗрдВрдЧреЗ рдпрд╛ рдХрд┐рд╕реА рдФрд░ рд╡рд┐рд╖рдп рдкрд░ рдмрд╛рдд рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?";
        } else if (lower.includes('bye')) {
            response = "рдзрдиреНрдпрд╡рд╛рдж! рдЬрдм рднреА рдЬрд░реВрд░рдд рд╣реЛ, рдореИрдВ рдпрд╣рд╛рдБ рд╣реВрдБред рд╣рд░реЗ рдХреГрд╖реНрдг! ЁЯМЯ рдХреНрдпрд╛ рдЖрдк рдХрд▓ рдлрд┐рд░ рдмрд╛рдд рдХрд░реЗрдВрдЧреЗ?";
        } else {
            response = "рдареАрдХ рд╣реИ! ЁЯШК рдЖрдк рдЖрдЧреЗ рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ? рдХреНрдпрд╛ рдХреЛрдИ рдФрд░ рдкреНрд░рд╢реНрди рд╣реИ рдЖрдкрдХреЗ рдорди рдореЗрдВ?";
        }
    } else {
        if (lower.includes('thank')) {
            response = "You're welcome! ЁЯЩП Is there anything else you need or would you like to discuss another topic?";
        } else if (lower.includes('bye')) {
            response = "Thank you! I'm here whenever you need me. Hare Krishna! ЁЯМЯ Will we talk again tomorrow?";
        } else {
            response = "Okay! ЁЯШК What would you like to know more about? Do you have any other questions in mind?";
        }
    }
    await sendViaHeltar(phone, response, "small_talk");
}

function parseWebhookMessage(body) {
  console.log("ЁЯУи Raw webhook body:", JSON.stringify(body).substring(0, 200));
  if (!body) return null;
  if (body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0]) {
    const msg = body.entry[0].changes[0].value.messages[0];
    console.log("ЁЯУ▒ Heltar format message:", msg);
    return msg;
  }
  if (body?.messages?.[0]) {
    console.log("ЁЯУ▒ Direct messages format:", body.messages[0]);
    return body.messages[0];
  }
  if (body?.from && body?.text) {
    console.log("ЁЯУ▒ Simple format message:", body);
    return body;
  }
  if (body?.object === 'whatsapp_business_account') {
    const entry = body.entry?.[0];
    const changes = entry?.changes?.[0];
    const value = changes?.value;
    const message = value?.messages?.[0];
    if (message) {
      console.log("ЁЯУ▒ Meta WhatsApp format:", message);
      return message;
    }
  }
  console.log("тЭУ Unknown webhook format");
  return null;
}

/* ---------------- ЁЯЪи CRITICAL FIX: Main Webhook Handler ---------------- */
app.post("/webhook", async (req, res) => {
  try {
    res.status(200).send("OK");
    const body = req.body || {};
    const msg = parseWebhookMessage(body);
    
    if (!msg) {
      console.log("тЪая╕П Ignoring non-message webhook event.");
      return;
    }

    const phone = msg?.from || msg?.clientWaNumber;
    const rawText = msg?.text?.body || msg?.button?.payload || "";
    const text = String(rawText || "").trim();
    
    if (!phone || text.length === 0) {
      console.warn("тЪая╕П Webhook missing phone/text.");
      return;
    }

    console.log(`ЁЯУй Incoming from ${phone}: "${text}"`);
    await trackIncoming(phone, text);

    // Get user state and determine language
    const user = await getUserState(phone);
    const languageResult = await determineUserLanguage(phone, text, user);
    let language = languageResult.language;
    const isLanguageSwitch = languageResult.isSwitch;

    console.log(`ЁЯОп Processing: language=${language}, stage=${user.conversation_stage}, is_switch=${isLanguageSwitch}`);

    // Handle "More" command for layered responses
    if (text.toLowerCase().trim() === 'more' && user.pending_followup) {
        console.log("ЁЯУЦ Sending pending follow-up response");
        await sendViaHeltar(phone, user.pending_followup, user.followup_type || "followup");
        await updateUserState(phone, { 
            pending_followup: null,
            followup_type: null
        });
        return;
    }

    // ЁЯЪи CRITICAL FIX: Handle stage continuity properly
    if (user.conversation_stage === "daily_wisdom" && text.toLowerCase().trim() !== 'more') {
        console.log(`ЁЯФД Continuing daily wisdom session`);
        
        const conversationContext = {
            stage: "daily_wisdom",
            emotion: null,
            situation: "wisdom_continuation", 
            previousMessages: user.chat_history?.slice(-4) || [],
            language: language,
            isFollowUp: true
        };
        
        await getCachedAIResponse(phone, text, language, conversationContext);
        return;
    }

    // If it's a language switch command, send confirmation and STOP processing
    if (isLanguageSwitch) {
      await handleLanguageSwitch(phone, languageResult.switchTo);
      return;
    }

    const lower = text.toLowerCase();

    // Check if this is follow-up to deep conversation
    const isFollowUp = isFollowUpToPreviousDeepQuestion(text, user);

    // Update chat history BEFORE processing
    const updatedHistory = [...(user.chat_history || []), { role: 'user', content: text }];
    await updateUserState(phone, { 
      chat_history: updatedHistory,
      last_message: text,
      last_message_role: 'user'
    });
    
    // Refresh user object with latest history for this request cycle
    user.chat_history = updatedHistory;
    user.last_message = text;
    user.last_message_role = 'user';

    // ЁЯЪи CRITICAL FIX: ALWAYS show menu for new users and greetings
    if (user.conversation_stage === "new_topic" || isGreetingQuery(lower)) {
        console.log(`тЬЕ Intent: User Greeting - Showing Menu`);
        await handleEnhancedStartupMenu(phone, language, user);
        await setupMenuAutoAdvance(phone);
        return;
    }

    // ЁЯЪи CRITICAL FIX: Handle menu choices
    if (user.conversation_stage === "awaiting_menu_choice" && /^[1-5]$/.test(text.trim())) {
        console.log(`тЬЕ Intent: Menu Choice`);
        await handleEnhancedMenuChoice(phone, text.trim(), language, user);
        return;
    }

    // ЁЯЪи CRITICAL FIX: Auto-advance from menu for substantive messages
    const stageUpdated = await updateConversationStage(phone, text, language);
    if (stageUpdated) {
        console.log(`тЬЕ Auto-advanced user from menu to chatting`);
    }

    // 3. EMOTIONAL EXPRESSIONS (Empathy first)
    const emotionDetection = detectEmotionAdvanced(text);
    const detectedEmotion = emotionDetection?.emotion;
    
    if (isEmotionalExpression(lower) || detectedEmotion) {
        console.log(`тЬЕ Intent: Emotional Expression - ${detectedEmotion}`);
        
        const conversationContext = {
            stage: user.conversation_stage,
            emotion: detectedEmotion,
            situation: detectUserSituation(text),
            previousMessages: user.chat_history?.slice(-4) || [],
            language: language,
            isFollowUp: isFollowUp
        };

        await getCachedAIResponse(phone, text, language, conversationContext);
        return;
    }

    // 4. CAPABILITIES QUERIES
    if (isCapabilitiesQuery(lower)) {
        console.log(`тЬЕ Intent: Capabilities Query`);
        const reply = language === "Hindi"
            ? "рдореИрдВ рд╕рд╛рд░рдереА AI рд╣реВрдБ, рдЖрдкрдХрд╛ рдирд┐рдЬреА рдЧреАрддрд╛ рд╕рд╛рдереА! ЁЯЩП рдореИрдВ рдЖрдкрдХреЛ рдЬреАрд╡рди рдХреА рдЪреБрдиреМрддрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рднрдЧрд╡рдж рдЧреАрддрд╛ рдХрд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реВрдБред рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕ рд╡рд┐рд╢реЗрд╖ рдореБрджреНрджреЗ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?"
            : "I'm Sarathi AI, your personal Gita companion! ЁЯЩП I provide guidance from Bhagavad Gita for life's challenges. Is there a specific issue you'd like to discuss?";
        await sendViaHeltar(phone, reply, "capabilities");
        return;
    }

    // 5. SMALL TALK
    if (isSmallTalk(lower)) {
        console.log(`тЬЕ Intent: Small Talk`);
        await handleSmallTalk(phone, text, language);
        return;
    }

    // 6. DEFAULT: ENHANCED AI RESPONSE
    console.log(`тД╣я╕П  Intent: General -> Using Enhanced AI`);
    const conversationContext = {
        stage: user.conversation_stage,
        emotion: null,
        situation: detectUserSituation(text),
        previousMessages: user.chat_history?.slice(-4) || [],
        language: language,
        isFollowUp: isFollowUp
    };
    
    await getCachedAIResponse(phone, text, language, conversationContext);

  } catch (err) {
    console.error("тЭМ Webhook error:", err?.message || err);
  }
});

/* ---------------- Health check ---------------- */
app.get("/health", (req, res) => {
  res.json({ 
    status: "ok", 
    bot: BOT_NAME, 
    timestamp: new Date().toISOString(),
    features: [
      "Enhanced Layered Responses", 
      "Response Caching", 
      "Connection Pooling", 
      "User Segmentation",
      "Chat History Pruning",
      "Retry Logic",
      "WhatsApp Optimized",
      "ЁЯЪи FIXED: Language Detection",
      "ЁЯЪи FIXED: Menu System", 
      "ЁЯЪи FIXED: Auto-Advance Logic",
      "ЁЯЪи FIXED: Stage Management",
      "Enhanced Gita Wisdom Database",
      "Daily Wisdom System",
      "Contextual Fallbacks"
    ],
    cacheSize: responseCache.size,
    databasePool: dbPool.totalCount
  });
});

/* ---------------- Start server ---------------- */
app.listen(PORT, () => {
  validateEnvVariables();
  console.log(`\nЁЯЪА ${BOT_NAME} PROPER FIXED VERSION listening on port ${PORT}`);
  console.log("тЬЕ ALL FEATURES PRESERVED + CRITICAL FIXES:");
  console.log("   ЁЯОп Language Detection Fixed - No more random switching");
  console.log("   ЁЯУЭ Full Menu System - All 5 options preserved");  
  console.log("   тП░ 3-minute auto-advance for stuck users");
  console.log("   ЁЯФД Proper stage management");
  console.log("   ЁЯТм Auto-advance on substantive messages");
  console.log("   ЁЯУЪ Enhanced Gita Wisdom Database");
  console.log("   ЁЯМЕ Daily Wisdom System");
  console.log("   ЁЯЪи FIXED: All original features preserved");
  setupDatabase().catch(console.error);
});

process.on('SIGINT', async () => {
  console.log('\nЁЯЫС Shutting down gracefully...');
  await dbPool.end();
  process.exit(0);
});
