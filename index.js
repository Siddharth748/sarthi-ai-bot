// index.js тАФ SarathiAI (COMPLETE REVIVED v4)
// This version fixes all previous bugs AND adds handling for the "рдЕрднреНрдпрд╛рд╕" button.
import dotenv from "dotenv";
dotenv.config();

import express from "express";
import axios from "axios";
import pg from "pg";

const { Pool } = pg;
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

/* ---------------- Config / env ---------------- */
const BOT_NAME = process.env.BOT_NAME || "SarathiAI";
const PORT = process.env.PORT || 8080;

const DATABASE_URL = (process.env.DATABASE_URL || "").trim();
const OPENAI_KEY = (process.env.OPENAI_API_KEY || "").trim();
const OPENAI_MODEL = (process.env.OPENAI_MODEL || "gpt-4o-mini").trim();

const HELTAR_API_KEY = (process.env.HELTAR_API_KEY || "").trim();
const HELTAR_PHONE_ID = (process.env.HELTAR_PHONE_ID || "").trim();

const MAX_REPLY_LENGTH = parseInt(process.env.MAX_REPLY_LENGTH || "350", 10) || 350;

/* ---------------- Enhanced Database Pool ---------------- */
const dbPool = new Pool({
    connectionString: DATABASE_URL,
    ssl: { rejectUnauthorized: false },
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
    maxUses: 7500,
});

/* ---------------- Response Cache ---------------- */
const responseCache = new Map();

/* =============== ЁЯЪи OPTIMIZED TEMPLATE BUTTON RESPONSE SYSTEM =============== */

const OPTIMIZED_TEMPLATE_RESPONSES = {
    // PROBLEM SOLVER TEMPLATE BUTTONS
    'work stress': {
        english: `Work pressure overwhelming? ЁЯШФ That's a heavy, draining feeling.

Krishna says in Gita 2.47: "Focus on duty, not results."

This moment will pass. Your inner strength is greater than any stress. ЁЯХЙя╕П

Let's pinpoint this: What's the *one* task weighing most heavily on you?`,

        hindi: `рдХрд╛рдо рдХрд╛ рддрдирд╛рд╡ рднрд╛рд░реА рд▓рдЧ рд░рд╣рд╛? ЁЯШФ рдпрд╣ рдПрдХ рдердХрд╛ рджреЗрдиреЗ рд╡рд╛рд▓реА рднрд╛рд╡рдирд╛ рд╣реИред

рдХреГрд╖реНрдг рдЧреАрддрд╛ 2.47 рдореЗрдВ рдХрд╣рддреЗ: "рдХрд░реНрдо рдХрд░реЛ, рдлрд▓ рдХреА рдЪрд┐рдВрддрд╛ рдордд рдХрд░реЛред"

рдпрд╣ рд╕рдордп рднреА рдмреАрдд рдЬрд╛рдПрдЧрд╛ред рдЖрдкрдХреА рдЖрдВрддрд░рд┐рдХ рд╢рдХреНрддрд┐ рддрдирд╛рд╡ рд╕реЗ рдмрдбрд╝реА рд╣реИред ЁЯХЙя╕П

рдЪрд▓рд┐рдП рдореБрджреНрджреЗ рдкрд░ рдЖрддреЗ рд╣реИрдВ: рд╡реЛ *рдХреМрди рд╕рд╛ рдПрдХ* рдХрд╛рдо рд╣реИ рдЬреЛ рд╕рдмрд╕реЗ рднрд╛рд░реА рд▓рдЧ рд░рд╣рд╛ рд╣реИ?`
    },

    'relationship issues': {
        english: `Relationship struggles hurt deeply... ЁЯТФ It can feel very isolating.

Gita teaches: See the divine in every being, even when it's hard.

Krishna's wisdom can heal connections. ЁЯМЯ

What part of this feels most painful *to you* right now?`,

        hindi: `рд░рд┐рд╢реНрддреЛрдВ рдХреА рдкрд░реЗрд╢рд╛рдирд┐рдпрд╛рдБ рдЧрд╣рд░рд╛ рджреБрдЦ рджреЗрддреА рд╣реИрдВ... ЁЯТФ рдЗрд╕рдореЗрдВ рдмрд╣реБрдд рдЕрдХреЗрд▓рд╛рдкрди рдорд╣рд╕реВрд╕ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред

рдЧреАрддрд╛ рд╕рд┐рдЦрд╛рддреА: рд╣рд░ рдкреНрд░рд╛рдгреА рдореЗрдВ рджрд┐рд╡реНрдпрддрд╛ рджреЗрдЦреЛ, рддрдм рднреА рдЬрдм рдпрд╣ рдореБрд╢реНрдХрд┐рд▓ рд╣реЛред

рдХреГрд╖реНрдг рдХрд╛ рдЬреНрдЮрд╛рди рдЖрдкрдХреЗ рдЬреБрдбрд╝рд╛рд╡ рдХреЛ рдареАрдХ рдХрд░ рд╕рдХрддрд╛ рд╣реИред ЁЯМЯ

рдЕрднреА рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рджрд░реНрдж *рдЖрдкрдХреЛ* рдХрд┐рд╕ рдмрд╛рдд рдХрд╛ рд╣реИ?`
    },

    'personal confusion': {
        english: `Feeling lost about life's path? ЁЯМА That's a very common, human feeling.

Gita wisdom: Your soul is eternal, this confusion is temporary.

Krishna guides through every uncertainty. тЬи

What's the *one* decision that feels most unclear right now?`,

        hindi: `рдЬреАрд╡рди рдХрд╛ рд░рд╛рд╕реНрддрд╛ рднрдЯрдХрд╛ рд╣реБрдЖ рд▓рдЧрддрд╛ рд╣реИ? ЁЯМА рдпрд╣ рдПрдХ рдмрд╣реБрдд рд╣реА рд╕рд╛рдорд╛рдиреНрдп, рдорд╛рдирд╡реАрдп рднрд╛рд╡рдирд╛ рд╣реИред

рдЧреАрддрд╛ рдЬреНрдЮрд╛рди: рдЖрдкрдХреА рдЖрддреНрдорд╛ рдЕрдорд░ рд╣реИ, рдпрд╣ рднреНрд░рдо рдЕрд╕реНрдерд╛рдпреА рд╣реИред

рдХреГрд╖реНрдг рд╣рд░ рдЕрдирд┐рд╢реНрдЪрд┐рддрддрд╛ рдореЗрдВ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рджреЗрддреЗ рд╣реИрдВред тЬи

рд╡реЛ *рдХреМрди рд╕рд╛ рдПрдХ* рдирд┐рд░реНрдгрдп рд╣реИ рдЬреЛ рдЕрднреА рд╕рдмрд╕реЗ рдЕрд╕реНрдкрд╖реНрдЯ рд▓рдЧ рд░рд╣рд╛ рд╣реИ?`
    },

    'anxiety': {
        english: `Anxiety making everything feel out of control? ЁЯШ░ That feeling is exhausting.

Krishna reminds in Gita 2.56: "Be steady in sorrow and joy."

This wave will settle, revealing your calm center. ЁЯМК

What's the *one thought* that keeps looping in your mind? Let's face it together.`,

        hindi: `рдЪрд┐рдВрддрд╛ рд╕рдм рдХреБрдЫ рдмреЗрдХрд╛рдмреВ рд▓рдЧ рд░рд╣рд╛ рд╣реИ? ЁЯШ░ рдпрд╣ рднрд╛рд╡рдирд╛ рдердХрд╛ рджреЗрддреА рд╣реИред

рдХреГрд╖реНрдг рдЧреАрддрд╛ 2.56 рдореЗрдВ рдпрд╛рдж рджрд┐рд▓рд╛рддреЗ: "рджреБрдЦ рдФрд░ рд╕реБрдЦ рдореЗрдВ рд╕реНрдерд┐рд░ рд░рд╣реЛред"

рдпрд╣ рдЪрд┐рдВрддрд╛ рдХреА рд▓рд╣рд░ рдердореЗрдЧреА, рдЖрдкрдХрд╛ рд╢рд╛рдВрдд рдХреЗрдВрджреНрд░ рдкреНрд░рдХрдЯ рд╣реЛрдЧрд╛ред ЁЯМК

рд╡реЛ *рдХреМрди рд╕рд╛ рдПрдХ рд╡рд┐рдЪрд╛рд░* рд╣реИ рдЬреЛ рджрд┐рдорд╛рдЧ рдореЗрдВ рдШреВрдо рд░рд╣рд╛ рд╣реИ? рдЪрд▓рд┐рдП рдЙрд╕рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рддреЗ рд╣реИрдВред`
    },

    'custom help': {
        english: `I understand you need personalized guidance... ЁЯдФ

Krishna's Gita offers wisdom for every unique situation.

Your challenge deserves a specific solution, not a template. ЁЯТл

Please tell me, what particular situation are you facing?`,

        hindi: `рд╕рдордЭрддрд╛ рд╣реВрдБ рдЖрдкрдХреЛ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдЪрд╛рд╣рд┐рдП... ЁЯдФ

рдХреГрд╖реНрдг рдХреА рдЧреАрддрд╛ рд╣рд░ рдЕрдиреЛрдЦреА рд╕реНрдерд┐рддрд┐ рдХреЗ рд▓рд┐рдП рдЬреНрдЮрд╛рди рджреЗрддреА рд╣реИред

рдЖрдкрдХреА рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рд╕рдорд╛рдзрд╛рди рдЪрд╛рд╣рд┐рдП, рдХреЛрдИ рдЯреЗрдореНрдкрд▓реЗрдЯ рдирд╣реАрдВред ЁЯТл

рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ, рдЖрдк рдХрд┐рд╕ рдЦрд╛рд╕ рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?`
    },

    // DAILY WISDOM & MORNING MESSAGE TEMPLATE BUTTONS
    'practice': {
        english: `Ready to practice focusing on action, not results? ЁЯЩП

A simple start: Take 3 deep breaths. With each exhale, silently repeat, "I focus on my effort."

Feel the calm return as you let go of outcomes.

How did that feel? Did it help shift your focus even slightly?`,

        // *** UPDATED for morning message context ***
        hindi: `рдХрд░реНрдо рдкрд░ рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рдиреЗ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВ, рдлрд▓ рдкрд░ рдирд╣реАрдВ? ЁЯЩП

рдПрдХ рд╕рд░рд▓ рд╢реБрд░реБрдЖрдд: 3 рдЧрд╣рд░реА рд╕рд╛рдБрд╕реЗрдВ рд▓реЗрдВред рд╣рд░ рд╕рд╛рдБрд╕ рдЫреЛрдбрд╝рддреЗ рд╣реБрдП, рдорди рд╣реА рдорди рджреЛрд╣рд░рд╛рдПрдВ, "рдореИрдВ рдЕрдкрдиреЗ рдкреНрд░рдпрд╛рд╕ рдкрд░ рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рддрд╛ рд╣реВрдБред"

рдкрд░рд┐рдгрд╛рдореЛрдВ рдХреЛ рдЫреЛрдбрд╝рддреЗ рд╣реБрдП рд▓реМрдЯрддреА рд╣реБрдИ рд╢рд╛рдВрддрд┐ рдХреЛ рдорд╣рд╕реВрд╕ рдХрд░реЗрдВред

рдпрд╣ рдХреИрд╕рд╛ рд▓рдЧрд╛? рдХреНрдпрд╛ рдЗрд╕рдиреЗ рдЖрдкрдХреЗ рдзреНрдпрд╛рди рдХреЛ рдереЛрдбрд╝рд╛ рднреА рдмрджрд▓рдиреЗ рдореЗрдВ рдорджрдж рдХреА?`
    },

    // EMOTIONAL CHECK-IN TEMPLATE BUTTONS
    'hare krishna': {
        english: `That heavy feeling is real... ЁЯТн

Krishna says: "The soul is eternal" - this emotion doesn't define *you*.

His love is constant, even in difficult moments. тЭдя╕П

What's specifically on your mind? I'm here to listen.`,

        hindi: `рд╡рд╣ рднрд╛рд░реАрдкрди рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╣реИ... ЁЯТн

рдХреГрд╖реНрдг рдХрд╣рддреЗ: "рдЖрддреНрдорд╛ рдЕрдорд░ рд╣реИ" - рдпрд╣ рднрд╛рд╡рдирд╛ рдЖрдкрдХреЛ рдкрд░рд┐рднрд╛рд╖рд┐рдд рдирд╣реАрдВ рдХрд░рддреАред

рдЙрдирдХрд╛ рдкреНрдпрд╛рд░ рд╕реНрдерд┐рд░ рд╣реИ, рдореБрд╢реНрдХрд┐рд▓ рд╕рдордп рдореЗрдВ рднреАред тЭдя╕П

рдЕрднреА рдЦрд╛рд╕рдХрд░ рдЖрдкрдХреЗ рдорди рдореЗрдВ рдХреНрдпрд╛ рдЪрд▓ рд░рд╣рд╛ рд╣реИ? рдореИрдВ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред`
    }
};

// Button text mapping for detection
const BUTTON_MAPPING = {
    // English buttons
    'work stress': 'work stress',
    'relationship issues': 'relationship issues',
    'personal confusion': 'personal confusion',
    'anxiety': 'anxiety',
    'custom help': 'custom help',
    'practice': 'practice',
    'hare krishna': 'hare krishna',

    // Hindi buttons
    'рдХрд╛рдо рдХрд╛ рддрдирд╛рд╡': 'work stress',
    'рд░рд┐рд╢реНрддреЗ рдХреА рдкрд░реЗрд╢рд╛рдиреА': 'relationship issues',
    'рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЙрд▓рдЭрди': 'personal confusion',
    'рдЖрдкрдХреЗ рдЕрдиреБрд╕рд╛рд░': 'custom help',
    'рдЕрднреНрдпрд╛рд╕': 'practice', // *** ADDED 'рдЕрднреНрдпрд╛рд╕' button ***
    'рд╣рд░реЗ рдХреГрд╖реНрдг': 'hare krishna' // Assuming you might add this button text too
};

/* ---------------- [FIXED] CONVINCING ENGAGEMENT QUESTIONS ---------------- */
const ENGAGEMENT_QUESTIONS = {
  english: [
    "What's the *one* thought that keeps looping? Let's try to untangle it.",
    "If you could change just *one* small thing about this situation, what would it be? Let's start there.",
    "What's the specific feeling that's hardest to shake right now (like anger, fear, sadness)?",
    "What does the 'worst-case scenario' look like in your mind? Let's look at it clearly.",
    "What advice do you *think* Krishna would give you? Let's explore that.",
    "What would a moment of peace feel like *right now*?",
    "What's the one part of this you *can* control?",
    "If you had to explain this problem to a friend, what's the first thing you'd say?"
  ],
  hindi: [
    "рдХреМрди рд╕рд╛ *рдПрдХ* рд╡рд┐рдЪрд╛рд░ рдмрд╛рд░-рдмрд╛рд░ рдШреВрдо рд░рд╣рд╛ рд╣реИ? рдЪрд▓рд┐рдП рдЙрд╕реЗ рд╕реБрд▓рдЭрд╛рддреЗ рд╣реИрдВред",
    "рдЕрдЧрд░ рдЖрдк *рдПрдХ* рдЫреЛрдЯреА рд╕реА рдЪреАрдЬрд╝ рдмрджрд▓ рдкрд╛рддреЗ, рддреЛ рд╡реЛ рдХреНрдпрд╛ рд╣реЛрддреА? рд╡рд╣реАрдВ рд╕реЗ рд╢реБрд░реВ рдХрд░рддреЗ рд╣реИрдВред",
    "рдЕрднреА рдХреМрди рд╕реА *рдПрдХ* рднрд╛рд╡рдирд╛ рд╕рдмрд╕реЗ рднрд╛рд░реА рд╣реИ (рдЬреИрд╕реЗ рдЧреБрд╕реНрд╕рд╛, рдбрд░, рдпрд╛ рдЙрджрд╛рд╕реА)?",
    "рдЖрдкрдХреЗ рдорди рдореЗрдВ 'рд╕рдмрд╕реЗ рдмреБрд░рд╛' рдХреНрдпрд╛ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ? рдЪрд▓рд┐рдП рдЙрд╕реЗ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рджреЗрдЦрддреЗ рд╣реИрдВред",
    "рдЖрдкрдХреЛ рдХреНрдпрд╛ рд▓рдЧрддрд╛ рд╣реИ рдХреГрд╖реНрдг рдЖрдкрдХреЛ рдХреНрдпрд╛ рд╕рд▓рд╛рд╣ рджреЗрддреЗ? рдЗрд╕ рдкрд░ рдмрд╛рдд рдХрд░рддреЗ рд╣реИрдВред",
    "рдЗрд╕ рдкрд▓ рдореЗрдВ *рд╢рд╛рдВрддрд┐* рдХрд╛ рдПрдХ рдкрд▓ рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рд╣реЛрдЧрд╛?",
    "рдЗрд╕ рд╕реНрдерд┐рддрд┐ рдХрд╛ рдХреМрди рд╕рд╛ *рдПрдХ* рд╣рд┐рд╕реНрд╕рд╛ рдЖрдкрдХреЗ рдирд┐рдпрдВрддреНрд░рдг рдореЗрдВ рд╣реИ?",
    "рдЕрдЧрд░ рдЖрдкрдХреЛ рдпрд╣ рд╕рдорд╕реНрдпрд╛ рдХрд┐рд╕реА рджреЛрд╕реНрдд рдХреЛ рд╕рдордЭрд╛рдиреА рд╣реЛ, рддреЛ рдЖрдк рдкрд╣рд▓реА рдмрд╛рдд рдХреНрдпрд╛ рдХрд╣реЗрдВрдЧреЗ?"
  ]
};

// Track last used questions per user to avoid repetition
const userQuestionHistory = new Map();

/* ---------------- [FIXED] `undefined` BUG in getEngagementQuestion ---------------- */
function getEngagementQuestion(phone, language) {
  const questions = ENGAGEMENT_QUESTIONS[language] || ENGAGEMENT_QUESTIONS.english;

  if (!userQuestionHistory.has(phone)) {
    userQuestionHistory.set(phone, []);
  }
  let usedQuestions = userQuestionHistory.get(phone); // Use 'let'

  // *** FIX ***
  // If all questions used, reset the array *before* filtering
  if (usedQuestions.length >= questions.length) {
    console.log(`тЩ╗я╕П Resetting engagement questions for ${phone}`);
    usedQuestions = []; // Reset the array
    userQuestionHistory.set(phone, usedQuestions); // Save the reset
  }

  const availableQuestions = questions.filter((_, index) => !usedQuestions.includes(index));

  // *** ADD SAFETY CHECK ***
  if (availableQuestions.length === 0) {
      // This should no longer happen, but as a fallback:
      userQuestionHistory.set(phone, []); // Reset
      console.log(`ЁЯОп EngagementQuestion fallback: returning first question.`);
      return questions[0]; // Return the first question
  }

  const randomIndex = Math.floor(Math.random() * availableQuestions.length);
  const selectedQuestion = availableQuestions[randomIndex];

  // Safety check if selectedQuestion is somehow undefined
  if (!selectedQuestion) {
      console.log(`ЁЯОп EngagementQuestion fallback: selectedQuestion was undefined.`);
      return questions[0];
  }

  const questionIndex = questions.indexOf(selectedQuestion);
  if (questionIndex !== -1) { // Ensure index is valid before pushing
    usedQuestions.push(questionIndex);
    userQuestionHistory.set(phone, usedQuestions);
  } else {
    console.error(`Error finding index for question: "${selectedQuestion}"`);
  }


  console.log(`ЁЯОп Selected engagement question: "${selectedQuestion}" for ${phone}`);
  return selectedQuestion;
}

/* ---------------- [FIXED] LANGUAGE DETECTION ---------------- */
function detectLanguageFromText(text, currentLanguage = "English") {
    if (!text || typeof text !== "string") return currentLanguage;

    const cleanText = text.trim().toLowerCase();

    // 1. EXPLICIT language commands - HIGHEST PRIORITY
    if (cleanText.includes('english') || cleanText.includes('speak english') || cleanText.includes('angrezi')) {
        return "English";
    }
    if (cleanText.includes('hindi') || cleanText.includes('speak hindi') || cleanText.includes('hind')) {
        return "Hindi";
    }

    // 2. Hindi script detection - ABSOLUTE CONFIDENCE
    if (/[\u0900-\u097F]/.test(text)) {
        return "Hindi";
    }

    // 3. Romanized Hindi detection - STRONG PATTERNS (MOVED UP)
    // *** FIX: This now runs *before* pure English check to catch "Isme kya samjaya gya hai" ***
    const hindiRomanPatterns = [
        /\b(kaise|kya|kyu|kaun|kahan|kab|kaisa|kitna|karni|karte|hain|ho|hai|hun)\b/i,
        /\b(main|mera|mere|meri|tum|aap|hum|hamara|unka|uska|apna|apne)\b/i,
        /\b(mujhe|tujhe|use|hamein|unhein|karke|hokar|kar|lekin|par|aur|ya)\b/i,
        /\b(accha|theek|sahi|galat|bhoot|zyada|kam|subah|shaam|raat)\b/i,
        /\b(bahut|thoda|kyun|karo|kare|rahe|raha|rahi|chahiye|nahi|nahin)\b/i
    ];

    const hindiMatches = hindiRomanPatterns.filter(pattern => pattern.test(cleanText)).length;
    // Be more aggressive for short queries like "kya hai"
    if (hindiMatches >= 2 || (hindiMatches >= 1 && cleanText.length < 25)) {
        return "Hindi";
    }

    // 4. Pure English text detection (MOVED DOWN)
    // Ensure it doesn't match single common English words often used in Hindi
    const commonEnglishWords = /\b(ok|yes|no|hi|hello|hey|thanks|thank|menu|help|options)\b/;
    const isPureEnglish = /^[a-zA-Z\s,.!?'"-]+$/.test(text) && text.length > 2 && !commonEnglishWords.test(cleanText);
    if (isPureEnglish) {
        return "English";
    }

    // 5. Single word greetings detection
    const hindiGreetings = ['namaste', 'namaskar', 'pranam', 'radhe', 'radhe radhe', 'hare krishna'];
    const englishGreetings = ['hi', 'hello', 'hey', 'thanks', 'thank you'];

    if (hindiGreetings.includes(cleanText)) return "Hindi";
    if (englishGreetings.includes(cleanText)) return "English";

    // 6. Default to current language for ambiguous cases
    return currentLanguage;
}

/* ---------------- [FIXED] LANGUAGE DETERMINATION ---------------- */
// This function is now rewritten to separate EXPLICIT commands from IMPLICIT detection.
async function determineUserLanguage(phone, text, user) {
    let currentLanguage = user.language_preference || user.language || 'English';
    const cleanText = text.toLowerCase().trim();

    // 1. Check for EXPLICIT commands
    const isExplicitEnglish = cleanText.includes('english') || cleanText.includes('speak english') || cleanText.includes('angrezi');
    const isExplicitHindi = cleanText.includes('hindi') || cleanText.includes('speak hindi') || cleanText.includes('hind');

    if (isExplicitEnglish && currentLanguage !== 'English') {
        await updateUserState(phone, { language_preference: 'English', language: 'English' });
        console.log(`ЁЯФД Language EXPLICITLY switched to: English`);
        return { language: 'English', isSwitch: true }; // It was an explicit command
    }

    if (isExplicitHindi && currentLanguage !== 'Hindi') {
        await updateUserState(phone, { language_preference: 'Hindi', language: 'Hindi' });
        console.log(`ЁЯФД Language EXPLICITLY switched to: Hindi`);
        return { language: 'Hindi', isSwitch: true }; // It was an explicit command
    }

    // 2. If NOT an explicit command, just detect the language for this one response
    const detectedLanguage = detectLanguageFromText(text, currentLanguage);

    // 3. Update preference if it's a confident, different detection, but
    //    DO NOT treat it as a "switch" that resets the bot.
    if (detectedLanguage !== currentLanguage) {
         // Check confidence before implicitly updating preference
        const isConfidentDetection =
            /[\u0900-\u097F]/.test(text) || // Hindi script
            (/^[a-zA-Z\s,.!?'"-]+$/.test(text) && text.length > 5 && !/\b(ok|yes|no|hi|hello)\b/.test(cleanText)) || // Longer English text
            (detectLanguageFromText(text, currentLanguage) !== currentLanguage); // If detection function confidently overrides current

        if (isConfidentDetection) {
            console.log(`ЁЯФД Language IMPLICITLY detected & preference updated: ${detectedLanguage}`);
            await updateUserState(phone, { language_preference: detectedLanguage, language: detectedLanguage });
            // Return the *new* language, but 'isSwitch: false' so the bot ANSWERS the question
            return { language: detectedLanguage, isSwitch: false };
        } else {
             console.log(`~ Language detected (${detectedLanguage}), but not confident enough to switch preference from ${currentLanguage}. Answering in ${currentLanguage}.`);
             // Keep the current language preference, but answer in the detected language for this turn
             return { language: detectedLanguage, isSwitch: false }; // Still isSwitch: false
        }
    }

    // 4. Language is the same, no switch.
    return { language: currentLanguage, isSwitch: false };
}


/* ---------------- [FIXED] MESSAGE LENGTH OPTIMIZATION ---------------- */
// Removed the addition of "Want to know more?"
function optimizeMessageForWhatsApp(message, maxLength = 350) {
    if (!message || message.length <= maxLength) {
        console.log(" optimizing message: message already short enough");
        return message;
    }

    if (message.includes('ЁЯЪй') || message.includes('Welcome') || message.includes('рд╕реНрд╡рд╛рдЧрдд') ||
        message.includes('1я╕ПтГг') || message.includes('2я╕ПтГг') || message.includes('3я╕ПтГг') ||
        message.includes('4я╕ПтГг') || message.includes('5я╕ПтГг')) {
        return message; // Menus should NEVER be cut
    }

    if (message.includes('\n\n')) {
        const parts = message.split('\n\n');
        if (parts.length >= 2) {
            console.log(" optimizing message: template structure detected");
            let shortened = parts[0] + '\n\n' + parts[1];
            if (shortened.length > maxLength) {
                const sentences = parts[0].split(/[.!?ред]/).filter(s => s.trim().length > 5);
                if (sentences.length > 0) {
                    shortened = sentences[0] + '.';
                } else {
                    shortened = parts[0].substring(0, maxLength - 10) + '...'; // Fallback if no sentence found
                }
            }
            return shortened.substring(0, maxLength);
        }
    }

    const sentences = message.split(/[.!?ред]/).filter(s => s.trim().length > 10);
    console.log(" optimizing message: regular message split into sentences", sentences.length);

    if (sentences.length <= 1) {
        if (message.length > maxLength) {
            const truncated = message.substring(0, maxLength - 5); // Allow space for '...'
            const lastSpace = truncated.lastIndexOf(' ');
            if (lastSpace > maxLength - 50) {
                return truncated.substring(0, lastSpace) + '...';
            }
            return truncated + '...';
        }
        return message;
    }

    let shortened = '';
    for(let i = 0; i < sentences.length; i++) {
        const potentialShortened = (shortened ? shortened + '. ' : '') + sentences[i];
        if (potentialShortened.length <= maxLength - 5) { // Check length *before* adding
            shortened = potentialShortened;
        } else {
            break; // Stop adding sentences if it exceeds limit
        }
    }

     // Ensure it ends with punctuation if shortened
    if (shortened.length < message.length && !/[.!?ред]$/.test(shortened)) {
        shortened += '.';
    }


    return shortened.substring(0, maxLength); // Final trim
}

/* ---------------- ENHANCED ANALYTICS TRACKING ---------------- */
async function trackTemplateButtonClick(phone, buttonType, buttonText, language, templateContext = {}) {
    try {
        const patternId = `pattern_${Date.now()}_${phone.replace('+', '')}`;

        // Track in user_response_patterns with proper error handling
        await dbPool.query(`
            INSERT INTO user_response_patterns
            (pattern_id, phone, template_id, first_response_text, first_response_time_seconds,
             response_sentiment, asked_for_help, emotional_state_detected, button_clicked, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW())
            ON CONFLICT DO NOTHING
        `, [
            patternId,
            phone,
            templateContext.template_id || 'problem_solver_english',
            buttonText.substring(0, 500),
            0,
            'seeking_guidance',
            true,
            'seeking_guidance',
            buttonType
        ]);

        // Track in user_engagement
        const sessionId = `sess_${Date.now()}_${phone.replace('+', '')}`;
        await dbPool.query(`
            INSERT INTO user_engagement
            (session_id, phone, morning_message_id, first_reply_time, buttons_clicked, created_at)
            VALUES ($1, $2, $3, $4, $5, NOW())
            ON CONFLICT DO NOTHING
        `, [
            sessionId,
            phone,
            templateContext.message_id || 'morning_template',
            new Date(),
            [buttonType]
        ]);

        // Also track in template_analytics
        try {
            await dbPool.query(`
                INSERT INTO template_analytics
                (phone, template_id, button_clicked, language, clicked_at)
                VALUES ($1, $2, $3, $4, NOW())
                ON CONFLICT DO NOTHING
            `, [
                phone,
                templateContext.template_id || 'problem_solver_english',
                buttonType,
                language
            ]);
        } catch (e) {
            console.log('Template analytics insert optional');
        }

        console.log(`ЁЯУК Analytics: ${buttonType} by ${phone} in ${language}`);
    } catch (error) {
        console.error('Analytics tracking error:', error.message);
    }
}

/* ---------------- Template Button Detection ---------------- */
function isTemplateButtonResponse(text) {
    const cleanText = text.toLowerCase().trim();
    // Check exact matches first for higher accuracy
    if (BUTTON_MAPPING[cleanText]) {
        return true;
    }
    // Then check includes for robustness (e.g., if extra text is added)
    return Object.keys(BUTTON_MAPPING).some(button =>
        cleanText.includes(button.toLowerCase())
    );
}

function getButtonType(text) {
    const cleanText = text.toLowerCase().trim();
    // Prioritize exact match
    if (BUTTON_MAPPING[cleanText]) {
        return BUTTON_MAPPING[cleanText];
    }
    // Fallback to includes match
    for (const [buttonText, buttonType] of Object.entries(BUTTON_MAPPING)) {
        if (cleanText.includes(buttonText.toLowerCase())) {
            return buttonType;
        }
    }
    return null;
}

/* ---------------- Template Button Response Handler ---------------- */
async function handleTemplateButtonResponse(phone, text, language, user) {
    const buttonType = getButtonType(text);

    if (!buttonType) {
        console.log(`тЭУ Unknown button text: "${text}"`);
        return false;
    }

    console.log(`ЁЯОп Processing template button: ${buttonType} in ${language}`);

    // Track the button click with enhanced analytics
    await trackTemplateButtonClick(phone, buttonType, text, language);

    // Get optimized response
    const responseTemplate = OPTIMIZED_TEMPLATE_RESPONSES[buttonType];
    if (!responseTemplate) {
        console.log(`тЭМ No response template for: ${buttonType}`);
        // Fallback to AI if template missing
        const conversationContext = buildConversationContext(user, text);
        await getCachedAIResponse(phone, text, language, conversationContext);
        return true; // Indicate handled (by AI)
    }

    const response = responseTemplate[language] || responseTemplate.english;

    // Send the optimized response WITHOUT length restriction for templates
    await sendViaHeltar(phone, response, `template_button_${buttonType}`);

    // Update user state to continue conversation
    await updateUserState(phone, {
        conversation_stage: 'chatting', // FIX: Move directly to 'chatting'
        last_menu_choice: buttonType,
        pending_followup: 'awaiting_user_response', // Maybe remove this if not used
        last_activity_ts: new Date().toISOString()
    });

    console.log(`тЬЕ Template button handled: ${buttonType} for ${phone}`);
    return true;
}

/* ---------------- Enhanced Gita Wisdom Database (Fallback) ---------------- */
const ENHANCED_GITA_WISDOM = {
    moral_dilemma: {
        verses: ["16.1-3", "17.14-16", "18.63"],
        teachings: {
            hindi: [
                `ЁЯМЕ **рд╕рддреНрдп рдХрд╛ рдорд╛рд░реНрдЧ рдФрд░ рдХреГрд╖реНрдг рдХреА рд░рдгрдиреАрддрд┐**

рдпрд╣ рдПрдХ рдЧрд╣рд░рд╛ рдкреНрд░рд╢реНрди рд╣реИред рдЧреАрддрд╛ (16.1-3) рджреИрд╡реА рдФрд░ рдЖрд╕реБрд░реА рдЧреБрдгреЛрдВ рдореЗрдВ рдЕрдВрддрд░ рдмрддрд╛рддреА рд╣реИред рдХреГрд╖реНрдг рдХрд╛ "рдЫрд▓" рд╡рд╛рд╕реНрддрд╡ рдореЗрдВ рдзрд░реНрдо рдХреА рд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рдерд╛, рдЬрдм рд╕рд╛рд░реЗ рдиреИрддрд┐рдХ рд░рд╛рд╕реНрддреЗ рдмрдВрдж рд╣реЛ рдЧрдП рдереЗред

**рдЖрдкрдХреА рд╕реНрдерд┐рддрд┐ рдореЗрдВ:**
1. рдкрд╣рд▓реЗ рдЕрдкрдиреЗ рдЗрд░рд╛рджреЗ рдЬрд╛рдБрдЪреЗрдВ: рдХреНрдпрд╛ рдпрд╣ рд╕реНрд╡рд╛рд░реНрде рдХреЗ рд▓рд┐рдП рд╣реИ рдпрд╛ рд╕рдЪрдореБрдЪ рднрд▓рд╛рдИ рдХреЗ рд▓рд┐рдП?
2. рдЧреБрдордирд╛рдо рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ рдХреЗ рд╡рд┐рдХрд▓реНрдк рддрд▓рд╛рд╢реЗрдВ

рдХреНрдпрд╛ рдЖрдк рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рдЖрдк рдХрд┐рд╕ рддрд░рд╣ рдХреА рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?`,

                `ЁЯТл **рдЬрдм рд╕рддреНрдп рдХрдард┐рди рд▓рдЧреЗ**

рдЧреАрддрд╛ (17.14-16) рд╕рддреНрдп рдХреЛ рд╕рд░реНрд╡реЛрдЪреНрдЪ рдмрддрд╛рддреА рд╣реИ, рдкрд░ рд╕рд╛рде рд╣реА рдХрд╣рддреА рд╣реИ рдХрд┐ рд╡рд╛рдгреА рдордзреБрд░ рд╣реЛред рдХрднреА-рдХрднреА рдЪреБрдк рд░рд╣рдирд╛ рднреА рд╕рддреНрдп рдХрд╛ рд╣реА рд░реВрдк рд╣реИред

**рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдХрджрдо:**
тАв рдкрд╣рд▓реЗ рдПрдХ рднрд░реЛрд╕реЗрдордВрдж рдорд┐рддреНрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ
тАв рдЕрдкрдиреА рд╕реБрд░рдХреНрд╖рд╛ рд╕рд░реНрд╡реЛрдкрд░рд┐ рд░рдЦреЗрдВ

рдХреНрдпрд╛ рдЖрдкрдХреЛ рд▓рдЧрддрд╛ рд╣реИ рдХрд┐ рдЕрднреА рдЪреБрдк рд░рд╣рдирд╛ рдмреЗрд╣рддрд░ рд╣реИ рдпрд╛ рдЖрдк рдХреБрдЫ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?`
            ],
            english: [
                `ЁЯМЕ **The Path of Truth & Krishna's Strategy**

This is a profound question. Gita (16.1-3) distinguishes divine and demonic qualities. Krishna's "deception" was actually to protect dharma when all ethical paths were closed.

**In your situation:**
1. First examine your intentions: Is this for selfish gain or genuine good?
2. Explore anonymous reporting options

Could you share what kind of situation you're facing?`,

                `ЁЯТл **When Truth Seems Difficult**

Gita (17.14-16) elevates truth as supreme, but also says speech should be pleasant. Sometimes silence is also a form of truth.

**Practical Steps:**
тАв First consult a trusted friend
тАв Keep your safety paramount

Do you feel staying silent is better now, or would you like to take some action?`
            ]
        }
    },

    stress: {
        verses: ["2.56", "18.63", "2.40"],
        teachings: {
            hindi: [
                `ЁЯМК **рддрдирд╛рд╡ рдХрд╛ рд╕рд╛рдордирд╛**

рдЖрдкрдХрд╛ рддрдирд╛рд╡ рд╕реНрд╡рд╛рднрд╛рд╡рд┐рдХ рд╣реИред рдЧреАрддрд╛ (2.56) рдХрд╣рддреА рд╣реИ: "рджреБрдГрдЦреЗрд╖реБ рдЕрдиреБрджреНрд╡рд┐рдЧреНрдирдордирд╛рдГ" - рджреБрдЦ рдореЗрдВ рдЬрд┐рд╕рдХрд╛ рдорди рд╡рд┐рдЪрд▓рд┐рдд рдирд╣реАрдВ рд╣реЛрддрд╛ред

**рд╢рд╛рдВрдд рд░рд╣рдиреЗ рдХреЗ рдЙрдкрд╛рдп:**
1. 4-7-8 рд╢реНрд╡рд╛рд╕: 4 рд╕реЗрдХрдВрдб рд╕рд╛рдБрд╕ рд▓реЗрдВ, 7 рд░реЛрдХреЗрдВ, 8 рдЫреЛрдбрд╝реЗрдВ
2. рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рдХрджрдо рд╕реЛрдЪреЗрдВ - рдПрдХ рдмрд╛рд░ рдореЗрдВ рдПрдХ рд╣реА рдХрд╛рдо

рдЖрдк рдХрд┐рд╕ рдПрдХ рдЫреЛрдЯреЗ рдХрджрдо рд╕реЗ рд╢реБрд░реВрдЖрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?`,

                `ЁЯЫбя╕П **рдЖрдВрддрд░рд┐рдХ рд╕реБрд░рдХреНрд╖рд╛**

рдЧреАрддрд╛ (18.63) рдХрд╣рддреА рд╣реИ: "рддреБрдо рдЪрд┐рдВрддрди рдХрд░реЛ, рдлрд┐рд░ рдЬреИрд╕рд╛ рддреБрдореНрд╣рд╛рд░рд╛ рдорди рдЪрд╛рд╣реЗ рд╡реИрд╕рд╛ рдХрд░реЛред" рдпрд╣ рдЖрдкрдХреЛ рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рджреЗрддрд╛ рд╣реИред

**рддрддреНрдХрд╛рд▓ рдХреНрд░рд┐рдпрд╛:**
тАв рд╕рдмрд╕реЗ рдмреБрд░рд╛ рдкрд░рд┐рдгрд╛рдо рд▓рд┐рдЦреЗрдВ - рдлрд┐рд░ рдЙрд╕рдХрд╛ рд╕рдорд╛рдзрд╛рди рд╕реЛрдЪреЗрдВ
тАв 3 рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рд▓реЛрдЧреЛрдВ рдХреА рд╕реВрдЪреА рдмрдирд╛рдПрдВ

рдЖрдк рдХрд┐рд╕ рдПрдХ рдЫреЛрдЯреЗ рдХрджрдо рд╕реЗ рд╢реБрд░реВрдЖрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?`
            ],
            english: [
                `ЁЯМК **Facing Stress**

Your stress is natural. Gita (2.56) says: "One who is undisturbed in sorrow..."

**Calming Techniques:**
1. 4-7-8 breathing: Inhale 4s, hold 7s, exhale 8s
2. Think small steps - one thing at a time

What's one small step you could start with?`,

                `ЁЯЫбя╕П **Inner Security**

Gita (18.63) says: "Reflect fully, then act as you choose." This gives you confidence.

**Immediate Action:**
тАв Write worst-case scenario - then brainstorm solutions
тАв List 3 trusted people you can talk to

What's one small step you could start with?`
            ]
        }
    }
};

/* ---------------- [FIXED] PESSIMISTIC/CONVINCING OPENAI PROMPT ---------------- */
// This prompt is now smarter. It instructs the AI to be conditional.
const ENHANCED_SYSTEM_PROMPT = {
  hindi: `рдЖрдк рд╕рд╛рд░рдереА AI рд╣реИрдВ - рднрдЧрд╡рдж рдЧреАрддрд╛ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рджреЗрдиреЗ рд╡рд╛рд▓реЗ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮред

**рдХрдбрд╝реЗ рдирд┐рдпрдо:**
1. **рднрд╛рд╡рдирд╛ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ:**
    - **рдЕрдЧрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкрд░реЗрд╢рд╛рди рд╣реИ** (рддрдирд╛рд╡, рдЙрджрд╛рд╕, рднреНрд░рдорд┐рдд): "рдкessimistic start" рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред рдЙрдирдХреА рднрд╛рд╡рдирд╛ рдХреЛ рдЧрд╣рд░рд╛рдИ рд╕реЗ рдорд╛рдиреНрдп рдХрд░реЗрдВ (рдЬреИрд╕реЗ, 'рдпрд╣ рд╕реБрдирдирд╛ рдмрд╣реБрдд рдХрдард┐рди рд╣реИ...', 'рдпрд╣ рднрд╛рд╡рдирд╛ рднрд╛рд░реА рд╣реЛ рд╕рдХрддреА рд╣реИ...') ЁЯШФ
    - **рдЕрдЧрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рд╢реНрди рдкреВрдЫ рд░рд╣рд╛ рд╣реИ** (рдЬреИрд╕реЗ 'рдХреНрдпрд╛ рдЦрд╛рдПрдВ?', 'рдХреИрд╕реЗ рд╕рдлрд▓ рд╣реЛрдВ?'): рд╕реАрдзреЗ, рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд░реВрдк рд╕реЗ рдЙрддреНрддрд░ рджреЗрдВред "рдкessimistic start" рдХрд╛ рдкреНрд░рдпреЛрдЧ *рди* рдХрд░реЗрдВред
2. **рдЧреАрддрд╛ рд╢реНрд▓реЛрдХ:** рдПрдХ рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдЧреАрддрд╛ рд╢реНрд▓реЛрдХ рдпрд╛ рд╢рд┐рдХреНрд╖рд╛ рджреЗрдВред
3. **рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕рд▓рд╛рд╣:** рдХреЗрд╡рд▓ 1 рдЫреЛрдЯреА, рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕рд▓рд╛рд╣ рджреЗрдВред
4. **рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рдлреЙрд▓реЛ-рдЕрдк:** рд╣рдореЗрд╢рд╛ *рдПрдХ* рдкреНрд░реЗрд░рдХ, рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдкреНрд░рд╢реНрди рдХреЗ рд╕рд╛рде рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВ рдЬреЛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдЬрд╡рд╛рдм рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рдкреНрд░реЛрддреНрд╕рд╛рд╣рд┐рдд рдХрд░реЗ (рдЬреИрд╕реЗ, 'рдХреМрди рд╕рд╛ *рдПрдХ* рд╡рд┐рдЪрд╛рд░ рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рдкрд░реЗрд╢рд╛рди рдХрд░ рд░рд╣рд╛ рд╣реИ? рдЪрд▓рд┐рдП рдЙрд╕реЗ рддреЛрдбрд╝рддреЗ рд╣реИрдВред') **рдпрд╣ рдкреНрд░рд╢реНрди рдкреВрдЫрдирд╛ рдЕрдирд┐рд╡рд╛рд░реНрдп рд╣реИред**
5. **рдЫреЛрдЯрд╛ рд░рдЦреЗрдВ:** рдЖрдкрдХрд╛ рдкреВрд░рд╛ рдЙрддреНрддрд░ 120 рд╢рдмреНрджреЛрдВ рд╕реЗ рдХрдо рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред
6. **рдЗрдореЛрдЬреА рдмрджрд▓реЗрдВ:** рдХреЗрд╡рд▓ ЁЯШФ рдХрд╛ рдкреНрд░рдпреЛрдЧ рди рдХрд░реЗрдВред ЁЯШФ, ЁЯМА, ЁЯдФ, ЁЯЩП, ЁЯХЙя╕П рдХрд╛ рдорд┐рд╢реНрд░рдг рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред

**рдХрднреА рди рдХрд░реЗрдВ:**
- "Want to know more?" рдпрд╛ "рдХреНрдпрд╛ рдпрд╣ рдЙрдкрдпреЛрдЧреА рд▓рдЧрд╛?" рдЬреИрд╕реЗ рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди рди рдкреВрдЫреЗрдВред
- 120 рд╢рдмреНрджреЛрдВ рд╕реЗ рдЕрдзрд┐рдХ рди рд╣реЛред
- рдПрдХ рд╕реЗ рдЕрдзрд┐рдХ рдкреНрд░рд╢реНрди рди рдкреВрдЫреЗрдВред`,

  english: `You are Sarathi AI - an expert guide based on Bhagavad Gita.

**STRICT RULES:**
1. **Analyze Emotion:**
    - **If user is distressed** (stressed, sad, confused): Use the "pessimistic start." Validate their feeling deeply (e.g., "That sounds incredibly difficult...", "That's a heavy feeling..."). ЁЯШФ
    - **If user is asking a question** (e.g., 'What to eat?', 'How to be successful?'): Answer them directly and practically. Do *not* use the "pessimistic start".
2. **Gita Verse:** Provide one relevant Gita verse or teaching.
3. **Practical Advice:** Give only 1 short, practical piece of advice.
4. **Convincing Follow-up:** ALWAYS end with *one* convincing, insightful follow-up question that *encourages* a reply (e.g., "What's the *one* specific thought that's hardest to shake? Let's focus on that."). **Asking this question is mandatory.**
5. **Keep it SHORT:** Your entire response MUST be under 120 words.
6. **Vary Emojis:** Do not only use ЁЯШФ. Use a mix of ЁЯШФ, ЁЯМА, ЁЯдФ, ЁЯЩП, ЁЯХЙя╕П.

**NEVER DO:**
- Ask generic questions like "Want to know more?" or "Does this seem helpful?"
- Exceed 120 words.
- Ask more than one question.`
};

/* ---------------- Validation & Setup ---------------- */
const validateEnvVariables = () => {
    const requiredVars = { DATABASE_URL, OPENAI_KEY, HELTAR_API_KEY, HELTAR_PHONE_ID };
    const missingVars = Object.entries(requiredVars).filter(([, value]) => !value).map(([key]) => key);
    if (missingVars.length > 0) {
        console.error(`тЭМ Critical Error: Missing environment variables: ${missingVars.join(", ")}`);
        process.exit(1);
    }
};

async function setupDatabase() {
    try {
        const client = await dbPool.connect();

        // Ensure all columns exist, handle potential errors during ALTER TABLE
        const columnsToAdd = [
            { name: 'subscribed_daily', type: 'BOOLEAN DEFAULT FALSE' },
            { name: 'chat_history', type: 'JSONB DEFAULT \'[]\'::jsonb' },
            { name: 'conversation_stage', type: 'VARCHAR(50) DEFAULT \'menu\'' },
            { name: 'last_topic_summary', type: 'TEXT' },
            { name: 'messages_since_verse', type: 'INT DEFAULT 0' },
            { name: 'first_seen_date', type: 'DATE' },
            { name: 'last_seen_date', type: 'DATE' },
            { name: 'total_sessions', type: 'INT DEFAULT 0' },
            { name: 'total_incoming', type: 'INT DEFAULT 0' },
            { name: 'total_outgoing', type: 'INT DEFAULT 0' },
            { name: 'last_message', type: 'TEXT' },
            { name: 'last_message_role', type: 'VARCHAR(50)' },
            { name: 'last_response_type', type: 'VARCHAR(50)' },
            { name: 'current_lesson', type: 'INT DEFAULT 0' },
            { name: 'language_preference', type: 'VARCHAR(10) DEFAULT \'English\'' },
            { name: 'memory_data', type: 'JSONB DEFAULT \'{}\'::jsonb' },
            { name: 'last_menu_choice', type: 'VARCHAR(50)' }, // Increased size
            { name: 'last_menu_date', type: 'DATE' },
            { name: 'last_menu_shown', type: 'TIMESTAMP WITH TIME ZONE' },
            { name: 'primary_use_case', type: 'VARCHAR(50)' },
            { name: 'user_segment', type: 'VARCHAR(20) DEFAULT \'new\'' },
            { name: 'last_activity_ts', type: 'TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP' },
            { name: 'pending_followup', type: 'TEXT' },
            { name: 'followup_type', type: 'VARCHAR(50)' },
            { name: 'language', type: 'VARCHAR(10) DEFAULT \'English\'' }
        ];

        for (const col of columnsToAdd) {
            try {
                await client.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS ${col.name} ${col.type}`);
            } catch (alterErr) {
                // Ignore "column already exists" errors, log others
                if (!alterErr.message.includes('already exists')) {
                   console.warn(`тЪая╕П  DB Setup Warning: Could not add column ${col.name}: ${alterErr.message}`);
                }
            }
        }


        await client.query(`
            CREATE TABLE IF NOT EXISTS lessons (
                lesson_number INT PRIMARY KEY,
                verse TEXT,
                translation TEXT,
                commentary TEXT,
                reflection_question TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // Insert sample lessons if table is empty
        const lessonCount = await client.query("SELECT COUNT(*) FROM lessons");
        if (parseInt(lessonCount.rows[0].count) === 0) {
            console.log("ЁЯУЪ Inserting sample lessons...");
            await client.query(`
                INSERT INTO lessons (lesson_number, verse, translation, commentary, reflection_question) VALUES
                (1, 'рдХрд░реНрдордгреНрдпреЗрд╡рд╛рдзрд┐рдХрд╛рд░рд╕реНрддреЗ рдорд╛ рдлрд▓реЗрд╖реБ рдХрджрд╛рдЪрдиред', 'You have the right to work only, but never to the fruits.', 'Focus on your duty without attachment to results. This is the path to peace and success.', 'What action can I take today without worrying about the outcome?'),
                (2, 'рдпреЛрдЧрд╕реНрдердГ рдХреБрд░реБ рдХрд░реНрдорд╛рдгрд┐ рд╕рдЩреНрдЧрдВ рддреНрдпрдХреНрддреНрд╡рд╛ рдзрдирдЮреНрдЬрдпред', 'Perform your duty equipoised, O Arjuna, abandoning all attachment to success or failure.', 'Balance and equanimity lead to excellence in work and peace in life.', 'How can I stay balanced in challenging situations today?')
            `);
        }

        client.release();
        console.log("тЬЕ Database setup complete.");
    } catch (err) {
        console.error("тЭМ Database setup error:", err?.message || err);
    }
}

/* ---------------- Enhanced Helper Functions ---------------- */
function parseChatHistory(raw) {
    if (!raw) return [];
    if (Array.isArray(raw)) return raw;
    try { return JSON.parse(raw); } catch { return []; }
}

// *** FIX: This function was syntactically broken by nested functions. ***
// It is now fixed and complete.
function pruneChatHistory(history, maxMessages = 6) { // Reduced history for prompt length
    if (!Array.isArray(history) || history.length <= maxMessages) {
        return history;
    }

    // Keep only the last 'maxMessages' items
    return history.slice(-maxMessages);
}

/* ---------------- CONVERSATION CONTEXT TRACKING ---------------- */
// *** FIX: These functions were incorrectly nested inside pruneChatHistory. ***
// They are now correctly placed at the top level.
function buildConversationContext(user, currentMessage) {
  const history = user.chat_history || [];
  const recentMessages = history.slice(-4); // Last 2 exchanges

  let context = {
    previousTopics: [],
    emotionalTone: detectEmotionAdvanced(currentMessage)?.emotion || 'neutral',
    isFollowUp: false,
    isQuestion: currentMessage.includes('?') || /\b(what|how|why|when|where|who|kaise|kya|kyu|kab|kaun)\b/i.test(currentMessage.toLowerCase())
  };

  // Analyze recent conversation for continuity
  if (recentMessages.length >= 2) {
    const lastUserMessage = recentMessages[recentMessages.length - 2]?.content || '';
    const lastBotMessage = recentMessages[recentMessages.length - 1]?.content || '';

    context.isFollowUp = lastUserMessage.length > 10;
    context.previousTopics = extractTopics([lastUserMessage, lastBotMessage, currentMessage]); // Include current message topics
  } else {
    context.previousTopics = extractTopics([currentMessage]);
  }


  return context;
}

function extractTopics(messages) {
  const topics = new Set(); // Use a Set to avoid duplicates
  const text = messages.join(' ').toLowerCase();

  if (text.includes('work') || text.includes('job') || text.includes('рдХрд╛рдо') || text.includes('рдиреМрдХрд░реА')) {
    topics.add('work');
  }
  if (text.includes('stress') || text.includes('pressure') || text.includes('рддрдирд╛рд╡') || text.includes('рджрдмрд╛рд╡')) {
    topics.add('stress');
  }
  if (text.includes('relationship') || text.includes('family') || text.includes('рд░рд┐рд╢реНрддрд╛') || text.includes('рдкрд░рд┐рд╡рд╛рд░')) {
    topics.add('relationships');
  }
  if (text.includes('confus') || text.includes('understand') || text.includes('рд╕рдордЭ') || text.includes('рднреНрд░рдо')) {
    topics.add('confusion');
  }
  if (text.includes('anxious') || text.includes('worry') || text.includes('рдЪрд┐рдВрддрд╛') || text.includes('рдШрдмрд░рд╛рд╣рдЯ')) {
    topics.add('anxiety');
  }
  if (text.includes('sad') || text.includes('depress') || text.includes('рджреБрдЦреА') || text.includes('рдЙрджрд╛рд╕')) {
    topics.add('sadness');
  }
  if (text.includes('money') || text.includes('rich') || text.includes('рдкреИрд╕рд╛') || text.includes('рдЕрдореАрд░')) {
    topics.add('finance');
  }
  if (text.includes('success') || text.includes('рд╕рдлрд▓рддрд╛')) {
      topics.add('success');
  }
  if (text.includes('home') || text.includes('house') || text.includes('рдШрд░')) {
      topics.add('housing');
  }
  if (text.includes('bad things') || text.includes('why') || text.includes('suffering') || text.includes('рдХреНрдпреЛрдВ') || text.includes('рджреБрдЦ')) {
      topics.add('philosophy');
  }
  if (text.includes('mantra') || text.includes('lesson') || text.includes('gyan') || text.includes('рдЬреНрдЮрд╛рди')) {
      topics.add('wisdom');
  }
   if (text.includes('love') || text.includes('pyaar') || text.includes('рдкреНрдпрд╛рд░')) {
      topics.add('love');
  }
   if (text.includes('studies') || text.includes('focus') || text.includes('рдкрдврд╝рд╛рдИ')) {
      topics.add('studies');
  }
   if (text.includes('story') || text.includes('krishna') || text.includes('рдХреГрд╖реНрдг')) {
      topics.add('story');
  }


  return Array.from(topics); // Convert Set back to Array
}

async function getUserState(phone) {
    try {
        const res = await dbPool.query("SELECT * FROM users WHERE phone_number = $1", [phone]);
        if (res.rows.length === 0) {
            console.log(`тЬи Creating new user entry for ${phone}`);
            await dbPool.query(`
                INSERT INTO users (
                    phone_number, first_seen_date, last_seen_date, total_sessions,
                    language_preference, language, last_activity_ts, memory_data, chat_history,
                    conversation_stage
                ) VALUES ($1, CURRENT_DATE, CURRENT_DATE, 1, 'English', 'English', CURRENT_TIMESTAMP, '{}', '[]', 'menu')
            `, [phone]);

            const newRes = await dbPool.query("SELECT * FROM users WHERE phone_number = $1", [phone]);
            const u = newRes.rows[0];
            u.chat_history = parseChatHistory(u.chat_history || '[]');
            u.memory_data = u.memory_data || {};
             u.conversation_stage = u.conversation_stage || 'menu';
            u.language_preference = u.language_preference || 'English';
            u.language = u.language || 'English';
            return u;
        }

        const user = res.rows[0];
        user.chat_history = pruneChatHistory(parseChatHistory(user.chat_history || '[]'));
        user.memory_data = user.memory_data || {};
        user.conversation_stage = user.conversation_stage || 'menu';
        user.language_preference = user.language_preference || 'English';
        user.language = user.language || 'English';
        user.last_activity_ts = user.last_activity_ts || new Date().toISOString();

        return user;
    } catch (err) {
        console.error("getUserState failed:", err);
        return {
            phone_number: phone,
            chat_history: [],
            memory_data: {},
            conversation_stage: "menu",
            language_preference: "English",
            language: "English"
        };
    }
}

async function updateUserState(phone, updates) {
    try {
        if (!updates || Object.keys(updates).length === 0) return;
        // Ensure chat_history is stringified before saving
        if (updates.chat_history && typeof updates.chat_history !== 'string') {
            updates.chat_history = JSON.stringify(updates.chat_history);
        }
        if (updates.memory_data && typeof updates.memory_data !== 'string') {
             updates.memory_data = JSON.stringify(updates.memory_data);
        }

        const keys = Object.keys(updates);
        const vals = keys.map(k => updates[k]); // Use updates directly
        vals.push(phone);
        const clauses = keys.map((k, i) => `${k} = $${i + 1}`);
        const sql = `UPDATE users SET ${clauses.join(", ")} WHERE phone_number = $${keys.length + 1}`;
        await dbPool.query(sql, vals);
    } catch (err) {
        console.error("updateUserState failed:", err);
    }
}

/* ---------------- FIXED: COMPLETE MENU SYSTEM ---------------- */
async function handleEnhancedStartupMenu(phone, language, user) {
    const menuMessage = language === "Hindi"
        ? `ЁЯЪй *рд╕рд╛рд░рдереА AI рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!* ЁЯЪй

рдореИрдВ рдЖрдкрдХрд╛ рдирд┐рдЬреА рдЧреАрддрд╛ рд╕рд╛рдереА рд╣реВрдБред рдХреГрдкрдпрд╛ рдЪреБрдиреЗрдВ:

1я╕ПтГг *рддрддреНрдХрд╛рд▓ рдорд╛рд░реНрдЧрджрд░реНрд╢рди* - рд╡рд░реНрддрдорд╛рди рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП
2я╕ПтГг *рджреИрдирд┐рдХ рдЬреНрдЮрд╛рди* - рдЖрдЬ рдХреА рд╡рд┐рд╢реЗрд╖ рд╢рд┐рдХреНрд╖рд╛
3я╕ПтГг *рд╡рд╛рд░реНрддрд╛рд▓рд╛рдк* - рдЕрдкрдиреА рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ
4я╕ПтГг *рдЧреАрддрд╛ рдЬреНрдЮрд╛рди* - рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ
5я╕ПтГг *рд╕рдм рдХреБрдЫ рдЬрд╛рдиреЗрдВ* - рд╕рдВрдкреВрд░реНрдг рдорд╛рд░реНрдЧрджрд░реНрд╢рди

ЁЯТм *рдпрд╛ рдмрд╕ рд▓рд┐рдЦреЗрдВ* - рд╕реАрдзреЗ рдмрд╛рддрдЪреАрдд рд╢реБрд░реВ рдХрд░реЗрдВ

рдХреГрдкрдпрд╛ 1-5 рдХрд╛ рдЪрдпрди рдХрд░реЗрдВ рдпрд╛ рд╕реАрдзреЗ рд▓рд┐рдЦреЗрдВ ЁЯЩП`
        : `ЁЯЪй *Welcome to Sarathi AI!* ЁЯЪй

I'm your personal Gita companion. Please choose:

1я╕ПтГг *Immediate Guidance* - For current challenge
2я╕ПтГг *Daily Wisdom* - Today's special teaching
3я╕ПтГг *Have a Conversation* - Share your feelings
4я╕ПтГг *Gita Knowledge* - Ask specific questions
5я╕ПтГг *Know Everything* - Complete guidance

ЁЯТм *Or Just Type* - Start conversation directly

Please choose 1-5 or just type your thoughts ЁЯЩП`;

    // Send menu WITHOUT any length restrictions
    await sendViaHeltar(phone, menuMessage, "enhanced_welcome");
    await updateUserState(phone, {
        conversation_stage: "menu",
        last_menu_shown: new Date().toISOString()
    });

    console.log(`тЬЕ Complete menu shown to ${phone} in ${language}`);
}

/* ---------------- Stage Reset Logic ---------------- */
function shouldResetToMenu(message, currentStage) {
    const cleanMessage = message.toLowerCase().trim();

    // Reset triggers - these should ALWAYS show menu
    const resetTriggers = [
        'hi', 'hello', 'hey', 'namaste', 'start', 'menu', 'options',
        'help', 'guidance', 'back', 'home', 'main menu', 'hello again', 'hi again'
    ];

    // Always reset for greetings, regardless of current stage
    if (resetTriggers.includes(cleanMessage)) {
        return true;
    }

    // Reset if number input received but not in menu stage
    if (/^[1-5]$/.test(cleanMessage) && currentStage !== 'menu') {
        return true;
    }

    return false;
}

async function resetToMenuStage(phone, language) {
    console.log(`ЁЯФД Resetting user ${phone} to menu stage`);
    await updateUserState(phone, {
        conversation_stage: "menu",
        last_menu_shown: new Date().toISOString(),
        pending_followup: null,
        followup_type: null
    });
    // Fetch user state again to pass the most recent version
    const user = await getUserState(phone);
    await handleEnhancedStartupMenu(phone, language, user);
}

/* ---------------- Enhanced Analytics ---------------- */
async function trackIncoming(phone, text) {
    try {
        const user = await getUserState(phone);
        const now = new Date();
        let addSession = false;
        if (user.last_activity_ts) {
            const last = new Date(user.last_activity_ts);
            const diffHours = (now.getTime() - last.getTime()) / (1000 * 60 * 60); // Use getTime()
            if (diffHours > 12) addSession = true;
        } else {
            addSession = true;
        }

        const updates = {
            last_activity_ts: now.toISOString(),
            last_seen_date: now.toISOString().slice(0, 10),
            last_message: text,
            last_message_role: "user",
            total_incoming: (user.total_incoming || 0) + 1
        };
        if (!user.first_seen_date) updates.first_seen_date = now.toISOString().slice(0, 10);
        if (addSession) updates.total_sessions = (user.total_sessions || 0) + 1;

        await updateUserState(phone, updates);
    } catch (err) {
        console.error("trackIncoming failed:", err);
    }
}

async function trackOutgoing(phone, reply, type = "chat") {
    try {
        const user = await getUserState(phone);
        const updates = {
            last_activity_ts: new Date().toISOString(),
            last_message: reply,
            last_message_role: "assistant",
            last_response_type: type,
            total_outgoing: (user.total_outgoing || 0) + 1
        };
        await updateUserState(phone, updates);
    } catch (err) {
        console.error("trackOutgoing failed:", err);
    }
}

/* ---------------- FIXED: Enhanced Heltar Sending ---------------- */
async function sendViaHeltar(phone, message, type = "chat") {
    try {
        let finalMessage = message;
        // Apply smart length optimization ONLY for AI responses, not menus/templates/fallbacks
        if (type === 'enhanced_ai_response' || type === 'chat') {
             console.log(`ЁЯУП Optimizing AI response for WhatsApp (Max: ${MAX_REPLY_LENGTH})`);
            finalMessage = optimizeMessageForWhatsApp(message, MAX_REPLY_LENGTH);
        } else {
             console.log(`ЁЯУП Skipping optimization for type: ${type}`);
        }


        const safeMessage = String(finalMessage || "").trim();
        if (!safeMessage) {
            console.error(`тЭМ Attempted to send empty message to ${phone}. Original type: ${type}`);
            return;
        };
        if (!HELTAR_API_KEY) {
            console.warn(`(Simulated -> ${phone}): ${safeMessage}`);
            await trackOutgoing(phone, safeMessage, type);
            return { simulated: true, message: safeMessage };
        }

        const payload = { messages: [{ clientWaNumber: phone, message: safeMessage, messageType: "text" }] };
        const resp = await axios.post("https://api.heltar.com/v1/messages/send", payload, {
            headers: {
                Authorization: `Bearer ${HELTAR_API_KEY}`,
                "Content-Type": "application/json"
            },
            timeout: 15000 // Increased timeout
        });

        await trackOutgoing(phone, safeMessage, type);
        return resp.data;
    } catch (err) {
        console.error("Heltar send error:", err?.response?.data || err?.message || err);
        // Add fallback message if sending fails?
        // await trackOutgoing(phone, "Error sending message", "error"); // Track the error?
        return null;
    }
}

/* ---------------- Complete Response System ---------------- */
// Simplified: sendCompleteResponse is now mostly a wrapper for sendViaHeltar
async function sendCompleteResponse(phone, fullResponse, language, type = "chat") {
     // No cleaning needed here, AI prompt handles it. Length optimization happens in sendViaHeltar.
    await sendViaHeltar(phone, fullResponse, type);
}

/* ---------------- Context Building ---------------- */
function buildContextSummary(messages, language) {
    if (!messages || messages.length === 0) {
        return language === "Hindi" ? "рдХреЛрдИ рдкрд┐рдЫрд▓рд╛ рд╕рдВрджрд░реНрдн рдирд╣реАрдВ" : "No previous context";
    }

    const userMessages = messages.filter(msg => msg.role === 'user').slice(-2);
    const botMessages = messages.filter(msg => msg.role === 'assistant').slice(-1);

    let summary = "";

    if (language === "Hindi") {
        summary = "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдиреЗ рдкрд╣рд▓реЗ рдЪрд░реНрдЪрд╛ рдХреА: ";
        userMessages.forEach(msg => {
             if(msg.content) summary += `"${msg.content.substring(0, 50)}...", `;
        });
        if (botMessages.length > 0 && botMessages[0].content) {
            summary += `рдореИрдВрдиреЗ рдЬрд╡рд╛рдм рджрд┐рдпрд╛: "${botMessages[0].content.substring(0, 30)}..."`;
        }
    } else {
        summary = "User previously discussed: ";
        userMessages.forEach(msg => {
             if(msg.content) summary += `"${msg.content.substring(0, 50)}...", `;
        });
        if (botMessages.length > 0 && botMessages[0].content) {
            summary += `I responded: "${botMessages[0].content.substring(0, 30)}..."`;
        }
    }

    return summary.replace(/,\s*$/, ''); // Remove trailing comma and space
}

/* ---------------- Intent Classification ---------------- */
function isFollowUpToPreviousDeepQuestion(currentText, user) {
    if (!user || user.last_message_role !== 'assistant') return false;
    const lastBotMessage = user.last_message || '';
    // Check if the bot's last message was a question
    return lastBotMessage.includes('?');
}

function isGreetingQuery(text) {
    if (!text || typeof text !== "string") return false;
    const lowerText = text.toLowerCase().trim();

    const englishGreetings = ['hi', 'hello', 'hey', 'hii', 'hiya', 'good morning', 'good afternoon', 'good evening'];
    if (englishGreetings.includes(lowerText)) return true;

    const hindiGreetings = ['namaste', 'namaskar', 'pranam', 'radhe radhe'];
    if (hindiGreetings.includes(lowerText)) return true;

    // More general regex
    const greetingRegex = /\b(hi|hello|hey|how are you|what'?s up|kaise ho|kaise hain aap|namaste|hare krishna)\b/i;
    return greetingRegex.test(lowerText);
}

function isCapabilitiesQuery(text) {
    const lowerText = text.toLowerCase();
    const capabilitiesRegex = /\b(what can you do|capabilities|tell me about yourself|who are you|can i get more info|give me info|what do you do|more info|info about|introduce yourself|what is this|how does this work)\b/i;
    return capabilitiesRegex.test(lowerText);
}

function isEmotionalExpression(text) {
    if (!text) return false;
    const lowerText = text.toLowerCase();
    const emotionalPatterns = [
        /\b(stress|stressed|stressing|anxious|anxiety|tension|overwhelmed|pressure|worried|worrying)\b/i,
        /\b(i am in stress|i feel stressed|i'm stressed|i have stress|feeling stressed|under stress)\b/i,
        /\b(рдкрд░реЗрд╢рд╛рди|рддрдирд╛рд╡|рдЪрд┐рдВрддрд╛|рдШрдмрд░рд╛рд╣рдЯ|рджрдмрд╛рд╡|рдЙрд▓рдЭрди|рдорди рдкрд░реЗрд╢рд╛рди|рджрд┐рд▓ рдкрд░реЗрд╢рд╛рди|рдорди рднрд╛рд░реА)\b/,
        /\b(sad|sadness|depressed|depression|unhappy|miserable|hopeless|down|low|sorrow|lonely)\b/i,
        /\b(i am sad|i feel sad|i'm sad|feeling down|feeling low|feeling lonely)\b/i,
        /\b(рджреБрдЦреА|рдЙрджрд╛рд╕|рдирд┐рд░рд╛рд╢|рд╣рддрд╛рд╢|рджреБрдЦ|рдЙрджрд╛рд╕реА|рдЕрдХреЗрд▓рд╛|рдЕрдХреЗрд▓рд╛рдкрди|рддрдиреНрд╣рд╛рдИ|рдорди рдЙрджрд╛рд╕|рджрд┐рд▓ рдЯреВрдЯрд╛)\b/,
        /\b(my life|married life|relationship|husband|wife|family|job|work|career).*(problem|issue|difficult|hard|trouble|disturb|bad)\b/i,
        /\b(рдЬреАрд╡рди|рд╢рд╛рджреА|рд░рд┐рд╢реНрддрд╛|рдкрддрд┐|рдкрддреНрдиреА|рдкрд░рд┐рд╡рд╛рд░|рдиреМрдХрд░реА|рдХрд╛рдо).*(рд╕рдорд╕реНрдпрд╛|рдкрд░реЗрд╢рд╛рдиреА|рдореБрд╢реНрдХрд┐рд▓|рдмреБрд░рд╛|рдЦрд░рд╛рдм)\b/,
        /\b(not good|not well|feeling bad|going through|facing problem|having issue|i am struggling)\b/i,
        /\b(i can't handle|i can't cope|it's too much|too much pressure)\b/i,
        /\b(рдЕрдЪреНрдЫрд╛ рдирд╣реАрдВ|рдареАрдХ рдирд╣реАрдВ|рдмреБрд░рд╛ рд▓рдЧ|рдореБрд╢реНрдХрд┐рд▓ рд╣реЛ|рдкрд░реЗрд╢рд╛рдиреА рд╣реЛ|рд╕рдВрдШрд░реНрд╖ рдХрд░|рдореБрд╢реНрдХрд┐рд▓ рдореЗрдВ|рдкрд░реЗрд╢рд╛рдиреА рдореЗрдВ)\b/,
        /\b(рдорди рднрд╛рд░реА|рджрд┐рд▓ рдЯреВрдЯ|рдЯреЗрдВрд╢рди|рдлрд┐рдХреНрд░|рдЪрд┐рдВрддрд┐рдд|рдШрдмрд░рд╛рдпрд╛|рдирд┐рд░рд╛рд╢рд╛рдЬрдирдХ|рддрдВрдЧ рдЖ рдЧрдпрд╛|рд╣рд╛рд░ рдорд╛рди рд▓реА)\b/,
        /\b(рдореЗрд░рд╛ рдорди|рдореЗрд░рд╛ рджрд┐рд▓).*(рдкрд░реЗрд╢рд╛рди|рджреБрдЦреА|рдЙрджрд╛рд╕|рднрд╛рд░реА|рдЯреВрдЯ|рдмреЗрдЪреИрди)\b/,
        /\b(confused|lost|uncertain|don't know|what to do|which way|рдХрдВрдлреНрдпреВрдЬ|рдЙрд▓рдЭрди|рдкрддрд╛ рдирд╣реАрдВ|рдХреНрдпрд╛ рдХрд░реВрдВ|рд░рд╛рд╕реНрддрд╛ рдирд╣реАрдВ)\b/i
    ];
    return emotionalPatterns.some(pattern => pattern.test(lowerText));
}

function isDeepQuestion(text) {
     if (!text) return false;
    const lowerText = text.toLowerCase();
    const deepQuestionPatterns = [
        /\b(is.*wrong|right.*wrong|moral|ethical|lie|cheat|steal|honest)\b/i,
        /\b(рдЧрд▓рдд|рд╕рд╣реА|рдиреИрддрд┐рдХ|рдЭреВрда|рдзреЛрдЦрд╛|рдИрдорд╛рдирджрд╛рд░)\b/,
        /\b(krishna.*say|gita.*teach|spiritual|meditation|yoga|god)\b/i,
        /\b(рдХреГрд╖реНрдг.*рдХрд╣|рдЧреАрддрд╛.*рд╕рд┐рдЦ|рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ|рдзреНрдпрд╛рди|рдпреЛрдЧ|рднрдЧрд╡рд╛рди)\b/,
        /\b(how.*start|what.*do|why.*happen|when.*know)\b/i,
        /\b(рдХреИрд╕реЗ.*рд╢реБрд░реВ|рдХреНрдпрд╛.*рдХрд░реВ|рдХреНрдпреЛрдВ.*рд╣реЛ|рдХрдм.*рдкрддрд╛)\b/,
        /\b(problem|issue|challenge|difficult|struggle|confused)\b/i,
        /\b(рд╕рдорд╕реНрдпрд╛|рдореБрд╢реНрдХрд┐рд▓|рдЪреБрдиреМрддреА|рдкрд░реЗрд╢рд╛рди|рдЙрд▓рдЭрди)\b/
    ];
    return deepQuestionPatterns.some(pattern => pattern.test(lowerText));
}

function isSmallTalk(text) {
     if (!text) return false;
    const lowerText = text.toLowerCase().trim();
    const seriousIndicators = [
        'lie', 'cheat', 'wrong', 'moral', 'ethical', 'steal', 'dishonest',
        'рдЭреВрда', 'рдзреЛрдЦрд╛', 'рдЧрд▓рдд', 'рдиреИрддрд┐рдХ', 'рдЪреЛрд░реА', 'рдмреЗрдИрдорд╛рди',
        'how do i', 'what should', 'why is', 'can i',
        'рдХреИрд╕реЗ', 'рдХреНрдпрд╛', 'рдХреНрдпреЛрдВ', 'рдХрд░реВрдВ'
    ];
    if (seriousIndicators.some(indicator => lowerText.includes(indicator))) return false;
    const genuineSmallTalk = [
        'thanks', 'thank you', 'ok', 'okay', 'good', 'nice', 'cool', 'great', 'awesome', 'fine', 'good job', 'well done', 'you too', 'same to you',
        'рд╢реБрдХреНрд░рд┐рдпрд╛', 'рдзрдиреНрдпрд╡рд╛рдж', 'рдареАрдХ', 'рдЕрдЪреНрдЫрд╛', 'рдмрдврд╝рд┐рдпрд╛', 'рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛', 'рдЬреА', 'рд╣рд╛рдБ', 'рдирд╣реАрдВ', 'рдирдорд╕реНрддреЗ', 'рдкреНрд░рдгрд╛рдо'
    ];
    // Check for exact match or simple yes/no
    if (genuineSmallTalk.includes(lowerText) || lowerText === 'yes' || lowerText === 'no') {
        return true;
    }

    // Avoid classifying single-word questions as small talk
    if (lowerText.split(' ').length === 1 && lowerText.includes('?')) {
        return false;
    }

    return false; // Be conservative: default to not small talk
}

function detectEmotionAdvanced(text) {
     if (!text) return null;
    const lowerText = text.toLowerCase();
    let emotion = null;
    let confidence = 0;
    const emotionKeywords = {
        moral_dilemma: { keywords: ['lie', 'cheat', 'wrong', 'moral', 'ethical', 'steal', 'dishonest', 'рдЭреВрда', 'рдзреЛрдЦрд╛', 'рдЧрд▓рдд', 'рдиреИрддрд┐рдХ'], weight: 1.3 },
        stress: { keywords: ['stress', 'stressed', 'stressing', 'anxious', 'anxiety', 'tension', 'overwhelmed', 'worried', 'worrying', 'рдкрд░реЗрд╢рд╛рди', 'рддрдирд╛рд╡', 'рдЪрд┐рдВрддрд╛'], weight: 1.0 },
        sadness: { keywords: ['sad', 'depressed', 'unhappy', 'hopeless', 'sorrow', 'lonely', 'рджреБрдЦреА', 'рдЙрджрд╛рд╕', 'рдирд┐рд░рд╛рд╢', 'рд╣рддрд╛рд╢', 'рдЕрдХреЗрд▓рд╛'], weight: 1.0 },
        anger: { keywords: ['angry', 'anger', 'frustrated', 'irritated', 'рдХреНрд░реЛрдз', 'рдЧреБрд╕реНрд╕рд╛', 'рдирд╛рд░рд╛рдЬ'], weight: 1.0 }
    };
    const iAmPatterns = [
        { pattern: /\b(lie|cheat|wrong|moral|ethical|dishonest|рдЭреВрда|рдзреЛрдЦрд╛|рдЧрд▓рдд)\b/i, emotion: 'moral_dilemma', weight: 1.5 },
        { pattern: /\b(stress|stressed|anxious|tension|рдкрд░реЗрд╢рд╛рди|рддрдирд╛рд╡|рдЪрд┐рдВрддрд╛)\b/i, emotion: 'stress', weight: 1.3 },
        { pattern: /\b(sad|depressed|unhappy|рджреБрдЦреА|рдЙрджрд╛рд╕)\b/i, emotion: 'sadness', weight: 1.2 },
        { pattern: /\b(angry|anger|frustrated|рдХреНрд░реЛрдз|рдЧреБрд╕реНрд╕рд╛)\b/i, emotion: 'anger', weight: 1.2 }
    ];
    for (const situation of iAmPatterns) {
        if (situation.pattern.test(lowerText)) {
            emotion = situation.emotion;
            confidence = situation.weight;
            break;
        }
    }
    if (!emotion) {
        for (const [emotionType, data] of Object.entries(emotionKeywords)) {
            for (const keyword of data.keywords) {
                if (lowerText.includes(keyword)) {
                    if (data.weight > confidence) {
                        emotion = emotionType;
                        confidence = data.weight;
                    }
                    break;
                }
            }
        }
    }
    return confidence > 0.3 ? { emotion, confidence } : null;
}

function detectUserSituation(text) {
   if (!text) return 'general';
  const lowerText = text.toLowerCase();
  const situations = {
    moral: /(lie|cheat|wrong|moral|ethical|steal|dishonest|рдЭреВрда|рдзреЛрдЦрд╛|рдЧрд▓рдд|рдиреИрддрд┐рдХ)/.test(lowerText),
    work: /(job|work|office|career|boss|colleague|рдиреМрдХрд░реА|рдХрд╛рдо|рдХрд╛рд░реНрдпрд╛рд▓рдп|рд╕рд╣рдХрд░реНрдореА)/.test(lowerText),
    relationships: /(relationship|husband|wife|family|friend|partner|love|рдкрддрд┐|рдкрддреНрдиреА|рдкрд░рд┐рд╡рд╛рд░|рджреЛрд╕реНрдд|рдкреНрд░реЗрдо)/.test(lowerText),
    health: /(health|sick|pain|ill|hospital|doctor|рд╕реНрд╡рд╛рд╕реНрдереНрдп|рдмреАрдорд╛рд░|рджрд░реНрдж|рддрдмреАрдпрдд|рдбреЙрдХреНрдЯрд░)/.test(lowerText),
    studies: /(study|exam|student|school|college|education|рдкрдврд╝рд╛рдИ|рдкрд░реАрдХреНрд╖рд╛|рд╡рд┐рджреНрдпрд╛рд░реНрдереА|рд╢рд┐рдХреНрд╖рд╛)/.test(lowerText),
    spiritual: /(god|prayer|meditation|yoga|spiritual|рднрдЧрд╡рд╛рди|рдкреНрд░рд╛рд░реНрдердирд╛|рдзреНрдпрд╛рди|рдпреЛрдЧ|рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ)/.test(lowerText)
  };
  return Object.keys(situations).find(situation => situations[situation]) || 'general';
}

/* ---------------- [FIXED] Enhanced AI Response System ---------------- */
async function getCachedAIResponse(phone, text, language, context) {
    const cacheKey = `${phone}:${text.substring(0, 50)}:${language}`;

    if (responseCache.has(cacheKey)) {
        console.log("тЬЕ Using cached response");
        const cached = responseCache.get(cacheKey);
        await sendViaHeltar(phone, cached.response, cached.type);
        // Update history ONLY after sending
        const user = await getUserState(phone);
        const updatedHistory = [...(user.chat_history || []), { role: 'assistant', content: cached.response }];
        await updateUserState(phone, {
            chat_history: updatedHistory,
            last_message: cached.response,
            last_message_role: 'assistant'
            // Stage is already updated before calling this function
        });
        return;
    }

    const aiResponseResult = await getEnhancedAIResponseWithRetry(phone, text, language, context);

    if (aiResponseResult && aiResponseResult.response) {
         responseCache.set(cacheKey, aiResponseResult);
         setTimeout(() => responseCache.delete(cacheKey), 300000); // 5 min cache
    }
    // Message sending and history update happen inside getEnhancedAIResponse or getContextualFallback
    return;
}

async function getEnhancedAIResponseWithRetry(phone, text, language, context, retries = 2) {
    for (let attempt = 0; attempt <= retries; attempt++) {
        try {
            // getEnhancedAIResponse now returns {response, type} or throws error
            return await getEnhancedAIResponse(phone, text, language, context);
        } catch (error) {
            console.error(`тЭМ OpenAI attempt ${attempt + 1} failed for ${phone}:`, error.message);

            if (attempt === retries) {
                console.log(`ЁЯФД All retries exhausted for ${phone}, using fallback`);
                // getContextualFallback sends the message itself and updates history
                await getContextualFallback(phone, text, language, context);
                return null; // Return null to indicate failure after fallback
            }

            await new Promise(resolve => setTimeout(resolve, 1500 * Math.pow(2, attempt))); // Increased delay
        }
    }
}

/* ---------------- [FIXED] AI RESPONSE FUNCTION ---------------- */
// This function now returns {response, type} on success or throws an error on failure.
// It *also* sends the message and updates history.

let aiCallCounter = 0; // Global counter for debugging

async function getEnhancedAIResponse(phone, text, language, conversationContext = {}) {
  // We throw an error, so the retry logic in getEnhancedAIResponseWithRetry can catch it.
  if (!OPENAI_KEY || OPENAI_KEY === '') {
    console.log(`ЁЯФД No OpenAI key for ${phone}, using fallback response`);
    throw new Error("тЭМ No OpenAI key configured");
  }

  console.log(`ЁЯдЦ Using STRICT OpenAI for short response for ${phone}...`);

  const systemPrompt = ENHANCED_SYSTEM_PROMPT[language] || ENHANCED_SYSTEM_PROMPT.english;

  const user = await getUserState(phone); // Fetch latest state *inside* the function
  const history = user.chat_history || [];
  const currentContext = conversationContext; // Use the context passed from the webhook

  // Determine if it's a simple question or emotional expression for the prompt
  const isEmotional = currentContext.emotionalTone !== 'neutral' || isEmotionalExpression(text);
  const isQuestion = currentContext.isQuestion; // Use context built earlier

  // *** [FIXED] Bug #D: Language Bleed-over ***
  // Forcefully tell the AI which language to use in the prompt.
  const userPrompt = language === "Hindi"
    ? `рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛ рд╕рдВрджреЗрд╢: "${text}"

рдкрд┐рдЫрд▓рд╛ рд╕рдВрджрд░реНрдн: ${currentContext.previousTopics.join(', ') || 'рдирдпрд╛ рд╕рдВрд╡рд╛рдж'}
рднрд╛рд╡рдирд╛рддреНрдордХ рд╕реНрдерд┐рддрд┐: ${isEmotional ? currentContext.emotionalTone : 'рдкреВрдЫрддрд╛рдЫ'}
рдХреНрдпрд╛ рдпрд╣ рдкрд┐рдЫрд▓реА рдмрд╛рддрдЪреАрдд рдХрд╛ рдЬрд╛рд░реА рд░реВрдк рд╣реИ? ${currentContext.isFollowUp ? 'рд╣рд╛рдБ' : 'рдирд╣реАрдВ'}

**рдмрд╣реБрдд рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдЖрдкрдХреЛ рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рд╣реА рдЬрд╡рд╛рдм рджреЗрдирд╛ рд╣реИред**
${ENHANCED_SYSTEM_PROMPT.hindi}` // System prompt with conditional logic
    : `User message: "${text}"

Previous context: ${currentContext.previousTopics.join(', ') || 'New conversation'}
Emotional tone: ${isEmotional ? currentContext.emotionalTone : 'questioning'}
Is this continuing previous discussion? ${currentContext.isFollowUp ? 'Yes' : 'No'}

**VERY IMPORTANT: You MUST reply in English only.**
${ENHANCED_SYSTEM_PROMPT.english}`; // System prompt with conditional logic

  console.log(`ЁЯУд Sending to OpenAI for ${phone} with STRICT word limit`);

  // --- FIX: Assemble the 'messages' array ---
  const messages = [
      { role: "system", content: systemPrompt },
      // Use pruned history from getUserState
      ...history, // history is already pruned
      { role: "user", content: userPrompt } // Use the refined user prompt
  ];
  // --- END FIX ---

  const body = {
    model: OPENAI_MODEL,
    messages: messages, // Now 'messages' is correctly defined
    max_tokens: 180, // STRICTLY LIMITED to enforce brevity
    temperature: 0.7
  };

  aiCallCounter++;
  console.log(`\n--- OpenAI Call #${aiCallCounter} for ${phone} ---`);
  // console.log(`System Prompt:\n${systemPrompt.substring(0, 200)}...`); // Log less verbosely
  // console.log(`User Prompt:\n${userPrompt.substring(0, 200)}...`);
  const resp = await axios.post("https://api.openai.com/v1/chat/completions", body, {
    headers: {
      Authorization: `Bearer ${OPENAI_KEY}`,
      "Content-Type": "application/json"
    },
    timeout: 30000 // Increased timeout again
  });

  const aiResponse = resp.data?.choices?.[0]?.message?.content;
  console.log(`Raw AI Response for ${phone}:\n${aiResponse}`);

  if (aiResponse && aiResponse.trim().length > 5) { // Check for minimal length
    console.log(`тЬЕ STRICT OpenAI response received for ${phone}`);
    // *** FIX: Remove the generic "Want to know more?" first ***
    let cleanResponse = aiResponse
      .replace(/Want to know more\?.*$/im, '') // Added 'i' and 'm' flags
      .replace(/Does this seem helpful\?.*$/im, '')
      .replace(/рдХреНрдпрд╛ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ\?.*$/im, '')
      .replace(/рд╕рдордЭ рдореЗрдВ рдЖрдпрд╛\?.*$/im, '')
      .trim(); // Trim whitespace

    // --- [FIXED] BUG #3 & C: Mixed-Language Follow-up & 'undefined' bug ---
    const sentences = cleanResponse.split(/[.!?ред]/).filter(s => s.trim().length > 3); // Slightly lower sentence length threshold
    console.log(` Cleaned sentences for ${phone}: ${sentences.length}`);
    if (sentences.length > 0) {
      const lastSentence = sentences[sentences.length - 1].trim();
      console.log(` Last sentence for ${phone}: "${lastSentence}"`);

      // Determine language from the response itself, not the (potentially stale) 'language' variable
      const responseLanguage = /[\u0900-\u097F]/.test(cleanResponse) ? 'Hindi' : 'English';

      if (!lastSentence.includes('?')) {
        // AI didn't add a question, so we add one.
        console.log(` AI did not add question for ${phone}. Adding engagement question.`);
        const engagementQuestion = getEngagementQuestion(phone, responseLanguage);
         // Append question carefully, check for existing punctuation
        cleanResponse = cleanResponse.replace(/[.!?ред]\s*$/, '') + '. ' + engagementQuestion;

      } else { // AI added a question, check if repetitive
        const repetitiveQuestions = [
          "what's feeling heaviest right now?", // Normalized case
          "what are your thoughts?",
          "does this seem helpful?",
          "рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рдХреНрдпрд╛ рднрд╛рд░реА рд▓рдЧ рд░рд╣рд╛ рд╣реИ?",
          "рдЖрдк рдХреНрдпрд╛ рд╕реЛрдЪрддреЗ рд╣реИрдВ?",
          "рдХреНрдпрд╛ рдпрд╣ рдорджрджрдЧрд╛рд░ рд▓рдЧрд╛?"
        ];

        if (repetitiveQuestions.some(q => lastSentence.toLowerCase().includes(q))) {
          // It's repetitive, replace it.
          console.log(` Replacing repetitive question for ${phone}: "${lastSentence}"`);
          const engagementQuestion = getEngagementQuestion(phone, responseLanguage);
          // Replace the last sentence (question)
          cleanResponse = sentences.slice(0, -1).join('. ') + '. ' + engagementQuestion;
        }
        // Else: The AI provided a good, unique question. We leave it alone.
      }
    } else {
        // Response was very short and had no sentences, add a question
        console.log(` AI response too short for ${phone}. Adding engagement question.`);
        const responseLanguage = /[\u0900-\u097F]/.test(cleanResponse) ? 'Hindi' : 'English';
        const engagementQuestion = getEngagementQuestion(phone, responseLanguage);
        cleanResponse = cleanResponse.replace(/[.!?ред]\s*$/, '') + '. ' + engagementQuestion;
    }
    console.log(` Final Clean Response for ${phone}:\n${cleanResponse}`);
    // --- END FIX ---

    // Send the potentially modified response
    // Use sendCompleteResponse which handles optimization via sendViaHeltar
    await sendCompleteResponse(phone, cleanResponse, language, "enhanced_ai_response");


    // Update history AFTER sending
    const finalHistory = [...history, { // Use history fetched at start of function
      role: 'assistant',
      content: cleanResponse
    }];
    await updateUserState(phone, {
      chat_history: finalHistory, // Save the updated history
      last_message: cleanResponse,
      last_message_role: 'assistant'
      // Stage is updated before this function is called
    });

    return { response: cleanResponse, type: "enhanced_ai_response" }; // Return success
  } else {
    console.error(`тЭМ Empty or invalid response from OpenAI for ${phone}. Raw: ${aiResponse}`);
    throw new Error(`тЭМ Empty or invalid response from OpenAI for ${phone}`);
  }
}


async function getContextualFallback(phone, text, language, context) {
  console.log(`ЁЯФД Using contextual fallback for ${phone}`);
  const emotion = context?.emotionalTone || detectEmotionAdvanced(text)?.emotion || 'stress';
  const wisdom = ENHANCED_GITA_WISDOM[emotion] || ENHANCED_GITA_WISDOM.stress;
  const responses = language === "Hindi" ? wisdom.teachings.hindi : wisdom.teachings.english;
  const selected = responses[Math.floor(Math.random() * responses.length)];

  // This function sends the message
  await sendCompleteResponse(phone, selected, language, "contextual_fallback");

  // And we must update the history AFTER sending
  const user = await getUserState(phone); // Fetch latest state
  const updatedHistory = [...(user.chat_history || []), { role: 'assistant', content: selected }];
  await updateUserState(phone, {
      chat_history: updatedHistory,
      last_message: selected,
      last_message_role: 'assistant'
  });
}

/* ---------------- Menu Choice Handler ---------------- */
async function handleEnhancedMenuChoice(phone, choice, language, user) {
  console.log(`ЁЯУЭ Menu choice received for ${phone}: ${choice}, language: ${language}`);

  const choices = {
    "1": {
      hindi: {
        prompt: "ЁЯМЕ рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП рд╕рд╣реА рдорд╛рд░реНрдЧрджрд░реНрд╢рдиред рдХреГрдкрдпрд╛ рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдк рдХрд┐рд╕ рдкрд░рд┐рд╕реНрдерд┐рддрд┐ рдореЗрдВ рд╣реИрдВ?",
        action: "immediate_guidance"
      },
      english: {
        prompt: "ЁЯМЕ Right guidance for your current challenge. Please briefly describe your situation?",
        action: "immediate_guidance"
      }
    },
    "2": {
      hindi: {
        prompt: async () => {
          const wisdom = await getDailyWisdom("Hindi");
          return wisdom;
        },
        action: "daily_wisdom"
      },
      english: {
        prompt: async () => {
          const wisdom = await getDailyWisdom("English");
          return wisdom;
        },
        action: "daily_wisdom"
      }
    },
    "3": { // Corrected key from "3."
      hindi: {
        prompt: "ЁЯТм рдореИрдВ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ? рдореИрдВ рдЧреАрддрд╛ рдХреА рд╢рд┐рдХреНрд╖рд╛рдУрдВ рдХреЗ through рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛ред",
        action: "conversation"
      },
      english: {
        prompt: "ЁЯТм I'm here to listen. Please share how you're feeling? I'll help you through the teachings of Gita.",
        action: "conversation"
      }
    },
    "4": {
      hindi: {
        prompt: "ЁЯОУ рдЧреАрддрд╛ рдЬреНрдЮрд╛рди: рднрдЧрд╡рдж рдЧреАрддрд╛ 18 рдЕрдзреНрдпрд╛рдпреЛрдВ рдореЗрдВ рд╡рд┐рднрд╛рдЬрд┐рдд рд╣реИ, рдЬреЛ рдЬреАрд╡рди рдХреЗ рд╡рд┐рднрд┐рдиреНрди рдкрд╣рд▓реБрдУрдВ рдкрд░ рдкреНрд░рдХрд╛рд╢ рдбрд╛рд▓рддреА рд╣реИред рдЖрдк рдХрд┐рд╕ рд╡рд┐рд╖рдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
        action: "knowledge_seeker"
      },
      english: {
        prompt: "ЁЯОУ Gita Knowledge: The Bhagavad Gita is divided into 18 chapters, each illuminating different aspects of life. What specific topic would you like to know about?",
        action: "knowledge_seeker"
      }
    },
    "5": {
      hindi: {
        prompt: "ЁЯМИ рд╕рдВрдкреВрд░реНрдг рдорд╛рд░реНрдЧрджрд░реНрд╢рди: рдЖрдЗрдП рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐, рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдЬрд┐рдЬреНрдЮрд╛рд╕рд╛, рдФрд░ рджреИрдирд┐рдХ рдЪреБрдиреМрддрд┐рдпреЛрдВ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░реЗрдВред рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ рдЖрдк рдХрд╣рд╛рдБ рд╕реЗ рд╢реБрд░реВ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
        action: "comprehensive_guidance"
      },
      english: {
        prompt: "ЁЯМИ Complete Guidance: Let's discuss your current situation, spiritual curiosity, and daily challenges. Please tell me where you'd like to start?",
        action: "comprehensive_guidance"
      }
    }
  };

  const selected = choices[choice];
  if (!selected) {
    // If not a menu choice (e.g., user typed text), treat as direct conversation
    console.log(`ЁЯФД Treating as direct conversation instead of menu choice for ${phone}`);
    await updateUserState(phone, {
        conversation_stage: "chatting"
    });

    // Build context for the AI
    const conversationContext = buildConversationContext(user, choice); // 'choice' is the text

    await getCachedAIResponse(phone, choice, language, conversationContext);
    return;
  }

  try {
    let promptContent;
    const selectedLang = selected[language] || selected.english;

    if (typeof selectedLang.prompt === 'function') {
      promptContent = await selectedLang.prompt();
    } else {
      promptContent = selectedLang.prompt;
    }

    console.log(`тЬЕ Sending menu response for choice ${choice} to ${phone}`);
    // Use sendViaHeltar directly to avoid double optimization
    await sendViaHeltar(phone, promptContent, `menu_${selectedLang.action}`);

    // Update history *after* sending
     const updatedHistory = [...(user.chat_history || []), { role: 'assistant', content: promptContent }];
    await updateUserState(phone, {
      conversation_stage: 'chatting', // FIX: Move to 'chatting' so next reply is handled by AI
      last_menu_choice: choice,
      last_menu_shown: new Date().toISOString(),
      chat_history: updatedHistory, // Save history
      last_message: promptContent,
      last_message_role: 'assistant'
    });

  } catch (error) {
    console.error(`тЭМ Menu choice error for ${phone}, choice ${choice}:`, error);
    const fallbackMessage = language === "Hindi"
      ? "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рдЖрдИ рд╣реИред рдХреГрдкрдпрд╛ рд╕реАрдзреЗ рдЕрдкрдиреА рдмрд╛рдд рд▓рд┐рдЦреЗрдВред"
      : "Sorry, there was a technical issue. Please type your message directly.";
    await sendViaHeltar(phone, fallbackMessage, "menu_error");
    // Update history for error message
    const updatedHistory = [...(user.chat_history || []), { role: 'assistant', content: fallbackMessage }];
    await updateUserState(phone, {
        chat_history: updatedHistory,
        last_message: fallbackMessage,
        last_message_role: 'assistant'
    });
  }
}

/* ---------------- Daily Wisdom System ---------------- */
async function getDailyWisdom(language) {
  try {
    const now = new Date();
    const start = new Date(now.getFullYear(), 0, 0);
    const diff = now.getTime() - start.getTime(); // Use getTime()
    const oneDay = 1000 * 60 * 60 * 24;
    const dayOfYear = Math.floor(diff / oneDay);

    const countResult = await dbPool.query("SELECT COUNT(*) as total FROM lessons");
    const totalLessons = parseInt(countResult.rows[0].total) || 2; // Default to 2 if count fails
    const lessonNumber = (dayOfYear % totalLessons) + 1;

    const result = await dbPool.query(
      `SELECT lesson_number, verse, translation, commentary, reflection_question
       FROM lessons WHERE lesson_number = $1`,
      [lessonNumber]
    );

    if (result.rows.length === 0) {
       console.warn(`тЪая╕П No lesson found for number ${lessonNumber}, using fallback.`);
      return getFallbackDailyWisdom(language, dayOfYear);
    }

    const lesson = result.rows[0];
    return formatDailyWisdom(lesson, language, dayOfYear);

  } catch (error) {
    console.error("Daily wisdom error:", error);
    return getFallbackDailyWisdom(language, 1); // Fallback to day 1 on error
  }
}

function formatDailyWisdom(lesson, language, dayOfYear) {
  if (language === "Hindi") {
    return `ЁЯУЦ *рдЖрдЬ рдХреА рдЧреАрддрд╛ рд╢рд┐рдХреНрд╖рд╛ (рджрд┐рди ${dayOfYear})*

ЁЯОп *рд╢реНрд▓реЛрдХ ${lesson.lesson_number}:*
"${lesson.verse}"

ЁЯТл *рдЕрд░реНрде:*
${lesson.translation}

ЁЯМЕ *рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЕрдиреБрдкреНрд░рдпреЛрдЧ:*
${lesson.commentary}

ЁЯдФ *рдЖрдЬ рдХрд╛ рдЕрднреНрдпрд╛рд╕:*
${lesson.reflection_question}

тЬи *рддрддреНрдХрд╛рд▓ рдХрд╛рд░реНрдпрдпреЛрдЬрдирд╛:*
1. рдЗрд╕ рд╢реНрд▓реЛрдХ рдХреЛ 3 рдмрд╛рд░ рдкрдврд╝реЗрдВ
2. рджрд┐рди рдореЗрдВ 2 рдмрд╛рд░ рдЗрд╕рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ
3. рд╢рд╛рдо рдХреЛ рдкрд░рд┐рдгрд╛рдо рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ

рдХреНрдпрд╛ рдЖрдк рдЖрдЬ рдЗрд╕ рдЕрднреНрдпрд╛рд╕ рдХреЛ рдХрд░рдиреЗ рдХрд╛ рд╕рдВрдХрд▓реНрдк рд▓реЗрдВрдЧреЗ?`;
  } else {
    return `ЁЯУЦ *Today's Gita Wisdom (Day ${dayOfYear})*

ЁЯОп *Verse ${lesson.lesson_number}:*
"${lesson.verse}"

ЁЯТл *Translation:*
${lesson.translation}

ЁЯМЕ *Practical Application:*
${lesson.commentary}

ЁЯдФ *Today's Practice:*
${lesson.reflection_question}

тЬи *Immediate Action Plan:*
1. Read this verse 3 times
2. Reflect on it twice today
3. Share insights tonight

Will you commit to this practice today?`;
  }
}

function getFallbackDailyWisdom(language, dayOfYear) {
  // Use lesson 1 as fallback if lesson 2 isn't appropriate
  const fallbackLesson = {
    lesson_number: 1,
    verse: "рдХрд░реНрдордгреНрдпреЗрд╡рд╛рдзрд┐рдХрд╛рд░рд╕реНрддреЗ рдорд╛ рдлрд▓реЗрд╖реБ рдХрджрд╛рдЪрдиред",
    translation: "You have the right to work only, but never to the fruits.",
    commentary: "Focus on your duty without attachment to results.",
    reflection_question: "What action can I take today without worrying about the outcome?"
  };
  return formatDailyWisdom(fallbackLesson, language, dayOfYear);
}

/* ---------------- [FIXED] LANGUAGE SWITCHING ---------------- */
// *** FIX: Simplified logic. It no longer tries to respond to the switch command. ***
// It just confirms the switch and shows the menu.
async function handleLanguageSwitch(phone, newLanguage) {
    const confirmationMessage = newLanguage === 'English'
        ? "тЬЕ Language switched to English. How can I help you today? ЁЯШК"
        : "тЬЕ рднрд╛рд╖рд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдмрджрд▓ рдЧрдИред рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? ЁЯШК";

    // Send confirmation first
    await sendViaHeltar(phone, confirmationMessage, "language_switch");

    // Update history with confirmation
    const user = await getUserState(phone);
    const updatedHistory = [...(user.chat_history || []), { role: 'assistant', content: confirmationMessage }];
    await updateUserState(phone, {
        chat_history: updatedHistory,
        last_message: confirmationMessage,
        last_message_role: 'assistant'
    });


    // ALWAYS reset to menu after an explicit language switch.
    await resetToMenuStage(phone, newLanguage); // This sends the menu and updates history again
}

async function handleSmallTalk(phone, text, language) {
    let response;
    const lower = text.toLowerCase();
    if (language === "Hindi") {
        if (lower.includes('thank') || lower.includes('рд╢реБрдХреНрд░рд┐рдпрд╛') || lower.includes('рдзрдиреНрдпрд╡рд╛рдж')) {
            response = "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯЩП рдХреНрдпрд╛ рдЖрдк рдФрд░ рдХреБрдЫ рдЪрд╛рд╣реЗрдВрдЧреЗ рдпрд╛ рдХрд┐рд╕реА рдФрд░ рд╡рд┐рд╖рдп рдкрд░ рдмрд╛рдд рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?";
        } else if (lower.includes('bye')) {
            response = "рдзрдиреНрдпрд╡рд╛рдж! рдЬрдм рднреА рдЬрд░реВрд░рдд рд╣реЛ, рдореИрдВ рдпрд╣рд╛рдБ рд╣реВрдБред рд╣рд░реЗ рдХреГрд╖реНрдг! ЁЯМЯ";
        } else {
            response = "рдареАрдХ рд╣реИ! ЁЯШК рдЖрдк рдЖрдЧреЗ рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ? рдХреНрдпрд╛ рдХреЛрдИ рдФрд░ рдкреНрд░рд╢реНрди рд╣реИ рдЖрдкрдХреЗ рдорди рдореЗрдВ?";
        }
    } else {
        if (lower.includes('thank')) {
            response = "You're welcome! ЁЯЩП Is there anything else you need or would you like to discuss another topic?";
        } else if (lower.includes('bye')) {
            response = "Thank you! I'm here whenever you need me. Hare Krishna! ЁЯМЯ";
        } else {
            response = "Okay! ЁЯШК What would you like to know more about? Do you have any other questions in mind?";
        }
    }
    await sendViaHeltar(phone, response, "small_talk");
    // Update history
    const user = await getUserState(phone);
    const updatedHistory = [...(user.chat_history || []), { role: 'assistant', content: response }];
    await updateUserState(phone, {
        chat_history: updatedHistory,
        last_message: response,
        last_message_role: 'assistant'
    });
}

function parseWebhookMessage(body) {
  // console.log("ЁЯУи Raw webhook body:", JSON.stringify(body).substring(0, 200)); // Reduce logging
  if (!body) return null;
  // Heltar format (assuming it might still be used)
  if (body?.messages?.[0]) {
    // console.log("ЁЯУ▒ Heltar format message detected");
    return body.messages[0];
  }
  // Meta format
  if (body?.object === 'whatsapp_business_account') {
    const message = body.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
    if (message) {
      // console.log("ЁЯУ▒ Meta WhatsApp format detected");
      return message;
    }
  }
  // Simple format (for testing)
  if (body?.from && body?.text) {
    // console.log("ЁЯУ▒ Simple format message detected");
    return body;
  }
  console.log("тЭУ Unknown webhook format");
  return null;
}

/* ---------------- ЁЯЪи MAIN WEBHOOK HANDLER (COMPLETE & FIXED) ---------------- */
app.post("/webhook", async (req, res) => {
  // Respond immediately before processing
  res.status(200).send("OK");

  try {
    const body = req.body || {};
    const msg = parseWebhookMessage(body);

    if (!msg) {
      // console.log("тЪая╕П Ignoring non-message webhook event."); // Reduce logging
      return;
    }

    const phone = msg?.from || msg?.clientWaNumber;
    let rawText = "";

    // Handle different message types from Meta/Heltar more robustly
     const messageType = msg.type;
     if (messageType === "text") {
         rawText = msg.text?.body || "";
     } else if (messageType === "button") {
         rawText = msg.button?.payload || msg.button?.text || ""; // Payload preferred
     } else if (messageType === "interactive") {
         const interactive = msg.interactive;
         if (interactive?.type === 'button_reply') {
             rawText = interactive.button_reply?.id || interactive.button_reply?.title || ""; // ID preferred
         } else if (interactive?.type === 'list_reply') {
             rawText = interactive.list_reply?.id || interactive.list_reply?.title || ""; // ID preferred
         }
     } else if (msg.text) { // Fallback for simple format
         rawText = msg.text;
     }


    const text = String(rawText || "").trim();

    if (!phone || text.length === 0) {
      console.warn(`тЪая╕П Webhook missing phone or text. Phone: ${phone}, Text: "${text}"`);
      return;
    }

    console.log(`\nЁЯУй Incoming from ${phone}: "${text}"`);
    await trackIncoming(phone, text); // Track incoming message

    // --- Start Processing ---
    const user = await getUserState(phone); // Get state once

    // --- Language Determination ---
    const languageResult = await determineUserLanguage(phone, text, user);
    let language = languageResult.language; // This is the language to USE for the response
    const isLanguageSwitch = languageResult.isSwitch; // Is it an EXPLICIT command?

    console.log(`ЁЯОп Processing for ${phone}: language=${language}, stage=${user.conversation_stage}, is_switch=${isLanguageSwitch}`);

    // --- Handle EXPLICIT language switching FIRST ---
    if (isLanguageSwitch) {
      console.log(`ЁЯФД Explicit language switch triggered for ${phone}: "${text}"`);
      await handleLanguageSwitch(phone, language); // handleLanguageSwitch now resets to menu
      return; // Stop processing here
    }

    // --- Handle stage reset SECOND ---
    if (shouldResetToMenu(text, user.conversation_stage)) {
      console.log(`ЁЯФД Stage reset triggered for ${phone}: "${text}"`);
      await resetToMenuStage(phone, language); // resetToMenuStage sends the menu
      return; // Stop processing here
    }

    // --- Handle Template Buttons THIRD ---
    if (isTemplateButtonResponse(text)) {
        console.log(`ЁЯОп Template button detected for ${phone}: "${text}"`);
        const handled = await handleTemplateButtonResponse(phone, text, language, user);
        if (handled) {
            console.log(`тЬЕ Template button successfully handled for ${phone}`);
            return; // Stop processing here
        } else {
             console.warn(`тЪая╕П Template button "${text}" detected but not handled for ${phone}. Falling through.`);
        }
    }


    // --- Update history BEFORE AI call ---
    // (Only add user message, bot message added after response)
    const currentHistory = [...(user.chat_history || []), { role: 'user', content: text }];
    await updateUserState(phone, {
        chat_history: currentHistory, // Save user message
        last_message: text,
        last_message_role: 'user'
    });
    // Update local user object for this request cycle
    user.chat_history = currentHistory;
    user.last_message = text;
    user.last_message_role = 'user';


    // --- Handle menu choices FOURTH ---
    if (user.conversation_stage === "menu" && /^[1-5]$/.test(text.trim())) {
        console.log(`тЬЕ Intent: Menu Choice for ${phone}`);
        await handleEnhancedMenuChoice(phone, text.trim(), language, user); // Sends response & updates state/history
        return; // Stop processing here
    }

    // --- Build context for remaining cases ---
    const conversationContext = buildConversationContext(user, text);

    // --- Handle Capabilities/Small Talk FIFTH ---
    if (isCapabilitiesQuery(text.toLowerCase())) {
        console.log(`тЬЕ Intent: Capabilities Query for ${phone}`);
        const reply = language === "Hindi"
            ? "рдореИрдВ рд╕рд╛рд░рдереА AI рд╣реВрдБ, рдЖрдкрдХрд╛ рдирд┐рдЬреА рдЧреАрддрд╛ рд╕рд╛рдереА! ЁЯЩП рдореИрдВ рдЖрдкрдХреЛ рдЬреАрд╡рди рдХреА рдЪреБрдиреМрддрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рднрдЧрд╡рдж рдЧреАрддрд╛ рдХрд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реВрдБред рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕ рд╡рд┐рд╢реЗрд╖ рдореБрджреНрджреЗ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?"
            : "I'm Sarathi AI, your personal Gita companion! ЁЯЩП I provide guidance from Bhagavad Gita for life's challenges. Is there a specific issue you'd like to discuss?";
        await sendViaHeltar(phone, reply, "capabilities");
        // Update history
         const finalHistory = [...currentHistory, { role: 'assistant', content: reply }];
         await updateUserState(phone, { chat_history: finalHistory, last_message: reply, last_message_role: 'assistant' });
        return; // Stop processing here
    }

    if (isSmallTalk(text.toLowerCase())) {
        console.log(`тЬЕ Intent: Small Talk for ${phone}`);
        await handleSmallTalk(phone, text, language); // Sends response & updates history
        return; // Stop processing here
    }

    // --- Update stage if breaking menu loop SIXTH ---
    if (user.conversation_stage === 'menu') {
        console.log(`тЬЕ User ${phone} is breaking 'menu' loop. Updating stage to 'chatting'.`);
        await updateUserState(phone, {
            conversation_stage: "chatting"
        });
        user.conversation_stage = "chatting"; // Update local object too
    }

    // --- DEFAULT: ENHANCED AI RESPONSE (The Rest) ---
    console.log(`тД╣я╕П Intent: General/Emotional for ${phone} -> Using Enhanced AI (Stage: ${user.conversation_stage})`);

    // getCachedAIResponse handles sending & history update
    await getCachedAIResponse(phone, text, language, conversationContext);

  } catch (err) {
    console.error("тЭМ Webhook error:", err?.message || err);
     // Attempt to notify user of error? Only if phone is known.
     const phone = req.body?.from || req.body?.messages?.[0]?.from || req.body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0]?.from;
     if (phone) {
         try {
             const userState = await getUserState(phone);
             const errorLang = userState.language_preference || 'English';
             const errorMsg = errorLang === 'Hindi'
                 ? "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореБрдЭреЗ рдПрдХ рдЖрдВрддрд░рд┐рдХ рддреНрд░реБрдЯрд┐ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рдирд╛ рдкрдбрд╝рд╛ред рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
                 : "Apologies, I encountered an internal error. Please try again shortly.";
             await sendViaHeltar(phone, errorMsg, "error_fallback");
         } catch (sendError) {
             console.error("тЭМ Failed to send error message to user:", sendError);
         }
     }
  }
});


/* ---------------- Health check ---------------- */
app.get("/health", (req, res) => {
  res.json({
    status: "ok",
    bot: BOT_NAME,
    timestamp: new Date().toISOString(),
    features: [
      "тЬЕ [FIXED] Bug #1: Implicit Language Reset",
      "тЬЕ [FIXED] Bug #2: Romanized Hindi Detection",
      "тЬЕ [FIXED] Bug #3: Mixed-Language AI Response",
      "тЬЕ [FIXED] Bug #4: Menu Conversation Loop",
      "тЬЕ [FIXED] Bug #5: AI Monotony (Conditional Prompt)",
      "тЬЕ [FIXED] Bug #6: 'undefined' Follow-up Question",
      "тЬЕ [FIXED] Bug #7: AI Language Bleed-over (Forced Prompt)",
      "тЬЕ [FIXED] Bug #8: 'Want to know more?' Loop",
      "тЬЕ [NEW] Pessimistic Start & Convincing Follow-up Strategy",
      "тЬЕ [NEW] 'рдЕрднреНрдпрд╛рд╕' Button Handling",
      "Daily Wisdom System",
      "Response Caching",
      "Connection Pooling",
      "Template Button Handling",
      "Menu System",
      "AI Fallbacks"
    ],
    templateButtons: Object.keys(OPTIMIZED_TEMPLATE_RESPONSES),
    cacheSize: responseCache.size,
    databasePoolStats: { // Provide more pool details
        totalCount: dbPool.totalCount,
        idleCount: dbPool.idleCount,
        waitingCount: dbPool.waitingCount,
    },
    message_length_limit: MAX_REPLY_LENGTH
  });
});

/* ---------------- Stage Timeout Management ---------------- */
async function cleanupStuckStages() {
  try {
    const result = await dbPool.query(`
      UPDATE users
      SET conversation_stage = 'menu',
          pending_followup = NULL,
          followup_type = NULL
      WHERE last_activity_ts < NOW() - INTERVAL '1 hour'
      AND conversation_stage NOT IN ('menu', 'subscribed') -- Don't reset subscribed users
    `);

    if (result.rowCount > 0) {
      console.log(`ЁЯФД Cleaned up ${result.rowCount} stuck user stages`);
    }
  } catch (err) {
    console.error("Stage cleanup error:", err);
  }
}

// Run cleanup every 30 minutes
setInterval(cleanupStuckStages, 30 * 60 * 1000);

/* ---------------- Start server ---------------- */
app.listen(PORT, () => {
  validateEnvVariables();
  console.log(`\nЁЯЪА ${BOT_NAME} COMPLETE REVIVED v4 listening on port ${PORT}`);
  console.log("тЬЕ ALL CRITICAL ISSUES FIXED:");
  console.log("   ЁЯЪи LANGUAGE: Robust implicit/explicit detection (FIXED)");
  console.log("   ЁЯЪи AI PROMPT: Conditional 'Pessimistic' strategy (FIXED)");
  console.log("   ЁЯЪи LOGIC: No more 'menu' loop or language resets (FIXED)");
  console.log("   ЁЯЪи BUGS: 'undefined', language bleed-over, 'Want to know more?' (FIXED)");
  console.log("   тЬи NEW: 'рдЕрднреНрдпрд╛рд╕' button integrated.");
  setupDatabase().catch(console.error);
});

process.on('SIGINT', async () => {
  console.log('\nЁЯЫС Shutting down gracefully...');
  await dbPool.end();
  console.log('Database pool closed.');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nЁЯЫС SIGTERM received, shutting down gracefully...');
  await dbPool.end();
   console.log('Database pool closed.');
  process.exit(0);
});

