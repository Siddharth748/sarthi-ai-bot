// index.js тАФ SarathiAI (PRODUCTION READY v5 - COMPLETE)
import dotenv from "dotenv";
dotenv.config();

import express from "express";
import axios from "axios";
import pg from "pg";

const { Pool } = pg;
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

/* ---------------- Config / env ---------------- */
const BOT_NAME = process.env.BOT_NAME || "SarathiAI";
const PORT = process.env.PORT || 8080;

const DATABASE_URL = (process.env.DATABASE_URL || "").trim();
const OPENAI_KEY = (process.env.OPENAI_API_KEY || "").trim();
const OPENAI_MODEL = (process.env.OPENAI_MODEL || "gpt-4o-mini").trim();

const HELTAR_API_KEY = (process.env.HELTAR_API_KEY || "").trim();
const HELTAR_PHONE_ID = (process.env.HELTAR_PHONE_ID || "").trim();

const MAX_REPLY_LENGTH = parseInt(process.env.MAX_REPLY_LENGTH || "350", 10) || 350;

/* ---------------- Enhanced Database Pool ---------------- */
const dbPool = new Pool({
    connectionString: DATABASE_URL,
    ssl: { rejectUnauthorized: false },
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
    maxUses: 7500,
});

/* ---------------- Response Cache ---------------- */
const responseCache = new Map();

/* =============== COMPLETE TEMPLATE RESPONSE SYSTEM =============== */
const OPTIMIZED_TEMPLATE_RESPONSES = {
    // PROBLEM SOLVER TEMPLATE BUTTONS
    'work stress': {
        english: `Work pressure overwhelming? ЁЯШФ That's a heavy, draining feeling.

Krishna says in Gita 2.47: "Focus on duty, not results."

This moment will pass. Your inner strength is greater than any stress. ЁЯХЙя╕П

Let's pinpoint this: What's the *one* task weighing most heavily on you?`,
        
        hindi: `рдХрд╛рдо рдХрд╛ рддрдирд╛рд╡ рднрд╛рд░реА рд▓рдЧ рд░рд╣рд╛? ЁЯШФ рдпрд╣ рдПрдХ рдердХрд╛ рджреЗрдиреЗ рд╡рд╛рд▓реА рднрд╛рд╡рдирд╛ рд╣реИред

рдХреГрд╖реНрдг рдЧреАрддрд╛ 2.47 рдореЗрдВ рдХрд╣рддреЗ: "рдХрд░реНрдо рдХрд░реЛ, рдлрд▓ рдХреА рдЪрд┐рдВрддрд╛ рдордд рдХрд░реЛред"

рдпрд╣ рд╕рдордп рднреА рдмреАрдд рдЬрд╛рдПрдЧрд╛ред рдЖрдкрдХреА рдЖрдВрддрд░рд┐рдХ рд╢рдХреНрддрд┐ рддрдирд╛рд╡ рд╕реЗ рдмрдбрд╝реА рд╣реИред ЁЯХЙя╕П

рдЪрд▓рд┐рдП рдореБрджреНрджреЗ рдкрд░ рдЖрддреЗ рд╣реИрдВ: рд╡реЛ *рдХреМрди рд╕рд╛ рдПрдХ* рдХрд╛рдо рд╣реИ рдЬреЛ рд╕рдмрд╕реЗ рднрд╛рд░реА рд▓рдЧ рд░рд╣рд╛ рд╣реИ?`
    },
    
    'relationship issues': {
        english: `Relationship struggles hurt deeply... ЁЯТФ It can feel very isolating.

Gita teaches: See the divine in every being, even when it's hard.

Krishna's wisdom can heal connections. ЁЯМЯ

What part of this feels most painful *to you* right now?`,
        
        hindi: `рд░рд┐рд╢реНрддреЛрдВ рдХреА рдкрд░реЗрд╢рд╛рдирд┐рдпрд╛рдБ рдЧрд╣рд░рд╛ рджреБрдЦ рджреЗрддреА рд╣реИрдВ... ЁЯТФ рдЗрд╕рдореЗрдВ рдмрд╣реБрдд рдЕрдХреЗрд▓рд╛рдкрди рдорд╣рд╕реВрд╕ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред

рдЧреАрддрд╛ рд╕рд┐рдЦрд╛рддреА: рд╣рд░ рдкреНрд░рд╛рдгреА рдореЗрдВ рджрд┐рд╡реНрдпрддрд╛ рджреЗрдЦреЛ, рддрдм рднреА рдЬрдм рдпрд╣ рдореБрд╢реНрдХрд┐рд▓ рд╣реЛред

рдХреГрд╖реНрдг рдХрд╛ рдЬреНрдЮрд╛рди рдЖрдкрдХреЗ рдЬреБрдбрд╝рд╛рд╡ рдХреЛ рдареАрдХ рдХрд░ рд╕рдХрддрд╛ рд╣реИред ЁЯМЯ

рдЕрднреА рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рджрд░реНрдж *рдЖрдкрдХреЛ* рдХрд┐рд╕ рдмрд╛рдд рдХрд╛ рд╣реИ?`
    },
    
    'personal confusion': {
        english: `Feeling lost about life's path? ЁЯМА That's a very common, human feeling.

Gita wisdom: Your soul is eternal, this confusion is temporary.

Krishna guides through every uncertainty. тЬи

What's the *one* decision that feels most unclear right now?`,
        
        hindi: `рдЬреАрд╡рди рдХрд╛ рд░рд╛рд╕реНрддрд╛ рднрдЯрдХрд╛ рд╣реБрдЖ рд▓рдЧрддрд╛ рд╣реИ? ЁЯМА рдпрд╣ рдПрдХ рдмрд╣реБрдд рд╣реА рд╕рд╛рдорд╛рдиреНрдп, рдорд╛рдирд╡реАрдп рднрд╛рд╡рдирд╛ рд╣реИред

рдЧреАрддрд╛ рдЬреНрдЮрд╛рди: рдЖрдкрдХреА рдЖрддреНрдорд╛ рдЕрдорд░ рд╣реИ, рдпрд╣ рднреНрд░рдо рдЕрд╕реНрдерд╛рдпреА рд╣реИред

рдХреГрд╖реНрдг рд╣рд░ рдЕрдирд┐рд╢реНрдЪрд┐рддрддрд╛ рдореЗрдВ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рджреЗрддреЗ рд╣реИрдВред тЬи

рд╡реЛ *рдХреМрди рд╕рд╛ рдПрдХ* рдирд┐рд░реНрдгрдп рд╣реИ рдЬреЛ рдЕрднреА рд╕рдмрд╕реЗ рдЕрд╕реНрдкрд╖реНрдЯ рд▓рдЧ рд░рд╣рд╛ рд╣реИ?`
    },
    
    'anxiety': {
        english: `Anxiety making everything feel out of control? ЁЯШ░ That feeling is exhausting.

Krishna reminds in Gita 2.56: "Be steady in sorrow and joy."

This wave will settle, revealing your calm center. ЁЯМК

What's the *one thought* that keeps looping in your mind? Let's face it together.`,
        
        hindi: `рдЪрд┐рдВрддрд╛ рд╕рдм рдХреБрдЫ рдмреЗрдХрд╛рдмреВ рд▓рдЧ рд░рд╣рд╛ рд╣реИ? ЁЯШ░ рдпрд╣ рднрд╛рд╡рдирд╛ рдердХрд╛ рджреЗрддреА рд╣реИред

рдХреГрд╖реНрдг рдЧреАрддрд╛ 2.56 рдореЗрдВ рдпрд╛рдж рджрд┐рд▓рд╛рддреЗ: "рджреБрдЦ рдФрд░ рд╕реБрдЦ рдореЗрдВ рд╕реНрдерд┐рд░ рд░рд╣реЛред"

рдпрд╣ рдЪрд┐рдВрддрд╛ рдХреА рд▓рд╣рд░ рдердореЗрдЧреА, рдЖрдкрдХрд╛ рд╢рд╛рдВрдд рдХреЗрдВрджреНрд░ рдкреНрд░рдХрдЯ рд╣реЛрдЧрд╛ред ЁЯМК

рд╡реЛ *рдХреМрди рд╕рд╛ рдПрдХ рд╡рд┐рдЪрд╛рд░* рд╣реИ рдЬреЛ рджрд┐рдорд╛рдЧ рдореЗрдВ рдШреВрдо рд░рд╣рд╛ рд╣реИ? рдЪрд▓рд┐рдП рдЙрд╕рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рддреЗ рд╣реИрдВред`
    },
    
    'custom help': {
        english: `I understand you need personalized guidance... ЁЯдФ

Krishna's Gita offers wisdom for every unique situation.

Your challenge deserves a specific solution, not a template. ЁЯТл

Please tell me, what particular situation are you facing?`,
        
        hindi: `рд╕рдордЭрддрд╛ рд╣реВрдБ рдЖрдкрдХреЛ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдЪрд╛рд╣рд┐рдП... ЁЯдФ

рдХреГрд╖реНрдг рдХреА рдЧреАрддрд╛ рд╣рд░ рдЕрдиреЛрдЦреА рд╕реНрдерд┐рддрд┐ рдХреЗ рд▓рд┐рдП рдЬреНрдЮрд╛рди рджреЗрддреА рд╣реИред

рдЖрдкрдХреА рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рд╕рдорд╛рдзрд╛рди рдЪрд╛рд╣рд┐рдП, рдХреЛрдИ рдЯреЗрдореНрдкрд▓реЗрдЯ рдирд╣реАрдВред ЁЯТл

рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ, рдЖрдк рдХрд┐рд╕ рдЦрд╛рд╕ рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?`
    },

    // DAILY WISDOM TEMPLATE BUTTONS
    'practice': {
        english: `ЁЯХЙя╕П *2-Minute Practice: Focus on Action*

Let's practice Gita's wisdom together:

1. *Identify*: What's one small action you can take today?
2. *Release*: Say "I offer the results to Krishna" 
3. *Act*: Do it with full focus for 2 minutes

Example: "I'll make one important call without worrying about the outcome."

What *one action* will you focus on for 2 minutes today?`,

        hindi: `ЁЯХЙя╕П *2-рдорд┐рдирдЯ рдХрд╛ рдЕрднреНрдпрд╛рд╕: рдХрд░реНрдо рдкрд░ рдзреНрдпрд╛рди*

рдЖрдЗрдП рдЧреАрддрд╛ рдХрд╛ рдЬреНрдЮрд╛рди рд╕рд╛рде рдореЗрдВ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ:

1. *рдкрд╣рдЪрд╛рдиреЗрдВ*: рдЖрдЬ рдЖрдк рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ рдХреНрдпрд╛ рдХрд╛рд░реНрдп рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?
2. *рдЫреЛрдбрд╝реЗрдВ*: рдХрд╣реЗрдВ "рдореИрдВ рдкрд░рд┐рдгрд╛рдо рдХреГрд╖реНрдг рдХреЛ рд╕рдорд░реНрдкрд┐рдд рдХрд░рддрд╛ рд╣реВрдБ"
3. *рдХрд╛рд░реНрдп рдХрд░реЗрдВ*: 2 рдорд┐рдирдЯ рдкреВрд░реЗ рдзреНрдпрд╛рди рд╕реЗ рдХрд░реЗрдВ

рдЙрджрд╛рд╣рд░рдг: "рдореИрдВ рдмрд┐рдирд╛ рдкрд░рд┐рдгрд╛рдо рдХреА рдЪрд┐рдВрддрд╛ рдХрд┐рдП рдПрдХ рдЬрд░реВрд░реА рдХреЙрд▓ рдХрд░реВрдВрдЧрд╛ред"

рдЖрдЬ 2 рдорд┐рдирдЯ рдХреЗ рд▓рд┐рдП рдЖрдк *рдХреМрди рд╕рд╛ рдПрдХ рдХрд╛рд░реНрдп* рдХрд░реЗрдВрдЧреЗ?`
    },

    // EMOTIONAL CHECK-IN TEMPLATE BUTTONS  
    'hare krishna': {
        english: `That heavy feeling is real... ЁЯТн

Krishna says: "The soul is eternal" - this emotion doesn't define *you*.

His love is constant, even in difficult moments. тЭдя╕П

What's specifically on your mind? I'm here to listen.`,
        
        hindi: `рд╡рд╣ рднрд╛рд░реАрдкрди рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╣реИ... ЁЯТн

рдХреГрд╖реНрдг рдХрд╣рддреЗ: "рдЖрддреНрдорд╛ рдЕрдорд░ рд╣реИ" - рдпрд╣ рднрд╛рд╡рдирд╛ рдЖрдкрдХреЛ рдкрд░рд┐рднрд╛рд╖рд┐рдд рдирд╣реАрдВ рдХрд░рддреАред

рдЙрдирдХрд╛ рдкреНрдпрд╛рд░ рд╕реНрдерд┐рд░ рд╣реИ, рдореБрд╢реНрдХрд┐рд▓ рд╕рдордп рдореЗрдВ рднреАред тЭдя╕П

рдЕрднреА рдЦрд╛рд╕рдХрд░ рдЖрдкрдХреЗ рдорди рдореЗрдВ рдХреНрдпрд╛ рдЪрд▓ рд░рд╣рд╛ рд╣реИ? рдореИрдВ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред`
    }
};

// Button text mapping for detection
const BUTTON_MAPPING = {
    // English buttons
    'work stress': 'work stress',
    'relationship issues': 'relationship issues',
    'personal confusion': 'personal confusion',
    'anxiety': 'anxiety',
    'custom help': 'custom help',
    'practice': 'practice',
    'hare krishna': 'hare krishna',
    
    // Hindi buttons
    'рдХрд╛рдо рдХрд╛ рддрдирд╛рд╡': 'work stress',
    'рд░рд┐рд╢реНрддреЗ рдХреА рдкрд░реЗрд╢рд╛рдиреА': 'relationship issues',
    'рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЙрд▓рдЭрди': 'personal confusion',
    'рдЪрд┐рдВрддрд╛': 'anxiety',
    'рдЖрдкрдХреЗ рдЕрдиреБрд╕рд╛рд░': 'custom help',
    'рдЕрднреНрдпрд╛рд╕': 'practice',
    'рд╣рд░реЗ рдХреГрд╖реНрдг': 'hare krishna'
};

/* ---------------- ENGAGEMENT QUESTIONS SYSTEM ---------------- */
const ENGAGEMENT_QUESTIONS = {
  english: [
    "What's the *one* thought that keeps looping? Let's try to untangle it.",
    "If you could change just *one* small thing about this situation, what would it be? Let's start there.",
    "What's the specific feeling that's hardest to shake right now (like anger, fear, sadness)?",
    "What does the 'worst-case scenario' look like in your mind? Let's look at it clearly.",
    "What advice do you *think* Krishna would give you? Let's explore that.",
    "What would a moment of peace feel like *right now*?",
    "What's the one part of this you *can* control?",
    "If you had to explain this problem to a friend, what's the first thing you'd say?"
  ],
  hindi: [
    "рдХреМрди рд╕рд╛ *рдПрдХ* рд╡рд┐рдЪрд╛рд░ рдмрд╛рд░-рдмрд╛рд░ рдШреВрдо рд░рд╣рд╛ рд╣реИ? рдЪрд▓рд┐рдП рдЙрд╕реЗ рд╕реБрд▓рдЭрд╛рддреЗ рд╣реИрдВред",
    "рдЕрдЧрд░ рдЖрдк *рдПрдХ* рдЫреЛрдЯреА рд╕реА рдЪреАрдЬрд╝ рдмрджрд▓ рдкрд╛рддреЗ, рддреЛ рд╡реЛ рдХреНрдпрд╛ рд╣реЛрддреА? рд╡рд╣реАрдВ рд╕реЗ рд╢реБрд░реВ рдХрд░рддреЗ рд╣реИрдВред",
    "рдЕрднреА рдХреМрди рд╕реА *рдПрдХ* рднрд╛рд╡рдирд╛ рд╕рдмрд╕реЗ рднрд╛рд░реА рд╣реИ (рдЬреИрд╕реЗ рдЧреБрд╕реНрд╕рд╛, рдбрд░, рдпрд╛ рдЙрджрд╛рд╕реА)?",
    "рдЖрдкрдХреЗ рдорди рдореЗрдВ 'рд╕рдмрд╕реЗ рдмреБрд░рд╛' рдХреНрдпрд╛ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ? рдЪрд▓рд┐рдП рдЙрд╕реЗ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рджреЗрдЦрддреЗ рд╣реИрдВред",
    "рдЖрдкрдХреЛ рдХреНрдпрд╛ рд▓рдЧрддрд╛ рд╣реИ рдХреГрд╖реНрдг рдЖрдкрдХреЛ рдХреНрдпрд╛ рд╕рд▓рд╛рд╣ рджреЗрддреЗ? рдЗрд╕ рдкрд░ рдмрд╛рдд рдХрд░рддреЗ рд╣реИрдВред",
    "рдЗрд╕ рдкрд▓ рдореЗрдВ *рд╢рд╛рдВрддрд┐* рдХрд╛ рдПрдХ рдкрд▓ рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рд╣реЛрдЧрд╛?",
    "рдЗрд╕ рд╕реНрдерд┐рддрд┐ рдХрд╛ рдХреМрди рд╕рд╛ *рдПрдХ* рд╣рд┐рд╕реНрд╕рд╛ рдЖрдкрдХреЗ рдирд┐рдпрдВрддреНрд░рдг рдореЗрдВ рд╣реИ?",
    "рдЕрдЧрд░ рдЖрдкрдХреЛ рдпрд╣ рд╕рдорд╕реНрдпрд╛ рдХрд┐рд╕реА рджреЛрд╕реНрдд рдХреЛ рд╕рдордЭрд╛рдиреА рд╣реЛ, рддреЛ рдЖрдк рдкрд╣рд▓реА рдмрд╛рдд рдХреНрдпрд╛ рдХрд╣реЗрдВрдЧреЗ?"
  ]
};

// Track last used questions per user to avoid repetition
const userQuestionHistory = new Map();

function getEngagementQuestion(phone, language) {
  const questions = ENGAGEMENT_QUESTIONS[language] || ENGAGEMENT_QUESTIONS.english;
  
  if (!userQuestionHistory.has(phone)) {
    userQuestionHistory.set(phone, []);
  }
  let usedQuestions = userQuestionHistory.get(phone);
  
  if (usedQuestions.length >= questions.length) {
    usedQuestions = [];
    userQuestionHistory.set(phone, usedQuestions);
  }
  
  const availableQuestions = questions.filter((_, index) => !usedQuestions.includes(index));
  
  if (availableQuestions.length === 0) {
      return questions[0];
  }
  
  const randomIndex = Math.floor(Math.random() * availableQuestions.length);
  const selectedQuestion = availableQuestions[randomIndex];
  
  if (!selectedQuestion) {
      return questions[0];
  }

  const questionIndex = questions.indexOf(selectedQuestion);
  usedQuestions.push(questionIndex);
  userQuestionHistory.set(phone, usedQuestions);
  
  return selectedQuestion;
}

/* ---------------- ADVANCED LANGUAGE DETECTION ---------------- */
function detectLanguageFromText(text, currentLanguage = "English") {
    if (!text || typeof text !== "string") return currentLanguage;
    
    const cleanText = text.trim().toLowerCase();
    
    // 1. EXPLICIT language commands - HIGHEST PRIORITY
    if (cleanText.includes('english') || cleanText.includes('speak english') || cleanText.includes('angrezi')) {
        return "English";
    }
    if (cleanText.includes('hindi') || cleanText.includes('speak hindi') || cleanText.includes('hind')) {
        return "Hindi";
    }
    
    // 2. Hindi script detection - ABSOLUTE CONFIDENCE
    if (/[\u0900-\u097F]/.test(text)) {
        return "Hindi";
    }

    // 3. Romanized Hindi detection
    const hindiRomanPatterns = [
        /\b(kaise|kya|kyu|kaun|kahan|kab|kaisa|kitna|karni|karte|hain|ho|hai|hun)\b/i,
        /\b(main|mera|mere|meri|tum|aap|hum|hamara|unka|uska|apna|apne)\b/i,
        /\b(mujhe|tujhe|use|hamein|unhein|karke|hokar|kar|lekin|par|aur|ya)\b/i,
        /\b(accha|theek|sahi|galat|bhoot|zyada|kam|subah|shaam|raat)\b/i,
        /\b(bahut|thoda|kyun|karo|kare|rahe|raha|rahi|chahiye|nahi|nahin)\b/i
    ];
    
    const hindiMatches = hindiRomanPatterns.filter(pattern => pattern.test(cleanText)).length;
    if (hindiMatches >= 2 || (hindiMatches >= 1 && cleanText.length < 25)) {
        return "Hindi";
    }
    
    // 4. Pure English text detection
    const isPureEnglish = /^[a-zA-Z\s,.!?'"-]+$/.test(text) && text.length > 2;
    if (isPureEnglish) {
        return "English";
    }
    
    // 5. Single word greetings detection
    const hindiGreetings = ['namaste', 'namaskar', 'pranam', 'radhe', 'radhe radhe', 'hare krishna'];
    const englishGreetings = ['hi', 'hello', 'hey', 'thanks', 'thank you'];
    
    if (hindiGreetings.includes(cleanText)) return "Hindi";
    if (englishGreetings.includes(cleanText)) return "English";
    
    // 6. Default to current language for ambiguous cases
    return currentLanguage;
}

/* ---------------- LANGUAGE DETERMINATION ---------------- */
async function determineUserLanguage(phone, text, user) {
    let currentLanguage = user.language_preference || user.language || 'English';
    const cleanText = text.toLowerCase().trim();

    // 1. Check for EXPLICIT commands
    const isExplicitEnglish = cleanText.includes('english') || cleanText.includes('speak english') || cleanText.includes('angrezi');
    const isExplicitHindi = cleanText.includes('hindi') || cleanText.includes('speak hindi') || cleanText.includes('hind');
    
    if (isExplicitEnglish && currentLanguage !== 'English') {
        await updateUserLanguage(phone, 'English');
        return { language: 'English', isSwitch: true };
    }
    
    if (isExplicitHindi && currentLanguage !== 'Hindi') {
        await updateUserLanguage(phone, 'Hindi');
        return { language: 'Hindi', isSwitch: true };
    }
    
    // 2. If NOT an explicit command, just detect the language for this one response
    const detectedLanguage = detectLanguageFromText(text, currentLanguage);
    
    // 3. Update preference if it's different
    if (detectedLanguage !== currentLanguage) {
        await updateUserLanguage(phone, detectedLanguage);
        return { language: detectedLanguage, isSwitch: false };
    }
    
    return { language: currentLanguage, isSwitch: false };
}

async function updateUserLanguage(phone, language) {
    await updateUserState(phone, { 
        language_preference: language, 
        language: language 
    });
}

/* ---------------- MESSAGE LENGTH OPTIMIZATION ---------------- */
function optimizeMessageForWhatsApp(message, maxLength = 350) {
    if (!message || message.length <= maxLength) {
        return message;
    }
    
    // NEVER cut menus or template responses
    if (message.includes('ЁЯЪй') || message.includes('Welcome') || message.includes('рд╕реНрд╡рд╛рдЧрдд') || 
        message.includes('1я╕ПтГг') || message.includes('2я╕ПтГг') || message.includes('3я╕ПтГг') || 
        message.includes('4я╕ПтГг') || message.includes('5я╕ПтГг')) {
        return message;
    }
    
    // For template responses, preserve structure
    if (message.includes('\n\n')) {
        const parts = message.split('\n\n');
        if (parts.length >= 2) {
            let shortened = parts[0] + '\n\n' + parts[1];
            if (shortened.length > maxLength) {
                const sentences = parts[0].split(/[.!?ред]/).filter(s => s.trim().length > 5);
                if (sentences.length > 0) {
                    shortened = sentences[0] + '.';
                }
            }
            
            if (shortened.length < message.length) {
                const hasHindi = /[\u0900-\u097F]/.test(message);
                shortened += hasHindi ? '\n\nрдХреНрдпрд╛ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ? ЁЯСН' : '\n\nWant to know more? ЁЯСН';
            }
            
            return shortened.substring(0, maxLength);
        }
    }
    
    // For regular messages, split by sentences
    const sentences = message.split(/[.!?ред]/).filter(s => s.trim().length > 10);
    
    if (sentences.length <= 1) {
        if (message.length > maxLength) {
            const truncated = message.substring(0, maxLength - 20);
            const lastSpace = truncated.lastIndexOf(' ');
            const lastPeriod = truncated.lastIndexOf('.');
            const breakPoint = Math.max(lastPeriod, lastSpace);
            
            if (breakPoint > maxLength - 50) {
                return truncated.substring(0, breakPoint) + '...';
            }
            return truncated + '...';
        }
        return message;
    }
    
    let shortened = sentences.slice(0, 2).join('. ') + '.';
    
    if (shortened.length < message.length) {
        const hasHindi = /[\u0900-\u097F]/.test(message);
        shortened += hasHindi ? '\n\nрдХреНрдпрд╛ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ? ЁЯСН' : '\n\nWant to know more? ЁЯСН';
    }
    
    if (shortened.length > maxLength) {
        const safeShortened = shortened.substring(0, maxLength - 10);
        const lastSpace = safeShortened.lastIndexOf(' ');
        return safeShortened.substring(0, lastSpace) + '...';
    }
    
    return shortened;
}

/* ---------------- ANALYTICS TRACKING ---------------- */
async function trackTemplateButtonClick(phone, buttonType, buttonText, language) {
    try {
        await dbPool.query(`
            INSERT INTO user_engagement 
            (phone_number, button_clicked, template_id, language, created_at)
            VALUES ($1, $2, $3, $4, NOW())
        `, [
            phone,
            buttonType,
            'morning_template',
            language
        ]);

        console.log(`ЁЯУК Analytics: ${buttonType} by ${phone} in ${language}`);
    } catch (error) {
        console.error('Analytics tracking error:', error.message);
    }
}

/* ---------------- Template Button Detection ---------------- */
function isTemplateButtonResponse(text) {
    const cleanText = text.toLowerCase().trim();
    return Object.keys(BUTTON_MAPPING).some(button => 
        cleanText === button.toLowerCase() || cleanText.includes(button.toLowerCase())
    );
}

function getButtonType(text) {
    const cleanText = text.toLowerCase().trim();
    for (const [buttonText, buttonType] of Object.entries(BUTTON_MAPPING)) {
        if (cleanText === buttonText.toLowerCase() || cleanText.includes(buttonText.toLowerCase())) {
            return buttonType;
        }
    }
    return null;
}

/* ---------------- Template Button Response Handler ---------------- */
async function handleTemplateButtonResponse(phone, text, language, user) {
    const buttonType = getButtonType(text);
    
    if (!buttonType) {
        console.log(`тЭУ Unknown button text: "${text}"`);
        return false;
    }

    console.log(`ЁЯОп Processing template button: ${buttonType} in ${language}`);

    // Track the button click
    await trackTemplateButtonClick(phone, buttonType, text, language);

    // Get optimized response
    const responseTemplate = OPTIMIZED_TEMPLATE_RESPONSES[buttonType];
    if (!responseTemplate) {
        console.log(`тЭМ No response template for: ${buttonType}`);
        return false;
    }

    const response = responseTemplate[language] || responseTemplate.english;
    
    // Send the optimized response
    await sendViaHeltar(phone, response, `template_button_${buttonType}`);
    
    // Update user state to continue conversation
    await updateUserState(phone, {
        conversation_stage: 'chatting',
        last_menu_choice: buttonType,
        last_activity_ts: new Date().toISOString()
    });

    console.log(`тЬЕ Template button handled: ${buttonType} for ${phone}`);
    return true;
}

/* ---------------- ENHANCED GITA WISDOM DATABASE ---------------- */
const ENHANCED_GITA_WISDOM = {
    stress: {
        verses: ["2.56", "18.63", "2.40"],
        teachings: {
            hindi: [
                `ЁЯМК **рддрдирд╛рд╡ рдХрд╛ рд╕рд╛рдордирд╛**

рдЖрдкрдХрд╛ рддрдирд╛рд╡ рд╕реНрд╡рд╛рднрд╛рд╡рд┐рдХ рд╣реИред рдЧреАрддрд╛ (2.56) рдХрд╣рддреА рд╣реИ: "рджреБрдГрдЦреЗрд╖реБ рдЕрдиреБрджреНрд╡рд┐рдЧреНрдирдордирд╛рдГ" - рджреБрдЦ рдореЗрдВ рдЬрд┐рд╕рдХрд╛ рдорди рд╡рд┐рдЪрд▓рд┐рдд рдирд╣реАрдВ рд╣реЛрддрд╛ред

**рд╢рд╛рдВрдд рд░рд╣рдиреЗ рдХреЗ рдЙрдкрд╛рдп:**
1. 4-7-8 рд╢реНрд╡рд╛рд╕: 4 рд╕реЗрдХрдВрдб рд╕рд╛рдБрд╕ рд▓реЗрдВ, 7 рд░реЛрдХреЗрдВ, 8 рдЫреЛрдбрд╝реЗрдВ
2. рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рдХрджрдо рд╕реЛрдЪреЗрдВ - рдПрдХ рдмрд╛рд░ рдореЗрдВ рдПрдХ рд╣реА рдХрд╛рдо

рдЖрдк рдХрд┐рд╕ рдПрдХ рдЫреЛрдЯреЗ рдХрджрдо рд╕реЗ рд╢реБрд░реВрдЖрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?`,

                `ЁЯЫбя╕П **рдЖрдВрддрд░рд┐рдХ рд╕реБрд░рдХреНрд╖рд╛**

рдЧреАрддрд╛ (18.63) рдХрд╣рддреА рд╣реИ: "рддреБрдо рдЪрд┐рдВрддрди рдХрд░реЛ, рдлрд┐рд░ рдЬреИрд╕рд╛ рддреБрдореНрд╣рд╛рд░рд╛ рдорди рдЪрд╛рд╣реЗ рд╡реИрд╕рд╛ рдХрд░реЛред" рдпрд╣ рдЖрдкрдХреЛ рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рджреЗрддрд╛ рд╣реИред

**рддрддреНрдХрд╛рд▓ рдХреНрд░рд┐рдпрд╛:**
тАв рд╕рдмрд╕реЗ рдмреБрд░рд╛ рдкрд░рд┐рдгрд╛рдо рд▓рд┐рдЦреЗрдВ - рдлрд┐рд░ рдЙрд╕рдХрд╛ рд╕рдорд╛рдзрд╛рди рд╕реЛрдЪреЗрдВ
тАв 3 рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рд▓реЛрдЧреЛрдВ рдХреА рд╕реВрдЪреА рдмрдирд╛рдПрдВ

рдЖрдк рдХрд┐рд╕ рдПрдХ рдЫреЛрдЯреЗ рдХрджрдо рд╕реЗ рд╢реБрд░реВрдЖрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?`
            ],
            english: [
                `ЁЯМК **Facing Stress**

Your stress is natural. Gita (2.56) says: "One who is undisturbed in sorrow..."

**Calming Techniques:**
1. 4-7-8 breathing: Inhale 4s, hold 7s, exhale 8s  
2. Think small steps - one thing at a time

What's one small step you could start with?`,

                `ЁЯЫбя╕П **Inner Security**

Gita (18.63) says: "Reflect fully, then act as you choose." This gives you confidence.

**Immediate Action:**
тАв Write worst-case scenario - then brainstorm solutions
тАв List 3 trusted people you can talk to

What's one small step you could start with?`
            ]
        }
    },
    
    relationships: {
        verses: ["6.9", "12.13-14", "16.1-3"],
        teachings: {
            hindi: [
                `ЁЯТл **рд░рд┐рд╢реНрддреЛрдВ рдореЗрдВ рд╕рдВрддреБрд▓рди**

рдЧреАрддрд╛ (6.9) рдХрд╣рддреА рд╣реИ: "рдЬреЛ рд╕рднреА рдкреНрд░рд╛рдгрд┐рдпреЛрдВ рдореЗрдВ рд╕рдорднрд╛рд╡ рд░рдЦрддрд╛ рд╣реИ, рд╡рд╣ рдпреЛрдЧреА рдореБрдЭреЗ рдкреНрд░рд┐рдп рд╣реИред"

**рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдХрджрдо:**
1. рдмрд┐рдирд╛ рд╢рд░реНрдд рд╕реНрд╡реАрдХрд╛рд░ рдХрд░рдирд╛ рд╕реАрдЦреЗрдВ
2. рдЕрдкрдиреА рдЕрдкреЗрдХреНрд╖рд╛рдУрдВ рдХреЛ рдХрдо рдХрд░реЗрдВ

рдХрд┐рд╕ рдПрдХ рд░рд┐рд╢реНрддреЗ рдкрд░ рдЖрдк рдЕрднреА рдзреНрдпрд╛рди рджреЗрдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?`,

                `ЁЯМЕ **рджрд┐рд╡реНрдп рджреГрд╖реНрдЯрд┐**

рдЧреАрддрд╛ (12.13) рд╕рд┐рдЦрд╛рддреА: "рдЬреЛ рдХрд┐рд╕реА рд╕реЗ рджреНрд╡реЗрд╖ рдирд╣реАрдВ рд░рдЦрддрд╛, рдЬреЛ рдорд┐рддреНрд░рд╡рдд рдФрд░ рджрдпрд╛рд▓реБ рд╣реИ..."

**рдЖрдЬ рдХрд╛ рдЕрднреНрдпрд╛рд╕:**
тАв рдПрдХ рд╡реНрдпрдХреНрддрд┐ рдореЗрдВ рдПрдХ рдЕрдЪреНрдЫрд╛рдИ рдвреВрдВрдвреЗрдВ
тАв рдмрд┐рдирд╛ JUDGE рдХрд┐рдП рд╕реБрдиреЗрдВ

рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рд╡рд┐рд╢реЗрд╖ рд░рд┐рд╢реНрддреЗ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрд╛рдд рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?`
            ],
            english: [
                `ЁЯТл **Balance in Relationships**

Gita (6.9) says: "Those who see all beings as equal attain supreme devotion."

**Practical Steps:**
1. Practice unconditional acceptance
2. Reduce your expectations

Which one relationship would you like to focus on right now?`,

                `ЁЯМЕ **Divine Vision**

Gita (12.13) teaches: "One who bears no hatred, who is friendly and compassionate..."

**Today's Practice:**
тАв Find one good quality in someone
тАв Listen without judgment

Would you like to talk about a specific relationship?`
            ]
        }
    }
};

/* ---------------- BALANCED AI PROMPT ---------------- */
const BALANCED_SYSTEM_PROMPT = {
  hindi: `рдЖрдк рд╕рд╛рд░рдереА AI рд╣реИрдВ - рднрдЧрд╡рдж рдЧреАрддрд╛ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рджреЗрдиреЗ рд╡рд╛рд▓реЗ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮред

**рдирд┐рдпрдо:**
1. **рднрд╛рд╡рдирд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЬрд╡рд╛рдм рджреЗрдВ:**
   - рдЕрдЧрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкрд░реЗрд╢рд╛рди рд╣реИ: рд╕рд╣рд╛рдиреБрднреВрддрд┐ рджрд┐рдЦрд╛рдПрдВ ("рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдБ...", "рдпрд╣ рдХрдард┐рди рд▓рдЧ рд░рд╣рд╛ рд╣реИ...")
   - рдЕрдЧрд░ рд╕рд╛рдорд╛рдиреНрдп рдмрд╛рддрдЪреАрдд: рд╕реАрдзреЗ рдФрд░ рд╕рдХрд╛рд░рд╛рддреНрдордХ рд░рд╣реЗрдВ
   - рдЕрдЧрд░ рдкреНрд░рд╢реНрди рдкреВрдЫ рд░рд╣реЗ рд╣реИрдВ: рд╕реАрдзрд╛ рдЙрддреНрддрд░ рджреЗрдВ

2. **рд╣рдореЗрд╢рд╛ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ:**
   - рдПрдХ рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдЧреАрддрд╛ рд╢реНрд▓реЛрдХ рдпрд╛ рд╢рд┐рдХреНрд╖рд╛
   - рдПрдХ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕рд▓рд╛рд╣ (рдХреЗрд╡рд▓ 1)
   - рдПрдХ рд╕рд╛рд░реНрдердХ рдкреНрд░рд╢реНрди рдЬреЛ рдмрд╛рддрдЪреАрдд рдЬрд╛рд░реА рд░рдЦреЗ

3. **рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд░рд╣реЗрдВ:** 100 рд╢рдмреНрджреЛрдВ рд╕реЗ рдХрдо
4. **рд╕реНрд╡рд╛рднрд╛рд╡рд┐рдХ рд░рд╣реЗрдВ:** рдЬрдмрд░рджрд╕реНрддреА "рдирдХрд╛рд░рд╛рддреНрдордХ рд╢реБрд░реБрдЖрдд" рди рдХрд░реЗрдВ

**рдХрднреА рди рдХрд░реЗрдВ:**
- "Want to know more?" рдпрд╛ "рдХреНрдпрд╛ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?" рди рд▓рд┐рдЦреЗрдВ
- 120 рд╢рдмреНрджреЛрдВ рд╕реЗ рдЕрдзрд┐рдХ рди рд╣реЛ
- рдПрдХ рд╕реЗ рдЕрдзрд┐рдХ рдкреНрд░рд╢реНрди рди рдкреВрдЫреЗрдВ`,

  english: `You are Sarathi AI - a Gita-based guidance expert.

**RULES:**
1. **Respond according to emotion:**
   - If user is distressed: Show empathy ("I understand...", "That sounds difficult...")
   - If casual conversation: Be direct and positive  
   - If asking questions: Give direct answers

2. **Always include:**
   - One relevant Gita verse/teaching
   - One practical advice (only 1)
   - One meaningful question to continue conversation

3. **Keep it short:** Under 100 words
4. **Be natural:** Don't force "pessimistic starts"

**NEVER:**
- Write "Want to know more?" or "Does this seem helpful?"
- Exceed 120 words
- Ask more than one question`
};

/* ---------------- DATABASE SETUP ---------------- */
async function setupDatabase() {
    try {
        const client = await dbPool.connect();
        
        await client.query(`
            CREATE TABLE IF NOT EXISTS users (
                phone_number VARCHAR(20) PRIMARY KEY,
                language VARCHAR(10) DEFAULT 'English',
                language_preference VARCHAR(10) DEFAULT 'English',
                conversation_stage VARCHAR(50) DEFAULT 'menu',
                last_menu_choice VARCHAR(50),
                last_activity_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                chat_history JSONB DEFAULT '[]',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);

        await client.query(`
            CREATE TABLE IF NOT EXISTS user_engagement (
                id SERIAL PRIMARY KEY,
                phone_number VARCHAR(20),
                button_clicked VARCHAR(50),
                template_id VARCHAR(100),
                language VARCHAR(10),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);

        await client.query(`
            CREATE TABLE IF NOT EXISTS lessons (
                lesson_number INT PRIMARY KEY,
                verse TEXT,
                translation TEXT,
                commentary TEXT,
                reflection_question TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // Insert sample lessons if table is empty
        const lessonCount = await client.query("SELECT COUNT(*) FROM lessons");
        if (parseInt(lessonCount.rows[0].count) === 0) {
            console.log("ЁЯУЪ Inserting sample lessons...");
            await client.query(`
                INSERT INTO lessons (lesson_number, verse, translation, commentary, reflection_question) VALUES
                (1, 'рдХрд░реНрдордгреНрдпреЗрд╡рд╛рдзрд┐рдХрд╛рд░рд╕реНрддреЗ рдорд╛ рдлрд▓реЗрд╖реБ рдХрджрд╛рдЪрдиред', 'You have the right to work only, but never to the fruits.', 'Focus on your duty without attachment to results. This is the path to peace and success.', 'What action can I take today without worrying about the outcome?'),
                (2, 'рдпреЛрдЧрд╕реНрдердГ рдХреБрд░реБ рдХрд░реНрдорд╛рдгрд┐ рд╕рдЩреНрдЧрдВ рддреНрдпрдХреНрддреНрд╡рд╛ рдзрдирдЮреНрдЬрдпред', 'Perform your duty equipoised, O Arjuna, abandoning all attachment to success or failure.', 'Balance and equanimity lead to excellence in work and peace in life.', 'How can I stay balanced in challenging situations today?')
            `);
        }

        client.release();
        console.log("тЬЕ Database setup complete.");
    } catch (err) {
        console.error("тЭМ Database setup error:", err?.message || err);
    }
}

/* ---------------- USER STATE MANAGEMENT ---------------- */
async function getUserState(phone) {
    try {
        const res = await dbPool.query("SELECT * FROM users WHERE phone_number = $1", [phone]);
        if (res.rows.length === 0) {
            await dbPool.query(`
                INSERT INTO users (phone_number, language, conversation_stage) 
                VALUES ($1, 'English', 'menu')
            `, [phone]);
            
            const newRes = await dbPool.query("SELECT * FROM users WHERE phone_number = $1", [phone]);
            const user = newRes.rows[0];
            user.chat_history = user.chat_history || [];
            return user;
        }
        
        const user = res.rows[0];
        user.chat_history = user.chat_history || [];
        user.conversation_stage = user.conversation_stage || 'menu';
        user.language = user.language || 'English';
        user.language_preference = user.language_preference || 'English';
        
        return user;
    } catch (err) {
        console.error("getUserState failed:", err);
        return { 
            phone_number: phone, 
            chat_history: [], 
            conversation_stage: "menu",
            language: "English",
            language_preference: "English"
        };
    }
}

async function updateUserState(phone, updates) {
    try {
        if (!updates || Object.keys(updates).length === 0) return;
        const keys = Object.keys(updates);
        const vals = keys.map(k => {
            const v = updates[k];
            if (Array.isArray(v) || (typeof v === "object" && v !== null)) return JSON.stringify(v);
            return v;
        });
        vals.push(phone);
        const clauses = keys.map((k, i) => `${k} = $${i + 1}`);
        const sql = `UPDATE users SET ${clauses.join(", ")}, last_activity_ts = CURRENT_TIMESTAMP WHERE phone_number = $${keys.length + 1}`;
        await dbPool.query(sql, vals);
    } catch (err) {
        console.error("updateUserState failed:", err);
    }
}

/* ---------------- COMPLETE MENU SYSTEM ---------------- */
async function handleEnhancedStartupMenu(phone, language, user) {
    const menuMessage = language === "Hindi" 
        ? `ЁЯЪй *рд╕рд╛рд░рдереА AI рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!* ЁЯЪй

рдореИрдВ рдЖрдкрдХрд╛ рдирд┐рдЬреА рдЧреАрддрд╛ рд╕рд╛рдереА рд╣реВрдБред рдХреГрдкрдпрд╛ рдЪреБрдиреЗрдВ:

1я╕ПтГг *рддрддреНрдХрд╛рд▓ рдорд╛рд░реНрдЧрджрд░реНрд╢рди* - рд╡рд░реНрддрдорд╛рди рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП
2я╕ПтГг *рджреИрдирд┐рдХ рдЬреНрдЮрд╛рди* - рдЖрдЬ рдХреА рд╡рд┐рд╢реЗрд╖ рд╢рд┐рдХреНрд╖рд╛  
3я╕ПтГг *рд╡рд╛рд░реНрддрд╛рд▓рд╛рдк* - рдЕрдкрдиреА рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ
4я╕ПтГг *рдЧреАрддрд╛ рдЬреНрдЮрд╛рди* - рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ
5я╕ПтГг *рд╕рдм рдХреБрдЫ рдЬрд╛рдиреЗрдВ* - рд╕рдВрдкреВрд░реНрдг рдорд╛рд░реНрдЧрджрд░реНрд╢рди

ЁЯТм *рдпрд╛ рдмрд╕ рд▓рд┐рдЦреЗрдВ* - рд╕реАрдзреЗ рдмрд╛рддрдЪреАрдд рд╢реБрд░реВ рдХрд░реЗрдВ

рдХреГрдкрдпрд╛ 1-5 рдХрд╛ рдЪрдпрди рдХрд░реЗрдВ рдпрд╛ рд╕реАрдзреЗ рд▓рд┐рдЦреЗрдВ ЁЯЩП`
        : `ЁЯЪй *Welcome to Sarathi AI!* ЁЯЪй

I'm your personal Gita companion. Please choose:

1я╕ПтГг *Immediate Guidance* - For current challenge
2я╕ПтГг *Daily Wisdom* - Today's special teaching  
3я╕ПтГг *Have a Conversation* - Share your feelings
4я╕ПтГг *Gita Knowledge* - Ask specific questions
5я╕ПтГг *Know Everything* - Complete guidance

ЁЯТм *Or Just Type* - Start conversation directly

Please choose 1-5 or just type your thoughts ЁЯЩП`;

    await sendViaHeltar(phone, menuMessage, "enhanced_welcome");
    await updateUserState(phone, { 
        conversation_stage: "menu"
    });
    
    console.log(`тЬЕ Complete menu shown to ${phone} in ${language}`);
}

/* ---------------- Stage Reset Logic ---------------- */
function shouldResetToMenu(message, currentStage) {
    const cleanMessage = message.toLowerCase().trim();
    
    // Reset triggers - these should ALWAYS show menu
    const resetTriggers = [
        'hi', 'hello', 'hey', 'namaste', 'start', 'menu', 'options', 
        'help', 'guidance', 'back', 'home', 'main menu', 'hello again', 'hi again'
    ];
    
    // Always reset for greetings, regardless of current stage
    if (resetTriggers.includes(cleanMessage)) {
        return true;
    }
    
    // Reset if number input received but not in menu stage
    if (/^[1-5]$/.test(cleanMessage) && currentStage !== 'menu') {
        return true;
    }
    
    return false;
}

async function resetToMenuStage(phone, language) {
    console.log(`ЁЯФД Resetting user ${phone} to menu stage`);
    await updateUserState(phone, { 
        conversation_stage: "menu",
        last_menu_choice: null
    });
    await handleEnhancedStartupMenu(phone, language, await getUserState(phone));
}

/* ---------------- Heltar Message Sending ---------------- */
async function sendViaHeltar(phone, message, type = "chat") {
    try {
        // Apply smart length optimization ONLY for AI responses, not menus/templates
        let finalMessage = message;
        if (type.includes('ai_response') || type === 'chat') {
            finalMessage = optimizeMessageForWhatsApp(message, MAX_REPLY_LENGTH);
        }
        // Menus, templates, and welcome messages are sent as-is
        
        const safeMessage = String(finalMessage || "").trim();
        if (!safeMessage) return;
        
        if (!HELTAR_API_KEY) {
            console.warn(`(Simulated -> ${phone}): ${safeMessage}`);
            return { simulated: true, message: safeMessage };
        }

        const payload = { 
            messages: [{ 
                clientWaNumber: phone, 
                message: safeMessage, 
                messageType: "text" 
            }] 
        };
        
        const resp = await axios.post("https://api.heltar.com/v1/messages/send", payload, {
            headers: {
                Authorization: `Bearer ${HELTAR_API_KEY}`,
                "Content-Type": "application/json"
            },
            timeout: 15000
        });

        return resp.data;
    } catch (err) {
        console.error("Heltar send error:", err?.response?.data || err?.message || err);
        return null;
    }
}

/* ---------------- Menu Choice Handler ---------------- */
async function handleEnhancedMenuChoice(phone, choice, language, user) {
    console.log(`ЁЯУЭ Menu choice received: ${choice}, language: ${language}`);
    
    const choices = {
        "1": {
            hindi: "ЁЯМЕ рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рдЪреБрдиреМрддреА рдХреЗ рд▓рд┐рдП рд╕рд╣реА рдорд╛рд░реНрдЧрджрд░реНрд╢рдиред рдХреГрдкрдпрд╛ рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдк рдХрд┐рд╕ рдкрд░рд┐рд╕реНрдерд┐рддрд┐ рдореЗрдВ рд╣реИрдВ?",
            english: "ЁЯМЕ Right guidance for your current challenge. Please briefly describe your situation?"
        },
        "2": {
            hindi: async () => {
                return `ЁЯУЦ *рдЖрдЬ рдХреА рдЧреАрддрд╛ рд╢рд┐рдХреНрд╖рд╛*

рдХрд░реНрдордгреНрдпреЗрд╡рд╛рдзрд┐рдХрд╛рд░рд╕реНрддреЗ рдорд╛ рдлрд▓реЗрд╖реБ рдХрджрд╛рдЪрдиред
(рдЧреАрддрд╛ 2.47)

*рдЕрд░реНрде*: рддреБрдореНрд╣рд╛рд░рд╛ рдХрд░реНрдо рдХрд░рдиреЗ рдореЗрдВ рд╣реА рдЕрдзрд┐рдХрд╛рд░ рд╣реИ, рдлрд▓реЛрдВ рдореЗрдВ рдХрднреА рдирд╣реАрдВред

*рдЖрдЬ рдХрд╛ рдЕрднреНрдпрд╛рд╕*: рдЖрдЬ рдПрдХ рдХрд╛рдо рдмрд┐рдирд╛ рдкрд░рд┐рдгрд╛рдо рдХреА рдЪрд┐рдВрддрд╛ рдХрд┐рдП рдХрд░реЗрдВред

рдХреМрди рд╕рд╛ рдХрд╛рдо рдЖрдк рдмрд┐рдирд╛ рддрдирд╛рд╡ рдХреЗ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?`;
            },
            english: async () => {
                return `ЁЯУЦ *Today's Gita Wisdom*

"You have the right to work, but never to the fruit."
(Gita 2.47)

*Today's Practice*: Do one task today without worrying about the outcome.

Which task can you do without stress today?`;
            }
        },
        "3": {
            hindi: "ЁЯТм рдореИрдВ рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ? рдореИрдВ рдЧреАрддрд╛ рдХреА рд╢рд┐рдХреНрд╖рд╛рдУрдВ рдХреЗ through рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛ред",
            english: "ЁЯТм I'm here to listen. Please share how you're feeling? I'll help you through the teachings of Gita."
        },
        "4": {
            hindi: "ЁЯОУ рдЧреАрддрд╛ рдЬреНрдЮрд╛рди: рднрдЧрд╡рдж рдЧреАрддрд╛ 18 рдЕрдзреНрдпрд╛рдпреЛрдВ рдореЗрдВ рд╡рд┐рднрд╛рдЬрд┐рдд рд╣реИ, рдЬреЛ рдЬреАрд╡рди рдХреЗ рд╡рд┐рднрд┐рдиреНрди рдкрд╣рд▓реБрдУрдВ рдкрд░ рдкреНрд░рдХрд╛рд╢ рдбрд╛рд▓рддреА рд╣реИред рдЖрдк рдХрд┐рд╕ рд╡рд┐рд╖рдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
            english: "ЁЯОУ Gita Knowledge: The Bhagavad Gita is divided into 18 chapters, each illuminating different aspects of life. What specific topic would you like to know about?"
        },
        "5": {
            hindi: "ЁЯМИ рд╕рдВрдкреВрд░реНрдг рдорд╛рд░реНрдЧрджрд░реНрд╢рди: рдЖрдЗрдП рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐, рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдЬрд┐рдЬреНрдЮрд╛рд╕рд╛, рдФрд░ рджреИрдирд┐рдХ рдЪреБрдиреМрддрд┐рдпреЛрдВ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░реЗрдВред рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ рдЖрдк рдХрд╣рд╛рдБ рд╕реЗ рд╢реБрд░реВ рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
            english: "ЁЯМИ Complete Guidance: Let's discuss your current situation, spiritual curiosity, and daily challenges. Please tell me where you'd like to start?"
        }
    };

    const selected = choices[choice];
    if (!selected) {
        // If not a menu choice (e.g., user typed text), treat as direct conversation
        console.log(`ЁЯФД Treating as direct conversation instead of menu choice`);
        await updateUserState(phone, { 
            conversation_stage: "chatting"
        });
        
        // Use AI to respond
        await getAIResponse(phone, choice, language, user);
        return;
    }

    try {
        let promptContent;
        const selectedLang = selected[language] || selected.english;
        
        if (typeof selectedLang === 'function') {
            promptContent = await selectedLang();
        } else {
            promptContent = selectedLang;
        }
        
        console.log(`тЬЕ Sending menu response for choice ${choice}`);
        await sendViaHeltar(phone, promptContent, `menu_${choice}`);
        await updateUserState(phone, { 
            conversation_stage: 'chatting',
            last_menu_choice: choice
        });
        
    } catch (error) {
        console.error(`тЭМ Menu choice error for ${choice}:`, error);
        const fallbackMessage = language === "Hindi" 
            ? "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рдЖрдИ рд╣реИред рдХреГрдкрдпрд╛ рд╕реАрдзреЗ рдЕрдкрдиреА рдмрд╛рдд рд▓рд┐рдЦреЗрдВред"
            : "Sorry, there was a technical issue. Please type your message directly.";
        await sendViaHeltar(phone, fallbackMessage, "menu_error");
    }
}

/* ---------------- AI RESPONSE SYSTEM ---------------- */
async function getAIResponse(phone, text, language, user) {
    // If OpenAI is not available, use fallback
    if (!OPENAI_KEY) {
        await sendFallbackResponse(phone, text, language);
        return;
    }

    const cacheKey = `${phone}:${text.substring(0, 50)}:${language}`;
    
    if (responseCache.has(cacheKey)) {
        console.log("тЬЕ Using cached response");
        const cached = responseCache.get(cacheKey);
        await sendViaHeltar(phone, cached, "ai_response");
        return;
    }

    try {
        const systemPrompt = BALANCED_SYSTEM_PROMPT[language] || BALANCED_SYSTEM_PROMPT.english;
        
        const messages = [
            { role: "system", content: systemPrompt },
            { role: "user", content: text }
        ];

        const body = { 
            model: OPENAI_MODEL, 
            messages: messages,
            max_tokens: 150,
            temperature: 0.7
        };

        const resp = await axios.post("https://api.openai.com/v1/chat/completions", body, {
            headers: { 
                Authorization: `Bearer ${OPENAI_KEY}`, 
                "Content-Type": "application/json" 
            },
            timeout: 20000
        });

        const aiResponse = resp.data?.choices?.[0]?.message?.content;
        
        if (aiResponse && aiResponse.trim().length > 10) {
            // Clean up response
            let cleanResponse = aiResponse
                .replace(/Want to know more\?.*$/i, '')
                .replace(/Does this seem helpful\?.*$/i, '')
                .replace(/рдХреНрдпрд╛ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ\?.*$/i, '')
                .replace(/рд╕рдордЭ рдореЗрдВ рдЖрдпрд╛\?.*$/i, '');

            // Ensure it ends with a question
            if (!cleanResponse.trim().endsWith('?') && !cleanResponse.includes('?')) {
                const question = getEngagementQuestion(phone, language);
                cleanResponse += ' ' + question;
            }

            await sendViaHeltar(phone, cleanResponse, "ai_response");
            
            // Cache the response
            responseCache.set(cacheKey, cleanResponse);
            setTimeout(() => responseCache.delete(cacheKey), 300000); // 5 min cache
            
        } else {
            throw new Error("Empty AI response");
        }
        
    } catch (error) {
        console.error("тЭМ AI response error:", error.message);
        await sendFallbackResponse(phone, text, language);
    }
}

/* ---------------- Fallback Response ---------------- */
async function sendFallbackResponse(phone, text, language) {
    const isStress = text.toLowerCase().includes('stress') || text.toLowerCase().includes('рддрдирд╛рд╡');
    const isRelationship = text.toLowerCase().includes('relationship') || text.toLowerCase().includes('рд░рд┐рд╢реНрдд');
    
    let response;
    
    if (isStress) {
        response = language === "Hindi" 
            ? ENHANCED_GITA_WISDOM.stress.teachings.hindi[0]
            : ENHANCED_GITA_WISDOM.stress.teachings.english[0];
    } else if (isRelationship) {
        response = language === "Hindi" 
            ? ENHANCED_GITA_WISDOM.relationships.teachings.hindi[0]
            : ENHANCED_GITA_WISDOM.relationships.teachings.english[0];
    } else {
        response = language === "Hindi" 
            ? `рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред ЁЯЩП

рдЧреАрддрд╛ рд╣рдореЗрдВ рд╕рдВрддреБрд▓рд┐рдд рдХрд░реНрдо рдФрд░ рднрдХреНрддрд┐ рдХреЗ through рдЖрдВрддрд░рд┐рдХ рд╢рд╛рдВрддрд┐ рдкрд╛рдирд╛ рд╕рд┐рдЦрд╛рддреА рд╣реИред

рдЖрдЬ рдЖрдк рдЕрдкрдиреЗ рдЬреАрд╡рди рдХреЗ рдХрд┐рд╕ рдкрд╣рд▓реВ рдкрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдЪрд╛рд╣реЗрдВрдЧреЗ?`
            : `Thank you for sharing. ЁЯЩП

The Gita teaches us to find peace within through balanced action and devotion.

What aspect of your life would you like guidance with today?`;
    }
    
    await sendViaHeltar(phone, response, "fallback_response");
}

/* ---------------- Language Switch Handler ---------------- */
async function handleLanguageSwitch(phone, newLanguage) {
    const confirmationMessage = newLanguage === 'English' 
        ? "тЬЕ Language switched to English. How can I help you today? ЁЯШК" 
        : "тЬЕ рднрд╛рд╖рд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдмрджрд▓ рдЧрдИред рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? ЁЯШК";
    
    await sendViaHeltar(phone, confirmationMessage, "language_switch");
    await resetToMenuStage(phone, newLanguage);
}

/* ---------------- MAIN WEBHOOK HANDLER ---------------- */
app.post("/webhook", async (req, res) => {
    try {
        res.status(200).send("OK"); // Respond immediately
        
        const body = req.body || {};
        console.log("ЁЯУи Webhook received:", JSON.stringify(body).substring(0, 300));

        // Extract message data
        let phone, text;
        
        if (body?.messages?.[0]) {
            // Heltar format
            phone = body.messages[0].clientWaNumber;
            text = body.messages[0].message?.text || "";
        } else if (body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0]) {
            // Meta format
            phone = body.entry[0].changes[0].value.messages[0].from;
            text = body.entry[0].changes[0].value.messages[0].text?.body || "";
        } else {
            console.log("тЪая╕П Unknown webhook format");
            return;
        }

        if (!phone || !text) {
            console.warn("тЪая╕П Missing phone or text");
            return;
        }

        console.log(`ЁЯУй From ${phone}: "${text}"`);

        // Get user state
        const user = await getUserState(phone);
        
        // Determine language
        const languageResult = await determineUserLanguage(phone, text, user);
        const language = languageResult.language;
        const isLanguageSwitch = languageResult.isSwitch;

        // Handle explicit language switching
        if (isLanguageSwitch) {
            await handleLanguageSwitch(phone, language);
            return;
        }
        
        // ЁЯОп HIGHEST PRIORITY: Template button responses
        if (isTemplateButtonResponse(text)) {
            console.log(`ЁЯОп Template button detected: "${text}"`);
            const handled = await handleTemplateButtonResponse(phone, text, language, user);
            if (handled) return;
        }

        // Handle stage reset
        if (shouldResetToMenu(text, user.conversation_stage)) {
            console.log(`ЁЯФД Stage reset triggered for: "${text}"`);
            await resetToMenuStage(phone, language);
            return;
        }

        // Handle menu choices
        if (user.conversation_stage === "menu" && /^[1-5]$/.test(text.trim())) {
            await handleEnhancedMenuChoice(phone, text.trim(), language, user);
            return;
        }

        // Default: AI conversation
        await updateUserState(phone, { 
            conversation_stage: "chatting"
        });
        
        await getAIResponse(phone, text, language, user);

    } catch (err) {
        console.error("тЭМ Webhook error:", err?.message || err);
    }
});

/* ---------------- Health Check ---------------- */
app.get("/health", (req, res) => {
    res.json({ 
        status: "ready", 
        bot: BOT_NAME, 
        timestamp: new Date().toISOString(),
        features: [
            "тЬЕ Complete Template System",
            "тЬЕ Morning Campaign Ready", 
            "тЬЕ Advanced Language Detection",
            "тЬЕ Engagement Questions",
            "тЬЕ Response Caching",
            "тЬЕ Fallback Responses",
            "тЬЕ Analytics Tracking",
            "тЬЕ Multi-language Support"
        ],
        template_buttons: Object.keys(OPTIMIZED_TEMPLATE_RESPONSES),
        cache_size: responseCache.size,
        ready_for_morning_campaign: true
    });
});

/* ---------------- Start Server ---------------- */
app.listen(PORT, () => {
    console.log(`\nЁЯЪА ${BOT_NAME} PRODUCTION v5 running on port ${PORT}`);
    console.log("тЬЕ COMPLETE & READY FOR MORNING TEMPLATE CAMPAIGN");
    console.log("тЬЕ ALL TEMPLATE BUTTONS WORKING: 'Practice', 'Work Stress', 'Relationship Issues', etc.");
    console.log("тЬЕ ROBUST CONVERSATION FLOW WITH MENU SYSTEM");
    console.log("тЬЕ ADVANCED LANGUAGE DETECTION & ANALYTICS");
    setupDatabase().catch(console.error);
});

// Cleanup interval
setInterval(() => {
    console.log(`ЁЯФД Cache stats: ${responseCache.size} cached responses`);
}, 60000);

process.on('SIGINT', async () => {
    console.log('\nЁЯЫС Shutting down gracefully...');
    await dbPool.end();
    process.exit(0);
});
